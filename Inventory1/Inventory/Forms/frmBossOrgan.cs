using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using Inventory.Dialogs;
using Inventory.Forms;
using Inventory.Data;
namespace Inventory.Dialogs
{
    public partial class frmBossOrgan : DevExpress.XtraBars.Ribbon.RibbonForm
    {

        public DataClassesDataContext dc { get; set; }

        public Organ Or { get; set; }
        public frmBossOrgan()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            organsBindingSource.DataSource = new Inventory.Data.DataClassesDataContext().Organs;
        }

        private void frmBossOrgan_Load(object sender, EventArgs e)
        {
            G();

        }
        private void G()
        {
            userBindingSource.DataSource = dc.Users.ToList();
            lkpOrgan.EditValue = Or.ID;
            organsBindingSource.DataSource = dc.Organs.ToList();
            personBindingSource2.DataSource = dc.Persons.Where(c => c.IDOrgan == Or.ID && c.Boss == true).ToList();
        }

        private void barButtonItem2_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Close();
        }

        private void barButtonItem1_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                var current = userBindingSource.Current as User;
                if (current == null)
                {

                    return;
                }

                Person u = new Person();
                u.UserID = current.UserID.Value;
                u.FirstName = current.FirstName;
                u.LastName = current.LastName;
                u.IDOrgan = Int32.Parse(lkpOrgan.EditValue.ToString());
                dc.Persons.InsertOnSubmit(u);
                dc.SubmitChanges();
                lkpOrgan.EditValue = "";
                ///  gridControl1.RefreshDataSource();
                //gridView1.RefreshData();
                MessageBox.Show("اطلاعات با موفقیت ثبت  گردید", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                userBindingSource.DataSource = dc.Users.ToList();
            }
            catch { MessageBox.Show("ثبت با خطا مواجه شد ", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading); }
        }


        private void barButtonItem2_ItemClick_1(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Close();
        }

        private void barButtonItem1_ItemClick_1(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            //var prs = skp22.EditValue as Person;
            if (skp22.EditValue == null)
            {
                MessageBox.Show("لطفا مدیر واحد را انتخاب کنید", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                return;
            }
            if (dc.Persons.Any(c => c.UserID == Int32.Parse(skp22.EditValue.ToString())  && c.Boss == true))
            {
                MessageBox.Show("این فرد قبلا به عنوان رئیس یک واحدانتخاب شده است", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                return;
            }
            if (dc.Persons.Any(c => c.IDOrgan == Int32.Parse(lkpOrgan.EditValue.ToString())  && c.Boss == true))
            {
                MessageBox.Show("رئیس این واحد قبلا انتخاب شده است", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                return;
            }
            if (dc.Persons.Any(c => c.UserID == Int32.Parse(skp22.EditValue.ToString()) && c.Boss == false))
            {
                MessageBox.Show("این فرد قبلا به عنوان  کاربر یک واحدانتخاب شده است", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                return;
            }

            else
            {
                //var US = Int32.Parse(skp22.EditValue.ToString());
                //   var s = dc.Persons.Where(c => c.UserID == US && c.Deleted != true).FirstOrDefault();
                Person u = new Person();
                // var firstname = s.fi
                //   u.LastName = lkpOrgan.Text;
                // u.FirstName = s.FirstName;
                u.LastName = skp22.Text;
                u.IDOrgan = Int32.Parse(lkpOrgan.EditValue.ToString());
                u.UserID = Int32.Parse(skp22.EditValue.ToString());
                u.Phone = txtTel.Text;
                u.NationalCode = txtPersonalCode.Text;
                u.Boss = true;
                dc.Persons.InsertOnSubmit(u);
                dc.SubmitChanges();
                G();
            }
        }

        private void barButtonItem3_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            var row = personBindingSource2.Current as Person;
            dc.Dispose();
            dc = new DataClassesDataContext();
            row = dc.Persons.FirstOrDefault(x => x.ID == row.ID);

            if (MessageBox.Show("آیا از حذف اطمینان دارید ؟", "توجه", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading) != DialogResult.Yes)
                return;



            dc.Persons.DeleteOnSubmit(row);

            dc.SubmitChanges();
            G();
       
        //    var p = personBindingSource2.Current as Person;
        //    if (p == null)
        //    {
        //        return;
        //    }
        //    //var d = dc.pe.Where(c => c.UserID == p.UserID && c.IDOrgan == p.IDOrgan).FirstOrDefault();

        //    p.Deleted = true;
        //    dc.SubmitChanges();
        //    G();
    }

        private void barButtonItem4_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            personBindingSource2.DataSource = dc.Persons.Where(c => c.IDOrgan == Or.ID  && c.Boss == true).ToList();
        }

        private void barButtonItem5_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            var Pe = personBindingSource2.Current as Person;
            if (Pe == null)
            {

            }
            var a = new frmUserOrgan();
            a.dc = dc;
            // a.isEdit = true;
            a.Pe = Pe;
            //     a.Text = "مشاهده رئیس واحدها";
            if (a.ShowDialog() == DialogResult.OK)
            {
                dc.SubmitChanges();
                G();
            }

        }
    }
}