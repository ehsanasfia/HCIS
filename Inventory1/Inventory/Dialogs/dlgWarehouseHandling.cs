using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using Inventory.Dialogs;
using Inventory.Forms;
using Inventory.Data;

namespace Inventory.Dialogs
{
    public partial class dlgWarehouseHandling : DevExpress.XtraEditors.XtraForm
    {
        public DataClassesDataContext dc { get; set; }
        List<FactorProduct> lst = new List<FactorProduct>();
        List<FactorProduct> del = new List<FactorProduct>();
        List<InStack> x;
        public Factor ObjectRM { get; set; }
        public dlgWarehouseHandling()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            providersBindingSource.DataSource = new Inventory.Data.DataClassesDataContext().Providers;
        }
        private void dlgWarehouseHandling_Load(object sender, EventArgs e)
        {
         
            GetData();
        }
        private void GetData()
        {
            
            if (ObjectRM == null)
            {
                ObjectRM = new Factor();
            }


            inStackBindingSource.DataSource = dc.InStacks.Where(x => x.Parent != null && x.IDWarehouse == Properties.Settings.Default.Install).ToList();
            factorProductBindingSource.DataSource = ObjectRM.FactorProducts.ToList();
            providersBindingSource.DataSource = dc.Providers.Where(x => x.ID == 1).ToList();
            organBindingSource.DataSource = dc.Organs.Where(c => c.Warehouse == true).ToList();
          
            }

        private void btnOk_Click(object sender, EventArgs e)
        {
           
        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            
            var row = inStackBindingSource.Current as InStack;
            if (row == null)
            {
                return;
            }
            if (lst.Any(c => c.IDProduct == row.ID)) { MessageBox.Show("کالا تکراری"); return; }
            var x = gridView2.GetSelectedRows();
            foreach (var c in x)
            {
                var a = gridView2.GetRow(c) as InStack;


                var RD = new FactorProduct()
                {

                    IDProduct = a.ID,
                    ProductName = a.FaName,
                    AmountBuy = a.Mojodi,
                    Price = a.Price,
                    WarehouseKeeper = true,

                    Factor = ObjectRM,
                  
            };

    
            }

            lst = ObjectRM.FactorProducts.ToList();
            factorProductBindingSource.DataSource = lst;
            factorProductBindingSource.EndEdit();

            ////
        }

        private void barButtonItem1_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            //if (txtFactorNumber.Text == null)
            //{
            //    MessageBox.Show("شماره فاکتور را وارد کنید", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
            //    return;
            //}
            if (txtOrdernum.Text == null)
            {
                MessageBox.Show("شماره سفارش را وارد کنید", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                return;
            }
            if (txtBarname.Text == null)
            {
                MessageBox.Show("شماره بارنامه را وارد کنید", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                return;
            }
            if (lkpProvider.EditValue == null)
            {
                MessageBox.Show("تحویل دهنده را انتخاب کنید", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                return;
            }
            if (lkpIDWarehouse.EditValue == null)
            {
                MessageBox.Show("انبار تحویل دهنده را انتخاب کنید", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                return;
            }
            ObjectRM.WarehouseHandling = true;
         //   ObjectRM.FactorNumber = Int32.Parse(txtFactorNumber.Text);
            ObjectRM.FactorDate = txtFactorDate.Text;
            ObjectRM.IDProvider = Int32.Parse(lkpProvider.EditValue.ToString());
            ObjectRM.ResponsibleSale = txtResponsibleSale.Text;
            ObjectRM.Ordernum = txtOrdernum.Text;
            ObjectRM.barname = txtBarname.Text;
            ObjectRM.WarehouseKeeper = true;
            ObjectRM.IDWarehouse = Int32.Parse(lkpIDWarehouse.EditValue.ToString());
            dc.Factors.InsertOnSubmit(ObjectRM);
            MessageBox.Show("اطلاعات با موفقیت ثبت شد", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
            DialogResult = DialogResult.OK;
        }

        private void barButtonItem2_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Close();
        }
        
    }
}
