using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using Inventory.Data;
using Inventory.Dialogs;
using Inventory.Forms;
namespace Inventory.Dialogs
{
    public partial class dlgProductDefinition : DevExpress.XtraEditors.XtraForm
    {

        public DataClassesDataContext dc { get; set; }
        public bool isEdit { get; set; }
        public Product PHT { get; set; }
        public dlgProductDefinition()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            measurementDefinitionsBindingSource.DataSource = new Inventory.Data.DataClassesDataContext().MeasurementDefinitions;
            // This line of code is generated by Data Source Configuration Wizard
            //  warehousesBindingSource.DataSource = new Inventory.Data.DataClassesDataContext().warehouses;
            // This line of code is generated by Data Source Configuration Wizard
            //  productsBindingSource.DataSource = new Inventory.Data.DataClassesDataContext().Products;
        }

        private void dlgProductDefinition_Load(object sender, EventArgs e)
        {
            organsBindingSource.DataSource = dc.Organs.Where(c => c.Warehouse == true).OrderBy(c => c.Name).ToList();
            if (isEdit == true)
            {
                txtFaName.Text = PHT.FaName;
                // lkpParent.Text = PHT.Product1.FaName.ToString();
             //   lkpMeasurement.EditValue = PHT.IDMeasurement;
                //  lkpWarehouseName.EditValue = PHT.IDWarehouseName;  بعد 
                txtPrice.Text = PHT.Price + "";
                txtRegisterDate.Text = PHT.RegisterDate;
                txtInitialBalance.Text = PHT.InitialBalance + "";
                txtLessAmount.Text = PHT.LessAmount + "";
                txtShelf.Text = PHT.Shelf + "";
                txtunit.Text = PHT.Unit + "";
                txtWeight.Text = PHT.Weight + "";
                txtDimensions.Text = PHT.Dimensions + "";
                txtColor.Text = PHT.Color;
                memDescription.Text = PHT.Description;
                txtMCSE.Text = PHT.MESC;

                searchLookUpEdit1.EditValue = PHT.IDWarehouse;
                searchLookUpEdit1.Enabled = false;
            }
        }

        private void btnOk_Click(object sender, EventArgs e)
        {
            if (searchLookUpEdit1.EditValue == null)
            {
                MessageBox.Show("انبار را انتخاب کنید", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                return;
            }
          //  var Mea = lkpMeasurement.EditValue as MeasurementDefinition;
            ////var paren = lkpParent.EditValue as Product;
            //  var idw = lkpWarehouseName.EditValue as warehouse;  بعد

            //if (lkpMeasurement.EditValue == null)
            //{
            //    MessageBox.Show("واحد اندازگیری را وارد کنید", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
            //    return;
            //}واحد اندازه گیری

            //if (lkpParent.EditValue == null)
            //{
            //    MessageBox.Show("گروه کالا را وارد کنید", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
            //    return;
            //}
            //if (lkpWarehouseName.EditValue == null)
            //{
            //    MessageBox.Show("نام انبار را وارد کنید", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
            //    return;
            //} بعد

            if (isEdit == false)
            {
                PHT = new Product();
            }
            
            PHT.FaName = txtFaName.Text;

            PHT.MESC = txtMCSE.Text;
            // PHT.Product1 = paren;
            //PHT.IDMeasurement = Mea; 
            //PHT.warehouse = idw; بعد
            PHT.ExpirationDate = txtExpirationDate.Text;
            // var m = dc.warehouses.Where(c => c.ResponsibleUserID == MainModule.UserID).FirstOrDefault();

            PHT.IDWarehouse =Int32.Parse (searchLookUpEdit1.EditValue .ToString());

            PHT.Price = txtPrice.Text;


            PHT.InitialBalance = txtInitialBalance.Text;

            PHT.Unit = txtunit.Text;

            PHT.LessAmount = txtLessAmount.Text;




            PHT.Weight = txtWeight.Text;
            PHT.RegisterDate = txtRegisterDate.Text;
            // PHT.InitialBalance = Int32.Parse(txtInitialBalance.Text);
            //  PHT.LessAmount = Int32.Parse(txtLessAmount.Text);

            PHT.Shelf = txtShelf.Text;
         
            //  PHT.Weight = Int32.Parse(txtWeight.Text);
            PHT.Dimensions = txtDimensions.Text;
            PHT.Color = txtColor.Text;
            PHT.Description = memDescription.Text;
            if (isEdit == false)
                dc.Products.InsertOnSubmit(PHT);

            MessageBox.Show("اطلاعات با موفقيت ثبت  گرديد", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
            DialogResult = DialogResult.OK;

        }

        private void btnNo_Click(object sender, EventArgs e)
        {
            Close();
        }
    }
}