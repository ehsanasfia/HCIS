#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GenerateAndConfirmSerialNumber
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HCIS")]
	public partial class HCISDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSerialNumber(SerialNumber instance);
    partial void UpdateSerialNumber(SerialNumber instance);
    partial void DeleteSerialNumber(SerialNumber instance);
    #endregion
		
		public HCISDataContext() : 
				base(global::GenerateAndConfirmSerialNumber.Properties.Settings.Default.HCISConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HCISDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HCISDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HCISDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HCISDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SerialNumber> SerialNumbers
		{
			get
			{
				return this.GetTable<SerialNumber>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SerialNumber")]
	public partial class SerialNumber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _RequestNumber;
		
		private string _SerialNumber1;
		
		private bool _Confirmation;
		
		private string _ConfirmTime;
		
		private string _ConfirmDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRequestNumberChanging(string value);
    partial void OnRequestNumberChanged();
    partial void OnSerialNumber1Changing(string value);
    partial void OnSerialNumber1Changed();
    partial void OnConfirmationChanging(bool value);
    partial void OnConfirmationChanged();
    partial void OnConfirmTimeChanging(string value);
    partial void OnConfirmTimeChanged();
    partial void OnConfirmDateChanging(string value);
    partial void OnConfirmDateChanged();
    #endregion
		
		public SerialNumber()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestNumber", DbType="NVarChar(200)")]
		public string RequestNumber
		{
			get
			{
				return this._RequestNumber;
			}
			set
			{
				if ((this._RequestNumber != value))
				{
					this.OnRequestNumberChanging(value);
					this.SendPropertyChanging();
					this._RequestNumber = value;
					this.SendPropertyChanged("RequestNumber");
					this.OnRequestNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SerialNumber", Storage="_SerialNumber1", DbType="NVarChar(200)")]
		public string SerialNumber1
		{
			get
			{
				return this._SerialNumber1;
			}
			set
			{
				if ((this._SerialNumber1 != value))
				{
					this.OnSerialNumber1Changing(value);
					this.SendPropertyChanging();
					this._SerialNumber1 = value;
					this.SendPropertyChanged("SerialNumber1");
					this.OnSerialNumber1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Confirmation", DbType="Bit NOT NULL")]
		public bool Confirmation
		{
			get
			{
				return this._Confirmation;
			}
			set
			{
				if ((this._Confirmation != value))
				{
					this.OnConfirmationChanging(value);
					this.SendPropertyChanging();
					this._Confirmation = value;
					this.SendPropertyChanged("Confirmation");
					this.OnConfirmationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfirmTime", DbType="VarChar(5)")]
		public string ConfirmTime
		{
			get
			{
				return this._ConfirmTime;
			}
			set
			{
				if ((this._ConfirmTime != value))
				{
					this.OnConfirmTimeChanging(value);
					this.SendPropertyChanging();
					this._ConfirmTime = value;
					this.SendPropertyChanged("ConfirmTime");
					this.OnConfirmTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfirmDate", DbType="VarChar(10)")]
		public string ConfirmDate
		{
			get
			{
				return this._ConfirmDate;
			}
			set
			{
				if ((this._ConfirmDate != value))
				{
					this.OnConfirmDateChanging(value);
					this.SendPropertyChanging();
					this._ConfirmDate = value;
					this.SendPropertyChanged("ConfirmDate");
					this.OnConfirmDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
