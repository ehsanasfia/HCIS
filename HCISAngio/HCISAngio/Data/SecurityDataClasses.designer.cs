#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HCISAngio.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SecurityControl")]
	public partial class SecurityDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblApplicationDepartment(tblApplicationDepartment instance);
    partial void UpdatetblApplicationDepartment(tblApplicationDepartment instance);
    partial void DeletetblApplicationDepartment(tblApplicationDepartment instance);
    partial void InserttblUser(tblUser instance);
    partial void UpdatetblUser(tblUser instance);
    partial void DeletetblUser(tblUser instance);
    partial void InserttblApplication(tblApplication instance);
    partial void UpdatetblApplication(tblApplication instance);
    partial void DeletetblApplication(tblApplication instance);
    partial void InserttblObject(tblObject instance);
    partial void UpdatetblObject(tblObject instance);
    partial void DeletetblObject(tblObject instance);
    partial void InserttblObjectType(tblObjectType instance);
    partial void UpdatetblObjectType(tblObjectType instance);
    partial void DeletetblObjectType(tblObjectType instance);
    partial void InserttblPermission(tblPermission instance);
    partial void UpdatetblPermission(tblPermission instance);
    partial void DeletetblPermission(tblPermission instance);
    partial void InserttblRolebasedObjectPermission(tblRolebasedObjectPermission instance);
    partial void UpdatetblRolebasedObjectPermission(tblRolebasedObjectPermission instance);
    partial void DeletetblRolebasedObjectPermission(tblRolebasedObjectPermission instance);
    partial void InserttblRole(tblRole instance);
    partial void UpdatetblRole(tblRole instance);
    partial void DeletetblRole(tblRole instance);
    partial void InserttblUserAccessibleDepartment(tblUserAccessibleDepartment instance);
    partial void UpdatetblUserAccessibleDepartment(tblUserAccessibleDepartment instance);
    partial void DeletetblUserAccessibleDepartment(tblUserAccessibleDepartment instance);
    partial void InserttblUserbasedObjectPermission(tblUserbasedObjectPermission instance);
    partial void UpdatetblUserbasedObjectPermission(tblUserbasedObjectPermission instance);
    partial void DeletetblUserbasedObjectPermission(tblUserbasedObjectPermission instance);
    partial void InserttblUserbasedRole(tblUserbasedRole instance);
    partial void UpdatetblUserbasedRole(tblUserbasedRole instance);
    partial void DeletetblUserbasedRole(tblUserbasedRole instance);
    #endregion
		
		public SecurityDataClassesDataContext() : 
				base(global::HCISAngio.Properties.Settings.Default.SecurityControlConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SecurityDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SecurityDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SecurityDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SecurityDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblApplicationDepartment> tblApplicationDepartments
		{
			get
			{
				return this.GetTable<tblApplicationDepartment>();
			}
		}
		
		public System.Data.Linq.Table<tblUser> tblUsers
		{
			get
			{
				return this.GetTable<tblUser>();
			}
		}
		
		public System.Data.Linq.Table<tblApplicationOption> tblApplicationOptions
		{
			get
			{
				return this.GetTable<tblApplicationOption>();
			}
		}
		
		public System.Data.Linq.Table<tblApplication> tblApplications
		{
			get
			{
				return this.GetTable<tblApplication>();
			}
		}
		
		public System.Data.Linq.Table<tblObject> tblObjects
		{
			get
			{
				return this.GetTable<tblObject>();
			}
		}
		
		public System.Data.Linq.Table<tblObjectType> tblObjectTypes
		{
			get
			{
				return this.GetTable<tblObjectType>();
			}
		}
		
		public System.Data.Linq.Table<tblPermission> tblPermissions
		{
			get
			{
				return this.GetTable<tblPermission>();
			}
		}
		
		public System.Data.Linq.Table<tblRolebasedObjectPermission> tblRolebasedObjectPermissions
		{
			get
			{
				return this.GetTable<tblRolebasedObjectPermission>();
			}
		}
		
		public System.Data.Linq.Table<tblRole> tblRoles
		{
			get
			{
				return this.GetTable<tblRole>();
			}
		}
		
		public System.Data.Linq.Table<tblUserAccessibleDepartment> tblUserAccessibleDepartments
		{
			get
			{
				return this.GetTable<tblUserAccessibleDepartment>();
			}
		}
		
		public System.Data.Linq.Table<tblUserbasedObjectPermission> tblUserbasedObjectPermissions
		{
			get
			{
				return this.GetTable<tblUserbasedObjectPermission>();
			}
		}
		
		public System.Data.Linq.Table<tblUserbasedRole> tblUserbasedRoles
		{
			get
			{
				return this.GetTable<tblUserbasedRole>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblApplicationDepartments")]
	public partial class tblApplicationDepartment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AppID;
		
		private int _DepID;
		
		private EntitySet<tblUserAccessibleDepartment> _tblUserAccessibleDepartments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAppIDChanging(int value);
    partial void OnAppIDChanged();
    partial void OnDepIDChanging(int value);
    partial void OnDepIDChanged();
    #endregion
		
		public tblApplicationDepartment()
		{
			this._tblUserAccessibleDepartments = new EntitySet<tblUserAccessibleDepartment>(new Action<tblUserAccessibleDepartment>(this.attach_tblUserAccessibleDepartments), new Action<tblUserAccessibleDepartment>(this.detach_tblUserAccessibleDepartments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AppID
		{
			get
			{
				return this._AppID;
			}
			set
			{
				if ((this._AppID != value))
				{
					this.OnAppIDChanging(value);
					this.SendPropertyChanging();
					this._AppID = value;
					this.SendPropertyChanged("AppID");
					this.OnAppIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DepID
		{
			get
			{
				return this._DepID;
			}
			set
			{
				if ((this._DepID != value))
				{
					this.OnDepIDChanging(value);
					this.SendPropertyChanging();
					this._DepID = value;
					this.SendPropertyChanged("DepID");
					this.OnDepIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplicationDepartment_tblUserAccessibleDepartment", Storage="_tblUserAccessibleDepartments", ThisKey="ID", OtherKey="AppAccessibleID")]
		public EntitySet<tblUserAccessibleDepartment> tblUserAccessibleDepartments
		{
			get
			{
				return this._tblUserAccessibleDepartments;
			}
			set
			{
				this._tblUserAccessibleDepartments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblUserAccessibleDepartments(tblUserAccessibleDepartment entity)
		{
			this.SendPropertyChanging();
			entity.tblApplicationDepartment = this;
		}
		
		private void detach_tblUserAccessibleDepartments(tblUserAccessibleDepartment entity)
		{
			this.SendPropertyChanging();
			entity.tblApplicationDepartment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUsers")]
	public partial class tblUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _UserName;
		
		private System.Data.Linq.Binary _Password;
		
		private string _FirstName;
		
		private string _LastName;
		
		private bool _Disabled;
		
		private System.Nullable<int> _PersonalNo;
		
		private string _Descriptions;
		
		private System.Nullable<int> _ApplicationID;
		
		private string _SystemDescriptions;
		
		private System.Nullable<bool> _Sex;
		
		private System.Nullable<bool> _IsNurse;
		
		private string _shshGroup;
		
		private System.Nullable<int> _RoleID;
		
		private EntitySet<tblUserAccessibleDepartment> _tblUserAccessibleDepartments;
		
		private EntitySet<tblUserbasedObjectPermission> _tblUserbasedObjectPermissions;
		
		private EntitySet<tblUserbasedRole> _tblUserbasedRoles;
		
		private EntityRef<tblApplication> _tblApplication;
		
		private EntityRef<tblRole> _tblRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(System.Data.Linq.Binary value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDisabledChanging(bool value);
    partial void OnDisabledChanged();
    partial void OnPersonalNoChanging(System.Nullable<int> value);
    partial void OnPersonalNoChanged();
    partial void OnDescriptionsChanging(string value);
    partial void OnDescriptionsChanged();
    partial void OnApplicationIDChanging(System.Nullable<int> value);
    partial void OnApplicationIDChanged();
    partial void OnSystemDescriptionsChanging(string value);
    partial void OnSystemDescriptionsChanged();
    partial void OnSexChanging(System.Nullable<bool> value);
    partial void OnSexChanged();
    partial void OnIsNurseChanging(System.Nullable<bool> value);
    partial void OnIsNurseChanged();
    partial void OnshshGroupChanging(string value);
    partial void OnshshGroupChanged();
    partial void OnRoleIDChanging(System.Nullable<int> value);
    partial void OnRoleIDChanged();
    #endregion
		
		public tblUser()
		{
			this._tblUserAccessibleDepartments = new EntitySet<tblUserAccessibleDepartment>(new Action<tblUserAccessibleDepartment>(this.attach_tblUserAccessibleDepartments), new Action<tblUserAccessibleDepartment>(this.detach_tblUserAccessibleDepartments));
			this._tblUserbasedObjectPermissions = new EntitySet<tblUserbasedObjectPermission>(new Action<tblUserbasedObjectPermission>(this.attach_tblUserbasedObjectPermissions), new Action<tblUserbasedObjectPermission>(this.detach_tblUserbasedObjectPermissions));
			this._tblUserbasedRoles = new EntitySet<tblUserbasedRole>(new Action<tblUserbasedRole>(this.attach_tblUserbasedRoles), new Action<tblUserbasedRole>(this.detach_tblUserbasedRoles));
			this._tblApplication = default(EntityRef<tblApplication>);
			this._tblRole = default(EntityRef<tblRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="Binary(32)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Disabled", DbType="Bit NOT NULL")]
		public bool Disabled
		{
			get
			{
				return this._Disabled;
			}
			set
			{
				if ((this._Disabled != value))
				{
					this.OnDisabledChanging(value);
					this.SendPropertyChanging();
					this._Disabled = value;
					this.SendPropertyChanged("Disabled");
					this.OnDisabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalNo", DbType="Int")]
		public System.Nullable<int> PersonalNo
		{
			get
			{
				return this._PersonalNo;
			}
			set
			{
				if ((this._PersonalNo != value))
				{
					this.OnPersonalNoChanging(value);
					this.SendPropertyChanging();
					this._PersonalNo = value;
					this.SendPropertyChanged("PersonalNo");
					this.OnPersonalNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descriptions", DbType="NVarChar(MAX)")]
		public string Descriptions
		{
			get
			{
				return this._Descriptions;
			}
			set
			{
				if ((this._Descriptions != value))
				{
					this.OnDescriptionsChanging(value);
					this.SendPropertyChanging();
					this._Descriptions = value;
					this.SendPropertyChanged("Descriptions");
					this.OnDescriptionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", DbType="Int")]
		public System.Nullable<int> ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					if (this._tblApplication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemDescriptions", DbType="NVarChar(MAX)")]
		public string SystemDescriptions
		{
			get
			{
				return this._SystemDescriptions;
			}
			set
			{
				if ((this._SystemDescriptions != value))
				{
					this.OnSystemDescriptionsChanging(value);
					this.SendPropertyChanging();
					this._SystemDescriptions = value;
					this.SendPropertyChanged("SystemDescriptions");
					this.OnSystemDescriptionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="Bit")]
		public System.Nullable<bool> Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNurse", DbType="Bit")]
		public System.Nullable<bool> IsNurse
		{
			get
			{
				return this._IsNurse;
			}
			set
			{
				if ((this._IsNurse != value))
				{
					this.OnIsNurseChanging(value);
					this.SendPropertyChanging();
					this._IsNurse = value;
					this.SendPropertyChanged("IsNurse");
					this.OnIsNurseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shshGroup", DbType="NVarChar(50)")]
		public string shshGroup
		{
			get
			{
				return this._shshGroup;
			}
			set
			{
				if ((this._shshGroup != value))
				{
					this.OnshshGroupChanging(value);
					this.SendPropertyChanging();
					this._shshGroup = value;
					this.SendPropertyChanged("shshGroup");
					this.OnshshGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int")]
		public System.Nullable<int> RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._tblRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblUserAccessibleDepartment", Storage="_tblUserAccessibleDepartments", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<tblUserAccessibleDepartment> tblUserAccessibleDepartments
		{
			get
			{
				return this._tblUserAccessibleDepartments;
			}
			set
			{
				this._tblUserAccessibleDepartments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblUserbasedObjectPermission", Storage="_tblUserbasedObjectPermissions", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<tblUserbasedObjectPermission> tblUserbasedObjectPermissions
		{
			get
			{
				return this._tblUserbasedObjectPermissions;
			}
			set
			{
				this._tblUserbasedObjectPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblUserbasedRole", Storage="_tblUserbasedRoles", ThisKey="UserID", OtherKey="RoleID")]
		public EntitySet<tblUserbasedRole> tblUserbasedRoles
		{
			get
			{
				return this._tblUserbasedRoles;
			}
			set
			{
				this._tblUserbasedRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplication_tblUser", Storage="_tblApplication", ThisKey="ApplicationID", OtherKey="ApplicationID", IsForeignKey=true)]
		public tblApplication tblApplication
		{
			get
			{
				return this._tblApplication.Entity;
			}
			set
			{
				tblApplication previousValue = this._tblApplication.Entity;
				if (((previousValue != value) 
							|| (this._tblApplication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblApplication.Entity = null;
						previousValue.tblUsers.Remove(this);
					}
					this._tblApplication.Entity = value;
					if ((value != null))
					{
						value.tblUsers.Add(this);
						this._ApplicationID = value.ApplicationID;
					}
					else
					{
						this._ApplicationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblApplication");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblRole_tblUser", Storage="_tblRole", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public tblRole tblRole
		{
			get
			{
				return this._tblRole.Entity;
			}
			set
			{
				tblRole previousValue = this._tblRole.Entity;
				if (((previousValue != value) 
							|| (this._tblRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblRole.Entity = null;
						previousValue.tblUsers.Remove(this);
					}
					this._tblRole.Entity = value;
					if ((value != null))
					{
						value.tblUsers.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblUserAccessibleDepartments(tblUserAccessibleDepartment entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblUserAccessibleDepartments(tblUserAccessibleDepartment entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
		
		private void attach_tblUserbasedObjectPermissions(tblUserbasedObjectPermission entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblUserbasedObjectPermissions(tblUserbasedObjectPermission entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
		
		private void attach_tblUserbasedRoles(tblUserbasedRole entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblUserbasedRoles(tblUserbasedRole entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblApplicationOptions")]
	public partial class tblApplicationOption
	{
		
		private int _OptionID;
		
		private System.Nullable<int> _AppID;
		
		private string _OptionName;
		
		public tblApplicationOption()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptionID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int OptionID
		{
			get
			{
				return this._OptionID;
			}
			set
			{
				if ((this._OptionID != value))
				{
					this._OptionID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppID", DbType="Int")]
		public System.Nullable<int> AppID
		{
			get
			{
				return this._AppID;
			}
			set
			{
				if ((this._AppID != value))
				{
					this._AppID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptionName", DbType="NVarChar(50)")]
		public string OptionName
		{
			get
			{
				return this._OptionName;
			}
			set
			{
				if ((this._OptionName != value))
				{
					this._OptionName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblApplications")]
	public partial class tblApplication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ApplicationID;
		
		private string _ApplicationName;
		
		private string _Description;
		
		private EntitySet<tblUser> _tblUsers;
		
		private EntitySet<tblObject> _tblObjects;
		
		private EntitySet<tblRole> _tblRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIDChanging(int value);
    partial void OnApplicationIDChanged();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public tblApplication()
		{
			this._tblUsers = new EntitySet<tblUser>(new Action<tblUser>(this.attach_tblUsers), new Action<tblUser>(this.detach_tblUsers));
			this._tblObjects = new EntitySet<tblObject>(new Action<tblObject>(this.attach_tblObjects), new Action<tblObject>(this.detach_tblObjects));
			this._tblRoles = new EntitySet<tblRole>(new Action<tblRole>(this.attach_tblRoles), new Action<tblRole>(this.detach_tblRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplication_tblUser", Storage="_tblUsers", ThisKey="ApplicationID", OtherKey="ApplicationID")]
		public EntitySet<tblUser> tblUsers
		{
			get
			{
				return this._tblUsers;
			}
			set
			{
				this._tblUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplication_tblObject", Storage="_tblObjects", ThisKey="ApplicationID", OtherKey="AppID")]
		public EntitySet<tblObject> tblObjects
		{
			get
			{
				return this._tblObjects;
			}
			set
			{
				this._tblObjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplication_tblRole", Storage="_tblRoles", ThisKey="ApplicationID", OtherKey="AppID")]
		public EntitySet<tblRole> tblRoles
		{
			get
			{
				return this._tblRoles;
			}
			set
			{
				this._tblRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblUsers(tblUser entity)
		{
			this.SendPropertyChanging();
			entity.tblApplication = this;
		}
		
		private void detach_tblUsers(tblUser entity)
		{
			this.SendPropertyChanging();
			entity.tblApplication = null;
		}
		
		private void attach_tblObjects(tblObject entity)
		{
			this.SendPropertyChanging();
			entity.tblApplication = this;
		}
		
		private void detach_tblObjects(tblObject entity)
		{
			this.SendPropertyChanging();
			entity.tblApplication = null;
		}
		
		private void attach_tblRoles(tblRole entity)
		{
			this.SendPropertyChanging();
			entity.tblApplication = this;
		}
		
		private void detach_tblRoles(tblRole entity)
		{
			this.SendPropertyChanging();
			entity.tblApplication = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblObjects")]
	public partial class tblObject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ObjectID;
		
		private int _ObjectTypeID;
		
		private string _ObjectName;
		
		private string _ContainerClass;
		
		private System.Nullable<int> _AppID;
		
		private EntitySet<tblRolebasedObjectPermission> _tblRolebasedObjectPermissions;
		
		private EntitySet<tblUserbasedObjectPermission> _tblUserbasedObjectPermissions;
		
		private EntityRef<tblApplication> _tblApplication;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObjectIDChanging(int value);
    partial void OnObjectIDChanged();
    partial void OnObjectTypeIDChanging(int value);
    partial void OnObjectTypeIDChanged();
    partial void OnObjectNameChanging(string value);
    partial void OnObjectNameChanged();
    partial void OnContainerClassChanging(string value);
    partial void OnContainerClassChanged();
    partial void OnAppIDChanging(System.Nullable<int> value);
    partial void OnAppIDChanged();
    #endregion
		
		public tblObject()
		{
			this._tblRolebasedObjectPermissions = new EntitySet<tblRolebasedObjectPermission>(new Action<tblRolebasedObjectPermission>(this.attach_tblRolebasedObjectPermissions), new Action<tblRolebasedObjectPermission>(this.detach_tblRolebasedObjectPermissions));
			this._tblUserbasedObjectPermissions = new EntitySet<tblUserbasedObjectPermission>(new Action<tblUserbasedObjectPermission>(this.attach_tblUserbasedObjectPermissions), new Action<tblUserbasedObjectPermission>(this.detach_tblUserbasedObjectPermissions));
			this._tblApplication = default(EntityRef<tblApplication>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectTypeID", DbType="Int NOT NULL")]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectName", DbType="NVarChar(MAX)")]
		public string ObjectName
		{
			get
			{
				return this._ObjectName;
			}
			set
			{
				if ((this._ObjectName != value))
				{
					this.OnObjectNameChanging(value);
					this.SendPropertyChanging();
					this._ObjectName = value;
					this.SendPropertyChanged("ObjectName");
					this.OnObjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainerClass", DbType="NVarChar(50)")]
		public string ContainerClass
		{
			get
			{
				return this._ContainerClass;
			}
			set
			{
				if ((this._ContainerClass != value))
				{
					this.OnContainerClassChanging(value);
					this.SendPropertyChanging();
					this._ContainerClass = value;
					this.SendPropertyChanged("ContainerClass");
					this.OnContainerClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppID", DbType="Int")]
		public System.Nullable<int> AppID
		{
			get
			{
				return this._AppID;
			}
			set
			{
				if ((this._AppID != value))
				{
					if (this._tblApplication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppIDChanging(value);
					this.SendPropertyChanging();
					this._AppID = value;
					this.SendPropertyChanged("AppID");
					this.OnAppIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblObject_tblRolebasedObjectPermission", Storage="_tblRolebasedObjectPermissions", ThisKey="ObjectID", OtherKey="ObjectID")]
		public EntitySet<tblRolebasedObjectPermission> tblRolebasedObjectPermissions
		{
			get
			{
				return this._tblRolebasedObjectPermissions;
			}
			set
			{
				this._tblRolebasedObjectPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblObject_tblUserbasedObjectPermission", Storage="_tblUserbasedObjectPermissions", ThisKey="ObjectID", OtherKey="ObjectID")]
		public EntitySet<tblUserbasedObjectPermission> tblUserbasedObjectPermissions
		{
			get
			{
				return this._tblUserbasedObjectPermissions;
			}
			set
			{
				this._tblUserbasedObjectPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplication_tblObject", Storage="_tblApplication", ThisKey="AppID", OtherKey="ApplicationID", IsForeignKey=true)]
		public tblApplication tblApplication
		{
			get
			{
				return this._tblApplication.Entity;
			}
			set
			{
				tblApplication previousValue = this._tblApplication.Entity;
				if (((previousValue != value) 
							|| (this._tblApplication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblApplication.Entity = null;
						previousValue.tblObjects.Remove(this);
					}
					this._tblApplication.Entity = value;
					if ((value != null))
					{
						value.tblObjects.Add(this);
						this._AppID = value.ApplicationID;
					}
					else
					{
						this._AppID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblApplication");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblRolebasedObjectPermissions(tblRolebasedObjectPermission entity)
		{
			this.SendPropertyChanging();
			entity.tblObject = this;
		}
		
		private void detach_tblRolebasedObjectPermissions(tblRolebasedObjectPermission entity)
		{
			this.SendPropertyChanging();
			entity.tblObject = null;
		}
		
		private void attach_tblUserbasedObjectPermissions(tblUserbasedObjectPermission entity)
		{
			this.SendPropertyChanging();
			entity.tblObject = this;
		}
		
		private void detach_tblUserbasedObjectPermissions(tblUserbasedObjectPermission entity)
		{
			this.SendPropertyChanging();
			entity.tblObject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblObjectTypes")]
	public partial class tblObjectType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeID;
		
		private string _TypeName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public tblObjectType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(50)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPermissions")]
	public partial class tblPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _PermissionID;
		
		private string _PermissionName;
		
		private EntitySet<tblUserbasedObjectPermission> _tblUserbasedObjectPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionIDChanging(byte value);
    partial void OnPermissionIDChanged();
    partial void OnPermissionNameChanging(string value);
    partial void OnPermissionNameChanged();
    #endregion
		
		public tblPermission()
		{
			this._tblUserbasedObjectPermissions = new EntitySet<tblUserbasedObjectPermission>(new Action<tblUserbasedObjectPermission>(this.attach_tblUserbasedObjectPermissions), new Action<tblUserbasedObjectPermission>(this.detach_tblUserbasedObjectPermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionName", DbType="NVarChar(50)")]
		public string PermissionName
		{
			get
			{
				return this._PermissionName;
			}
			set
			{
				if ((this._PermissionName != value))
				{
					this.OnPermissionNameChanging(value);
					this.SendPropertyChanging();
					this._PermissionName = value;
					this.SendPropertyChanged("PermissionName");
					this.OnPermissionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPermission_tblUserbasedObjectPermission", Storage="_tblUserbasedObjectPermissions", ThisKey="PermissionID", OtherKey="PermissionID")]
		public EntitySet<tblUserbasedObjectPermission> tblUserbasedObjectPermissions
		{
			get
			{
				return this._tblUserbasedObjectPermissions;
			}
			set
			{
				this._tblUserbasedObjectPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblUserbasedObjectPermissions(tblUserbasedObjectPermission entity)
		{
			this.SendPropertyChanging();
			entity.tblPermission = this;
		}
		
		private void detach_tblUserbasedObjectPermissions(tblUserbasedObjectPermission entity)
		{
			this.SendPropertyChanging();
			entity.tblPermission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblRolebasedObjectPermissions")]
	public partial class tblRolebasedObjectPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private int _ObjectID;
		
		private int _AppID;
		
		private byte _PermissionID;
		
		private System.Nullable<int> _CreationUserID;
		
		private string _ModificationDate;
		
		private EntityRef<tblObject> _tblObject;
		
		private EntityRef<tblRole> _tblRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnObjectIDChanging(int value);
    partial void OnObjectIDChanged();
    partial void OnAppIDChanging(int value);
    partial void OnAppIDChanged();
    partial void OnPermissionIDChanging(byte value);
    partial void OnPermissionIDChanged();
    partial void OnCreationUserIDChanging(System.Nullable<int> value);
    partial void OnCreationUserIDChanged();
    partial void OnModificationDateChanging(string value);
    partial void OnModificationDateChanged();
    #endregion
		
		public tblRolebasedObjectPermission()
		{
			this._tblObject = default(EntityRef<tblObject>);
			this._tblRole = default(EntityRef<tblRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._tblRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					if (this._tblObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppID", DbType="Int NOT NULL")]
		public int AppID
		{
			get
			{
				return this._AppID;
			}
			set
			{
				if ((this._AppID != value))
				{
					this.OnAppIDChanging(value);
					this.SendPropertyChanging();
					this._AppID = value;
					this.SendPropertyChanged("AppID");
					this.OnAppIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="TinyInt NOT NULL")]
		public byte PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationUserID", DbType="Int")]
		public System.Nullable<int> CreationUserID
		{
			get
			{
				return this._CreationUserID;
			}
			set
			{
				if ((this._CreationUserID != value))
				{
					this.OnCreationUserIDChanging(value);
					this.SendPropertyChanging();
					this._CreationUserID = value;
					this.SendPropertyChanged("CreationUserID");
					this.OnCreationUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModificationDate", DbType="NChar(10)")]
		public string ModificationDate
		{
			get
			{
				return this._ModificationDate;
			}
			set
			{
				if ((this._ModificationDate != value))
				{
					this.OnModificationDateChanging(value);
					this.SendPropertyChanging();
					this._ModificationDate = value;
					this.SendPropertyChanged("ModificationDate");
					this.OnModificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblObject_tblRolebasedObjectPermission", Storage="_tblObject", ThisKey="ObjectID", OtherKey="ObjectID", IsForeignKey=true)]
		public tblObject tblObject
		{
			get
			{
				return this._tblObject.Entity;
			}
			set
			{
				tblObject previousValue = this._tblObject.Entity;
				if (((previousValue != value) 
							|| (this._tblObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblObject.Entity = null;
						previousValue.tblRolebasedObjectPermissions.Remove(this);
					}
					this._tblObject.Entity = value;
					if ((value != null))
					{
						value.tblRolebasedObjectPermissions.Add(this);
						this._ObjectID = value.ObjectID;
					}
					else
					{
						this._ObjectID = default(int);
					}
					this.SendPropertyChanged("tblObject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblRole_tblRolebasedObjectPermission", Storage="_tblRole", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public tblRole tblRole
		{
			get
			{
				return this._tblRole.Entity;
			}
			set
			{
				tblRole previousValue = this._tblRole.Entity;
				if (((previousValue != value) 
							|| (this._tblRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblRole.Entity = null;
						previousValue.tblRolebasedObjectPermissions.Remove(this);
					}
					this._tblRole.Entity = value;
					if ((value != null))
					{
						value.tblRolebasedObjectPermissions.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("tblRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblRoles")]
	public partial class tblRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _RoleName;
		
		private int _AppID;
		
		private System.Nullable<int> _parent;
		
		private bool _Deleted;
		
		private bool _Lock;
		
		private EntitySet<tblUser> _tblUsers;
		
		private EntitySet<tblRolebasedObjectPermission> _tblRolebasedObjectPermissions;
		
		private EntityRef<tblApplication> _tblApplication;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnAppIDChanging(int value);
    partial void OnAppIDChanged();
    partial void OnparentChanging(System.Nullable<int> value);
    partial void OnparentChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnLockChanging(bool value);
    partial void OnLockChanged();
    #endregion
		
		public tblRole()
		{
			this._tblUsers = new EntitySet<tblUser>(new Action<tblUser>(this.attach_tblUsers), new Action<tblUser>(this.detach_tblUsers));
			this._tblRolebasedObjectPermissions = new EntitySet<tblRolebasedObjectPermission>(new Action<tblRolebasedObjectPermission>(this.attach_tblRolebasedObjectPermissions), new Action<tblRolebasedObjectPermission>(this.detach_tblRolebasedObjectPermissions));
			this._tblApplication = default(EntityRef<tblApplication>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(50)")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppID", DbType="Int NOT NULL")]
		public int AppID
		{
			get
			{
				return this._AppID;
			}
			set
			{
				if ((this._AppID != value))
				{
					if (this._tblApplication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppIDChanging(value);
					this.SendPropertyChanging();
					this._AppID = value;
					this.SendPropertyChanged("AppID");
					this.OnAppIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parent", DbType="Int")]
		public System.Nullable<int> parent
		{
			get
			{
				return this._parent;
			}
			set
			{
				if ((this._parent != value))
				{
					this.OnparentChanging(value);
					this.SendPropertyChanging();
					this._parent = value;
					this.SendPropertyChanged("parent");
					this.OnparentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lock", DbType="Bit NOT NULL")]
		public bool Lock
		{
			get
			{
				return this._Lock;
			}
			set
			{
				if ((this._Lock != value))
				{
					this.OnLockChanging(value);
					this.SendPropertyChanging();
					this._Lock = value;
					this.SendPropertyChanged("Lock");
					this.OnLockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblRole_tblUser", Storage="_tblUsers", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<tblUser> tblUsers
		{
			get
			{
				return this._tblUsers;
			}
			set
			{
				this._tblUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblRole_tblRolebasedObjectPermission", Storage="_tblRolebasedObjectPermissions", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<tblRolebasedObjectPermission> tblRolebasedObjectPermissions
		{
			get
			{
				return this._tblRolebasedObjectPermissions;
			}
			set
			{
				this._tblRolebasedObjectPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplication_tblRole", Storage="_tblApplication", ThisKey="AppID", OtherKey="ApplicationID", IsForeignKey=true)]
		public tblApplication tblApplication
		{
			get
			{
				return this._tblApplication.Entity;
			}
			set
			{
				tblApplication previousValue = this._tblApplication.Entity;
				if (((previousValue != value) 
							|| (this._tblApplication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblApplication.Entity = null;
						previousValue.tblRoles.Remove(this);
					}
					this._tblApplication.Entity = value;
					if ((value != null))
					{
						value.tblRoles.Add(this);
						this._AppID = value.ApplicationID;
					}
					else
					{
						this._AppID = default(int);
					}
					this.SendPropertyChanged("tblApplication");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblUsers(tblUser entity)
		{
			this.SendPropertyChanging();
			entity.tblRole = this;
		}
		
		private void detach_tblUsers(tblUser entity)
		{
			this.SendPropertyChanging();
			entity.tblRole = null;
		}
		
		private void attach_tblRolebasedObjectPermissions(tblRolebasedObjectPermission entity)
		{
			this.SendPropertyChanging();
			entity.tblRole = this;
		}
		
		private void detach_tblRolebasedObjectPermissions(tblRolebasedObjectPermission entity)
		{
			this.SendPropertyChanging();
			entity.tblRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUserAccessibleDepartments")]
	public partial class tblUserAccessibleDepartment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _AppAccessibleID;
		
		private EntityRef<tblApplicationDepartment> _tblApplicationDepartment;
		
		private EntityRef<tblUser> _tblUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnAppAccessibleIDChanging(int value);
    partial void OnAppAccessibleIDChanged();
    #endregion
		
		public tblUserAccessibleDepartment()
		{
			this._tblApplicationDepartment = default(EntityRef<tblApplicationDepartment>);
			this._tblUser = default(EntityRef<tblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppAccessibleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AppAccessibleID
		{
			get
			{
				return this._AppAccessibleID;
			}
			set
			{
				if ((this._AppAccessibleID != value))
				{
					if (this._tblApplicationDepartment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppAccessibleIDChanging(value);
					this.SendPropertyChanging();
					this._AppAccessibleID = value;
					this.SendPropertyChanged("AppAccessibleID");
					this.OnAppAccessibleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplicationDepartment_tblUserAccessibleDepartment", Storage="_tblApplicationDepartment", ThisKey="AppAccessibleID", OtherKey="ID", IsForeignKey=true)]
		public tblApplicationDepartment tblApplicationDepartment
		{
			get
			{
				return this._tblApplicationDepartment.Entity;
			}
			set
			{
				tblApplicationDepartment previousValue = this._tblApplicationDepartment.Entity;
				if (((previousValue != value) 
							|| (this._tblApplicationDepartment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblApplicationDepartment.Entity = null;
						previousValue.tblUserAccessibleDepartments.Remove(this);
					}
					this._tblApplicationDepartment.Entity = value;
					if ((value != null))
					{
						value.tblUserAccessibleDepartments.Add(this);
						this._AppAccessibleID = value.ID;
					}
					else
					{
						this._AppAccessibleID = default(int);
					}
					this.SendPropertyChanged("tblApplicationDepartment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblUserAccessibleDepartment", Storage="_tblUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblUserAccessibleDepartments.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblUserAccessibleDepartments.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUserbasedObjectPermissions")]
	public partial class tblUserbasedObjectPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _ObjectID;
		
		private byte _PermissionID;
		
		private EntityRef<tblObject> _tblObject;
		
		private EntityRef<tblPermission> _tblPermission;
		
		private EntityRef<tblUser> _tblUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnObjectIDChanging(int value);
    partial void OnObjectIDChanged();
    partial void OnPermissionIDChanging(byte value);
    partial void OnPermissionIDChanged();
    #endregion
		
		public tblUserbasedObjectPermission()
		{
			this._tblObject = default(EntityRef<tblObject>);
			this._tblPermission = default(EntityRef<tblPermission>);
			this._tblUser = default(EntityRef<tblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					if (this._tblObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="TinyInt NOT NULL")]
		public byte PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					if (this._tblPermission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblObject_tblUserbasedObjectPermission", Storage="_tblObject", ThisKey="ObjectID", OtherKey="ObjectID", IsForeignKey=true)]
		public tblObject tblObject
		{
			get
			{
				return this._tblObject.Entity;
			}
			set
			{
				tblObject previousValue = this._tblObject.Entity;
				if (((previousValue != value) 
							|| (this._tblObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblObject.Entity = null;
						previousValue.tblUserbasedObjectPermissions.Remove(this);
					}
					this._tblObject.Entity = value;
					if ((value != null))
					{
						value.tblUserbasedObjectPermissions.Add(this);
						this._ObjectID = value.ObjectID;
					}
					else
					{
						this._ObjectID = default(int);
					}
					this.SendPropertyChanged("tblObject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPermission_tblUserbasedObjectPermission", Storage="_tblPermission", ThisKey="PermissionID", OtherKey="PermissionID", IsForeignKey=true)]
		public tblPermission tblPermission
		{
			get
			{
				return this._tblPermission.Entity;
			}
			set
			{
				tblPermission previousValue = this._tblPermission.Entity;
				if (((previousValue != value) 
							|| (this._tblPermission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPermission.Entity = null;
						previousValue.tblUserbasedObjectPermissions.Remove(this);
					}
					this._tblPermission.Entity = value;
					if ((value != null))
					{
						value.tblUserbasedObjectPermissions.Add(this);
						this._PermissionID = value.PermissionID;
					}
					else
					{
						this._PermissionID = default(byte);
					}
					this.SendPropertyChanged("tblPermission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblUserbasedObjectPermission", Storage="_tblUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblUserbasedObjectPermissions.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblUserbasedObjectPermissions.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUserbasedRoles")]
	public partial class tblUserbasedRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _RoleID;
		
		private EntityRef<tblUser> _tblUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    #endregion
		
		public tblUserbasedRole()
		{
			this._tblUser = default(EntityRef<tblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblUserbasedRole", Storage="_tblUser", ThisKey="RoleID", OtherKey="UserID", IsForeignKey=true)]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblUserbasedRoles.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblUserbasedRoles.Add(this);
						this._RoleID = value.UserID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
