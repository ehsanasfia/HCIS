#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HCIS.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HCIS")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAgenda(Agenda instance);
    partial void UpdateAgenda(Agenda instance);
    partial void DeleteAgenda(Agenda instance);
    partial void InsertVisit(Visit instance);
    partial void UpdateVisit(Visit instance);
    partial void DeleteVisit(Visit instance);
    partial void InsertCostsAndIncome(CostsAndIncome instance);
    partial void UpdateCostsAndIncome(CostsAndIncome instance);
    partial void DeleteCostsAndIncome(CostsAndIncome instance);
    partial void InsertCostType(CostType instance);
    partial void UpdateCostType(CostType instance);
    partial void DeleteCostType(CostType instance);
    partial void InsertDefinition(Definition instance);
    partial void UpdateDefinition(Definition instance);
    partial void DeleteDefinition(Definition instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertDiagnosticServiceDetail(DiagnosticServiceDetail instance);
    partial void UpdateDiagnosticServiceDetail(DiagnosticServiceDetail instance);
    partial void DeleteDiagnosticServiceDetail(DiagnosticServiceDetail instance);
    partial void InsertDoctorContract(DoctorContract instance);
    partial void UpdateDoctorContract(DoctorContract instance);
    partial void DeleteDoctorContract(DoctorContract instance);
    partial void InsertDoctorInsurance(DoctorInsurance instance);
    partial void UpdateDoctorInsurance(DoctorInsurance instance);
    partial void DeleteDoctorInsurance(DoctorInsurance instance);
    partial void InsertFavoriteICD10(FavoriteICD10 instance);
    partial void UpdateFavoriteICD10(FavoriteICD10 instance);
    partial void DeleteFavoriteICD10(FavoriteICD10 instance);
    partial void InsertFavoriteService(FavoriteService instance);
    partial void UpdateFavoriteService(FavoriteService instance);
    partial void DeleteFavoriteService(FavoriteService instance);
    partial void InsertGivenDiagnosticServiceD(GivenDiagnosticServiceD instance);
    partial void UpdateGivenDiagnosticServiceD(GivenDiagnosticServiceD instance);
    partial void DeleteGivenDiagnosticServiceD(GivenDiagnosticServiceD instance);
    partial void InsertGivenDiagnosticServiceM(GivenDiagnosticServiceM instance);
    partial void UpdateGivenDiagnosticServiceM(GivenDiagnosticServiceM instance);
    partial void DeleteGivenDiagnosticServiceM(GivenDiagnosticServiceM instance);
    partial void InsertGivenLaboratoryServiceD(GivenLaboratoryServiceD instance);
    partial void UpdateGivenLaboratoryServiceD(GivenLaboratoryServiceD instance);
    partial void DeleteGivenLaboratoryServiceD(GivenLaboratoryServiceD instance);
    partial void InsertGivenServiceD(GivenServiceD instance);
    partial void UpdateGivenServiceD(GivenServiceD instance);
    partial void DeleteGivenServiceD(GivenServiceD instance);
    partial void InsertGivenServiceM(GivenServiceM instance);
    partial void UpdateGivenServiceM(GivenServiceM instance);
    partial void DeleteGivenServiceM(GivenServiceM instance);
    partial void InsertICD10(ICD10 instance);
    partial void UpdateICD10(ICD10 instance);
    partial void DeleteICD10(ICD10 instance);
    partial void InsertInsurance(Insurance instance);
    partial void UpdateInsurance(Insurance instance);
    partial void DeleteInsurance(Insurance instance);
    partial void InsertLaboratoryServiceDetail(LaboratoryServiceDetail instance);
    partial void UpdateLaboratoryServiceDetail(LaboratoryServiceDetail instance);
    partial void DeleteLaboratoryServiceDetail(LaboratoryServiceDetail instance);
    partial void InsertLabTerm(LabTerm instance);
    partial void UpdateLabTerm(LabTerm instance);
    partial void DeleteLabTerm(LabTerm instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertPeriodicCalender(PeriodicCalender instance);
    partial void UpdatePeriodicCalender(PeriodicCalender instance);
    partial void DeletePeriodicCalender(PeriodicCalender instance);
    partial void InsertPhysiotherapyOrderD(PhysiotherapyOrderD instance);
    partial void UpdatePhysiotherapyOrderD(PhysiotherapyOrderD instance);
    partial void DeletePhysiotherapyOrderD(PhysiotherapyOrderD instance);
    partial void InsertPhysiotherapyOrderM(PhysiotherapyOrderM instance);
    partial void UpdatePhysiotherapyOrderM(PhysiotherapyOrderM instance);
    partial void DeletePhysiotherapyOrderM(PhysiotherapyOrderM instance);
    partial void InsertQualitativePoint(QualitativePoint instance);
    partial void UpdateQualitativePoint(QualitativePoint instance);
    partial void DeleteQualitativePoint(QualitativePoint instance);
    partial void InsertReference(Reference instance);
    partial void UpdateReference(Reference instance);
    partial void DeleteReference(Reference instance);
    partial void InsertRVU(RVU instance);
    partial void UpdateRVU(RVU instance);
    partial void DeleteRVU(RVU instance);
    partial void InsertSampleAnswer(SampleAnswer instance);
    partial void UpdateSampleAnswer(SampleAnswer instance);
    partial void DeleteSampleAnswer(SampleAnswer instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertServiceCategory(ServiceCategory instance);
    partial void UpdateServiceCategory(ServiceCategory instance);
    partial void DeleteServiceCategory(ServiceCategory instance);
    partial void InsertSpeciality(Speciality instance);
    partial void UpdateSpeciality(Speciality instance);
    partial void DeleteSpeciality(Speciality instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertTariff(Tariff instance);
    partial void UpdateTariff(Tariff instance);
    partial void DeleteTariff(Tariff instance);
    partial void InsertAdminMessage(AdminMessage instance);
    partial void UpdateAdminMessage(AdminMessage instance);
    partial void DeleteAdminMessage(AdminMessage instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::HCIS.Properties.Settings.Default.HCISConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Agenda> Agendas
		{
			get
			{
				return this.GetTable<Agenda>();
			}
		}
		
		public System.Data.Linq.Table<Visit> Visits
		{
			get
			{
				return this.GetTable<Visit>();
			}
		}
		
		public System.Data.Linq.Table<CostsAndIncome> CostsAndIncomes
		{
			get
			{
				return this.GetTable<CostsAndIncome>();
			}
		}
		
		public System.Data.Linq.Table<CostType> CostTypes
		{
			get
			{
				return this.GetTable<CostType>();
			}
		}
		
		public System.Data.Linq.Table<Definition> Definitions
		{
			get
			{
				return this.GetTable<Definition>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<DiagnosticServiceDetail> DiagnosticServiceDetails
		{
			get
			{
				return this.GetTable<DiagnosticServiceDetail>();
			}
		}
		
		public System.Data.Linq.Table<DoctorContract> DoctorContracts
		{
			get
			{
				return this.GetTable<DoctorContract>();
			}
		}
		
		public System.Data.Linq.Table<DoctorInsurance> DoctorInsurances
		{
			get
			{
				return this.GetTable<DoctorInsurance>();
			}
		}
		
		public System.Data.Linq.Table<FavoriteICD10> FavoriteICD10s
		{
			get
			{
				return this.GetTable<FavoriteICD10>();
			}
		}
		
		public System.Data.Linq.Table<FavoriteService> FavoriteServices
		{
			get
			{
				return this.GetTable<FavoriteService>();
			}
		}
		
		public System.Data.Linq.Table<GivenDiagnosticServiceD> GivenDiagnosticServiceDs
		{
			get
			{
				return this.GetTable<GivenDiagnosticServiceD>();
			}
		}
		
		public System.Data.Linq.Table<GivenDiagnosticServiceM> GivenDiagnosticServiceMs
		{
			get
			{
				return this.GetTable<GivenDiagnosticServiceM>();
			}
		}
		
		public System.Data.Linq.Table<GivenLaboratoryServiceD> GivenLaboratoryServiceDs
		{
			get
			{
				return this.GetTable<GivenLaboratoryServiceD>();
			}
		}
		
		public System.Data.Linq.Table<GivenServiceD> GivenServiceDs
		{
			get
			{
				return this.GetTable<GivenServiceD>();
			}
		}
		
		public System.Data.Linq.Table<GivenServiceM> GivenServiceMs
		{
			get
			{
				return this.GetTable<GivenServiceM>();
			}
		}
		
		public System.Data.Linq.Table<ICD10> ICD10s
		{
			get
			{
				return this.GetTable<ICD10>();
			}
		}
		
		public System.Data.Linq.Table<Insurance> Insurances
		{
			get
			{
				return this.GetTable<Insurance>();
			}
		}
		
		public System.Data.Linq.Table<LaboratoryServiceDetail> LaboratoryServiceDetails
		{
			get
			{
				return this.GetTable<LaboratoryServiceDetail>();
			}
		}
		
		public System.Data.Linq.Table<LabTerm> LabTerms
		{
			get
			{
				return this.GetTable<LabTerm>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<PeriodicCalender> PeriodicCalenders
		{
			get
			{
				return this.GetTable<PeriodicCalender>();
			}
		}
		
		public System.Data.Linq.Table<PhysiotherapyOrderD> PhysiotherapyOrderDs
		{
			get
			{
				return this.GetTable<PhysiotherapyOrderD>();
			}
		}
		
		public System.Data.Linq.Table<PhysiotherapyOrderM> PhysiotherapyOrderMs
		{
			get
			{
				return this.GetTable<PhysiotherapyOrderM>();
			}
		}
		
		public System.Data.Linq.Table<QualitativePoint> QualitativePoints
		{
			get
			{
				return this.GetTable<QualitativePoint>();
			}
		}
		
		public System.Data.Linq.Table<Reference> References
		{
			get
			{
				return this.GetTable<Reference>();
			}
		}
		
		public System.Data.Linq.Table<RVU> RVUs
		{
			get
			{
				return this.GetTable<RVU>();
			}
		}
		
		public System.Data.Linq.Table<SampleAnswer> SampleAnswers
		{
			get
			{
				return this.GetTable<SampleAnswer>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<ServiceCategory> ServiceCategories
		{
			get
			{
				return this.GetTable<ServiceCategory>();
			}
		}
		
		public System.Data.Linq.Table<Speciality> Specialities
		{
			get
			{
				return this.GetTable<Speciality>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<Tariff> Tariffs
		{
			get
			{
				return this.GetTable<Tariff>();
			}
		}
		
		public System.Data.Linq.Table<AdminMessage> AdminMessages
		{
			get
			{
				return this.GetTable<AdminMessage>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Agenda")]
	public partial class Agenda : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _PeriodicCalenderID;
		
		private System.Guid _StaffID;
		
		private int _ShiftID;
		
		private string _Date;
		
		private System.Nullable<int> _Capacity;
		
		private string _BeginTime;
		
		private string _EndTime;
		
		private string _Comment;
		
		private System.Guid _DepartmentID;
		
		private System.Nullable<System.Guid> _ServiceID;
		
		private System.Nullable<bool> _Deleted;
		
		private EntitySet<GivenServiceM> _GivenServiceMs;
		
		private EntityRef<Definition> _Definition;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<PeriodicCalender> _PeriodicCalender;
		
		private EntityRef<Service> _Service;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPeriodicCalenderIDChanging(System.Nullable<System.Guid> value);
    partial void OnPeriodicCalenderIDChanged();
    partial void OnStaffIDChanging(System.Guid value);
    partial void OnStaffIDChanged();
    partial void OnShiftIDChanging(int value);
    partial void OnShiftIDChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnCapacityChanging(System.Nullable<int> value);
    partial void OnCapacityChanged();
    partial void OnBeginTimeChanging(string value);
    partial void OnBeginTimeChanged();
    partial void OnEndTimeChanging(string value);
    partial void OnEndTimeChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnDepartmentIDChanging(System.Guid value);
    partial void OnDepartmentIDChanged();
    partial void OnServiceIDChanging(System.Nullable<System.Guid> value);
    partial void OnServiceIDChanged();
    partial void OnDeletedChanging(System.Nullable<bool> value);
    partial void OnDeletedChanged();
    #endregion
		
		public Agenda()
		{
			this._GivenServiceMs = new EntitySet<GivenServiceM>(new Action<GivenServiceM>(this.attach_GivenServiceMs), new Action<GivenServiceM>(this.detach_GivenServiceMs));
			this._Definition = default(EntityRef<Definition>);
			this._Department = default(EntityRef<Department>);
			this._PeriodicCalender = default(EntityRef<PeriodicCalender>);
			this._Service = default(EntityRef<Service>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodicCalenderID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PeriodicCalenderID
		{
			get
			{
				return this._PeriodicCalenderID;
			}
			set
			{
				if ((this._PeriodicCalenderID != value))
				{
					if (this._PeriodicCalender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPeriodicCalenderIDChanging(value);
					this.SendPropertyChanging();
					this._PeriodicCalenderID = value;
					this.SendPropertyChanged("PeriodicCalenderID");
					this.OnPeriodicCalenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShiftID", DbType="Int NOT NULL")]
		public int ShiftID
		{
			get
			{
				return this._ShiftID;
			}
			set
			{
				if ((this._ShiftID != value))
				{
					if (this._Definition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShiftIDChanging(value);
					this.SendPropertyChanging();
					this._ShiftID = value;
					this.SendPropertyChanged("ShiftID");
					this.OnShiftIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int")]
		public System.Nullable<int> Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginTime", DbType="NChar(5)")]
		public string BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					this.OnBeginTimeChanging(value);
					this.SendPropertyChanging();
					this._BeginTime = value;
					this.SendPropertyChanged("BeginTime");
					this.OnBeginTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="NChar(5)")]
		public string EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(150)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit")]
		public System.Nullable<bool> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Agenda_GivenServiceM", Storage="_GivenServiceMs", ThisKey="ID", OtherKey="AgendaID")]
		public EntitySet<GivenServiceM> GivenServiceMs
		{
			get
			{
				return this._GivenServiceMs;
			}
			set
			{
				this._GivenServiceMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Definition_Agenda", Storage="_Definition", ThisKey="ShiftID", OtherKey="ID", IsForeignKey=true)]
		public Definition Definition
		{
			get
			{
				return this._Definition.Entity;
			}
			set
			{
				Definition previousValue = this._Definition.Entity;
				if (((previousValue != value) 
							|| (this._Definition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Definition.Entity = null;
						previousValue.Agendas.Remove(this);
					}
					this._Definition.Entity = value;
					if ((value != null))
					{
						value.Agendas.Add(this);
						this._ShiftID = value.ID;
					}
					else
					{
						this._ShiftID = default(int);
					}
					this.SendPropertyChanged("Definition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Agenda", Storage="_Department", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Agendas.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Agendas.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(System.Guid);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PeriodicCalender_Agenda", Storage="_PeriodicCalender", ThisKey="PeriodicCalenderID", OtherKey="ID", IsForeignKey=true)]
		public PeriodicCalender PeriodicCalender
		{
			get
			{
				return this._PeriodicCalender.Entity;
			}
			set
			{
				PeriodicCalender previousValue = this._PeriodicCalender.Entity;
				if (((previousValue != value) 
							|| (this._PeriodicCalender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PeriodicCalender.Entity = null;
						previousValue.Agendas.Remove(this);
					}
					this._PeriodicCalender.Entity = value;
					if ((value != null))
					{
						value.Agendas.Add(this);
						this._PeriodicCalenderID = value.ID;
					}
					else
					{
						this._PeriodicCalenderID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PeriodicCalender");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Agenda", Storage="_Service", ThisKey="ServiceID", OtherKey="ID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Agendas.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Agendas.Add(this);
						this._ServiceID = value.ID;
					}
					else
					{
						this._ServiceID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Agenda", Storage="_Staff", ThisKey="StaffID", OtherKey="ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Agendas.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Agendas.Add(this);
						this._StaffID = value.ID;
					}
					else
					{
						this._StaffID = default(System.Guid);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GivenServiceMs(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.Agenda = this;
		}
		
		private void detach_GivenServiceMs(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.Agenda = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Visit")]
	public partial class Visit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Comment;
		
		private string _ChiefComplaint;
		
		private string _Ago;
		
		private System.Nullable<short> _Since;
		
		private string _AccompanyingDocument;
		
		private System.Nullable<bool> _RO;
		
		private System.Nullable<int> _IMP;
		
		private System.Nullable<int> _DDx1;
		
		private System.Nullable<int> _DDx2;
		
		private EntityRef<GivenServiceM> _GivenServiceM;
		
		private EntityRef<ICD10> _ICD10;
		
		private EntityRef<ICD10> _ICD101;
		
		private EntityRef<ICD10> _ICD102;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnChiefComplaintChanging(string value);
    partial void OnChiefComplaintChanged();
    partial void OnAgoChanging(string value);
    partial void OnAgoChanged();
    partial void OnSinceChanging(System.Nullable<short> value);
    partial void OnSinceChanged();
    partial void OnAccompanyingDocumentChanging(string value);
    partial void OnAccompanyingDocumentChanged();
    partial void OnROChanging(System.Nullable<bool> value);
    partial void OnROChanged();
    partial void OnIMPChanging(System.Nullable<int> value);
    partial void OnIMPChanged();
    partial void OnDDx1Changing(System.Nullable<int> value);
    partial void OnDDx1Changed();
    partial void OnDDx2Changing(System.Nullable<int> value);
    partial void OnDDx2Changed();
    #endregion
		
		public Visit()
		{
			this._GivenServiceM = default(EntityRef<GivenServiceM>);
			this._ICD10 = default(EntityRef<ICD10>);
			this._ICD101 = default(EntityRef<ICD10>);
			this._ICD102 = default(EntityRef<ICD10>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._GivenServiceM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChiefComplaint", DbType="NVarChar(100)")]
		public string ChiefComplaint
		{
			get
			{
				return this._ChiefComplaint;
			}
			set
			{
				if ((this._ChiefComplaint != value))
				{
					this.OnChiefComplaintChanging(value);
					this.SendPropertyChanging();
					this._ChiefComplaint = value;
					this.SendPropertyChanged("ChiefComplaint");
					this.OnChiefComplaintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ago", DbType="NVarChar(10)")]
		public string Ago
		{
			get
			{
				return this._Ago;
			}
			set
			{
				if ((this._Ago != value))
				{
					this.OnAgoChanging(value);
					this.SendPropertyChanging();
					this._Ago = value;
					this.SendPropertyChanged("Ago");
					this.OnAgoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Since", DbType="SmallInt")]
		public System.Nullable<short> Since
		{
			get
			{
				return this._Since;
			}
			set
			{
				if ((this._Since != value))
				{
					this.OnSinceChanging(value);
					this.SendPropertyChanging();
					this._Since = value;
					this.SendPropertyChanged("Since");
					this.OnSinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccompanyingDocument", DbType="NVarChar(MAX)")]
		public string AccompanyingDocument
		{
			get
			{
				return this._AccompanyingDocument;
			}
			set
			{
				if ((this._AccompanyingDocument != value))
				{
					this.OnAccompanyingDocumentChanging(value);
					this.SendPropertyChanging();
					this._AccompanyingDocument = value;
					this.SendPropertyChanged("AccompanyingDocument");
					this.OnAccompanyingDocumentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RO", DbType="Bit")]
		public System.Nullable<bool> RO
		{
			get
			{
				return this._RO;
			}
			set
			{
				if ((this._RO != value))
				{
					this.OnROChanging(value);
					this.SendPropertyChanging();
					this._RO = value;
					this.SendPropertyChanged("RO");
					this.OnROChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IMP", DbType="Int")]
		public System.Nullable<int> IMP
		{
			get
			{
				return this._IMP;
			}
			set
			{
				if ((this._IMP != value))
				{
					if (this._ICD10.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIMPChanging(value);
					this.SendPropertyChanging();
					this._IMP = value;
					this.SendPropertyChanged("IMP");
					this.OnIMPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DDx1", DbType="Int")]
		public System.Nullable<int> DDx1
		{
			get
			{
				return this._DDx1;
			}
			set
			{
				if ((this._DDx1 != value))
				{
					if (this._ICD101.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDDx1Changing(value);
					this.SendPropertyChanging();
					this._DDx1 = value;
					this.SendPropertyChanged("DDx1");
					this.OnDDx1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DDx2", DbType="Int")]
		public System.Nullable<int> DDx2
		{
			get
			{
				return this._DDx2;
			}
			set
			{
				if ((this._DDx2 != value))
				{
					if (this._ICD102.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDDx2Changing(value);
					this.SendPropertyChanging();
					this._DDx2 = value;
					this.SendPropertyChanged("DDx2");
					this.OnDDx2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GivenServiceM_Visit", Storage="_GivenServiceM", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public GivenServiceM GivenServiceM
		{
			get
			{
				return this._GivenServiceM.Entity;
			}
			set
			{
				GivenServiceM previousValue = this._GivenServiceM.Entity;
				if (((previousValue != value) 
							|| (this._GivenServiceM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GivenServiceM.Entity = null;
						previousValue.Visit = null;
					}
					this._GivenServiceM.Entity = value;
					if ((value != null))
					{
						value.Visit = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(System.Guid);
					}
					this.SendPropertyChanged("GivenServiceM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ICD10_Visit", Storage="_ICD10", ThisKey="IMP", OtherKey="ID", IsForeignKey=true)]
		public ICD10 ICD10
		{
			get
			{
				return this._ICD10.Entity;
			}
			set
			{
				ICD10 previousValue = this._ICD10.Entity;
				if (((previousValue != value) 
							|| (this._ICD10.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ICD10.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._ICD10.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._IMP = value.ID;
					}
					else
					{
						this._IMP = default(Nullable<int>);
					}
					this.SendPropertyChanged("ICD10");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ICD10_Visit1", Storage="_ICD101", ThisKey="DDx1", OtherKey="ID", IsForeignKey=true)]
		public ICD10 ICD101
		{
			get
			{
				return this._ICD101.Entity;
			}
			set
			{
				ICD10 previousValue = this._ICD101.Entity;
				if (((previousValue != value) 
							|| (this._ICD101.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ICD101.Entity = null;
						previousValue.Visits1.Remove(this);
					}
					this._ICD101.Entity = value;
					if ((value != null))
					{
						value.Visits1.Add(this);
						this._DDx1 = value.ID;
					}
					else
					{
						this._DDx1 = default(Nullable<int>);
					}
					this.SendPropertyChanged("ICD101");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ICD10_Visit2", Storage="_ICD102", ThisKey="DDx2", OtherKey="ID", IsForeignKey=true)]
		public ICD10 ICD102
		{
			get
			{
				return this._ICD102.Entity;
			}
			set
			{
				ICD10 previousValue = this._ICD102.Entity;
				if (((previousValue != value) 
							|| (this._ICD102.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ICD102.Entity = null;
						previousValue.Visits2.Remove(this);
					}
					this._ICD102.Entity = value;
					if ((value != null))
					{
						value.Visits2.Add(this);
						this._DDx2 = value.ID;
					}
					else
					{
						this._DDx2 = default(Nullable<int>);
					}
					this.SendPropertyChanged("ICD102");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CostsAndIncome")]
	public partial class CostsAndIncome : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _CostTypeID;
		
		private string _Date;
		
		private string _Time;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<int> _DocumentNumber;
		
		private System.Nullable<bool> _Income;
		
		private string _Comment;
		
		private System.Nullable<int> _CreatorUserID;
		
		private string _CreationDate;
		
		private string _CreationTime;
		
		private System.Nullable<int> _LastModificator;
		
		private string _LastModificationDate;
		
		private string _LastModificationTime;
		
		private EntityRef<CostType> _CostType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCostTypeIDChanging(System.Guid value);
    partial void OnCostTypeIDChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnDocumentNumberChanging(System.Nullable<int> value);
    partial void OnDocumentNumberChanged();
    partial void OnIncomeChanging(System.Nullable<bool> value);
    partial void OnIncomeChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnCreatorUserIDChanging(System.Nullable<int> value);
    partial void OnCreatorUserIDChanged();
    partial void OnCreationDateChanging(string value);
    partial void OnCreationDateChanged();
    partial void OnCreationTimeChanging(string value);
    partial void OnCreationTimeChanged();
    partial void OnLastModificatorChanging(System.Nullable<int> value);
    partial void OnLastModificatorChanged();
    partial void OnLastModificationDateChanging(string value);
    partial void OnLastModificationDateChanged();
    partial void OnLastModificationTimeChanging(string value);
    partial void OnLastModificationTimeChanged();
    #endregion
		
		public CostsAndIncome()
		{
			this._CostType = default(EntityRef<CostType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostTypeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CostTypeID
		{
			get
			{
				return this._CostTypeID;
			}
			set
			{
				if ((this._CostTypeID != value))
				{
					if (this._CostType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CostTypeID = value;
					this.SendPropertyChanged("CostTypeID");
					this.OnCostTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NVarChar(10)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="NVarChar(8)")]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentNumber", DbType="Int")]
		public System.Nullable<int> DocumentNumber
		{
			get
			{
				return this._DocumentNumber;
			}
			set
			{
				if ((this._DocumentNumber != value))
				{
					this.OnDocumentNumberChanging(value);
					this.SendPropertyChanging();
					this._DocumentNumber = value;
					this.SendPropertyChanged("DocumentNumber");
					this.OnDocumentNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Income", DbType="Bit")]
		public System.Nullable<bool> Income
		{
			get
			{
				return this._Income;
			}
			set
			{
				if ((this._Income != value))
				{
					this.OnIncomeChanging(value);
					this.SendPropertyChanging();
					this._Income = value;
					this.SendPropertyChanged("Income");
					this.OnIncomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorUserID", DbType="Int")]
		public System.Nullable<int> CreatorUserID
		{
			get
			{
				return this._CreatorUserID;
			}
			set
			{
				if ((this._CreatorUserID != value))
				{
					this.OnCreatorUserIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorUserID = value;
					this.SendPropertyChanged("CreatorUserID");
					this.OnCreatorUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="NVarChar(10)")]
		public string CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="NVarChar(8)")]
		public string CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificator", DbType="Int")]
		public System.Nullable<int> LastModificator
		{
			get
			{
				return this._LastModificator;
			}
			set
			{
				if ((this._LastModificator != value))
				{
					this.OnLastModificatorChanging(value);
					this.SendPropertyChanging();
					this._LastModificator = value;
					this.SendPropertyChanged("LastModificator");
					this.OnLastModificatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificationDate", DbType="NVarChar(10)")]
		public string LastModificationDate
		{
			get
			{
				return this._LastModificationDate;
			}
			set
			{
				if ((this._LastModificationDate != value))
				{
					this.OnLastModificationDateChanging(value);
					this.SendPropertyChanging();
					this._LastModificationDate = value;
					this.SendPropertyChanged("LastModificationDate");
					this.OnLastModificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificationTime", DbType="NVarChar(8)")]
		public string LastModificationTime
		{
			get
			{
				return this._LastModificationTime;
			}
			set
			{
				if ((this._LastModificationTime != value))
				{
					this.OnLastModificationTimeChanging(value);
					this.SendPropertyChanging();
					this._LastModificationTime = value;
					this.SendPropertyChanged("LastModificationTime");
					this.OnLastModificationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostType_CostsAndIncome", Storage="_CostType", ThisKey="CostTypeID", OtherKey="ID", IsForeignKey=true)]
		public CostType CostType
		{
			get
			{
				return this._CostType.Entity;
			}
			set
			{
				CostType previousValue = this._CostType.Entity;
				if (((previousValue != value) 
							|| (this._CostType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostType.Entity = null;
						previousValue.CostsAndIncomes.Remove(this);
					}
					this._CostType.Entity = value;
					if ((value != null))
					{
						value.CostsAndIncomes.Add(this);
						this._CostTypeID = value.ID;
					}
					else
					{
						this._CostTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("CostType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CostType")]
	public partial class CostType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _ParentID;
		
		private string _Name;
		
		private System.Nullable<bool> _Income;
		
		private EntitySet<CostsAndIncome> _CostsAndIncomes;
		
		private EntitySet<CostType> _CostTypes;
		
		private EntityRef<CostType> _CostType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnParentIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIncomeChanging(System.Nullable<bool> value);
    partial void OnIncomeChanged();
    #endregion
		
		public CostType()
		{
			this._CostsAndIncomes = new EntitySet<CostsAndIncome>(new Action<CostsAndIncome>(this.attach_CostsAndIncomes), new Action<CostsAndIncome>(this.detach_CostsAndIncomes));
			this._CostTypes = new EntitySet<CostType>(new Action<CostType>(this.attach_CostTypes), new Action<CostType>(this.detach_CostTypes));
			this._CostType1 = default(EntityRef<CostType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._CostType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Income", DbType="Bit")]
		public System.Nullable<bool> Income
		{
			get
			{
				return this._Income;
			}
			set
			{
				if ((this._Income != value))
				{
					this.OnIncomeChanging(value);
					this.SendPropertyChanging();
					this._Income = value;
					this.SendPropertyChanged("Income");
					this.OnIncomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostType_CostsAndIncome", Storage="_CostsAndIncomes", ThisKey="ID", OtherKey="CostTypeID")]
		public EntitySet<CostsAndIncome> CostsAndIncomes
		{
			get
			{
				return this._CostsAndIncomes;
			}
			set
			{
				this._CostsAndIncomes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostType_CostType", Storage="_CostTypes", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<CostType> CostTypes
		{
			get
			{
				return this._CostTypes;
			}
			set
			{
				this._CostTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostType_CostType", Storage="_CostType1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public CostType CostType1
		{
			get
			{
				return this._CostType1.Entity;
			}
			set
			{
				CostType previousValue = this._CostType1.Entity;
				if (((previousValue != value) 
							|| (this._CostType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostType1.Entity = null;
						previousValue.CostTypes.Remove(this);
					}
					this._CostType1.Entity = value;
					if ((value != null))
					{
						value.CostTypes.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("CostType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CostsAndIncomes(CostsAndIncome entity)
		{
			this.SendPropertyChanging();
			entity.CostType = this;
		}
		
		private void detach_CostsAndIncomes(CostsAndIncome entity)
		{
			this.SendPropertyChanging();
			entity.CostType = null;
		}
		
		private void attach_CostTypes(CostType entity)
		{
			this.SendPropertyChanging();
			entity.CostType1 = this;
		}
		
		private void detach_CostTypes(CostType entity)
		{
			this.SendPropertyChanging();
			entity.CostType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Definition")]
	public partial class Definition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Parent;
		
		private string _Name;
		
		private EntitySet<Agenda> _Agendas;
		
		private EntitySet<Definition> _Definitions;
		
		private EntitySet<GivenServiceM> _GivenServiceMs;
		
		private EntitySet<PeriodicCalender> _PeriodicCalenders;
		
		private EntityRef<Definition> _Definition1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnParentChanging(System.Nullable<int> value);
    partial void OnParentChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Definition()
		{
			this._Agendas = new EntitySet<Agenda>(new Action<Agenda>(this.attach_Agendas), new Action<Agenda>(this.detach_Agendas));
			this._Definitions = new EntitySet<Definition>(new Action<Definition>(this.attach_Definitions), new Action<Definition>(this.detach_Definitions));
			this._GivenServiceMs = new EntitySet<GivenServiceM>(new Action<GivenServiceM>(this.attach_GivenServiceMs), new Action<GivenServiceM>(this.detach_GivenServiceMs));
			this._PeriodicCalenders = new EntitySet<PeriodicCalender>(new Action<PeriodicCalender>(this.attach_PeriodicCalenders), new Action<PeriodicCalender>(this.detach_PeriodicCalenders));
			this._Definition1 = default(EntityRef<Definition>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parent", DbType="Int")]
		public System.Nullable<int> Parent
		{
			get
			{
				return this._Parent;
			}
			set
			{
				if ((this._Parent != value))
				{
					if (this._Definition1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentChanging(value);
					this.SendPropertyChanging();
					this._Parent = value;
					this.SendPropertyChanged("Parent");
					this.OnParentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Definition_Agenda", Storage="_Agendas", ThisKey="ID", OtherKey="ShiftID")]
		public EntitySet<Agenda> Agendas
		{
			get
			{
				return this._Agendas;
			}
			set
			{
				this._Agendas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Definition_Definition", Storage="_Definitions", ThisKey="ID", OtherKey="Parent")]
		public EntitySet<Definition> Definitions
		{
			get
			{
				return this._Definitions;
			}
			set
			{
				this._Definitions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Definition_GivenServiceM", Storage="_GivenServiceMs", ThisKey="ID", OtherKey="ShiftID")]
		public EntitySet<GivenServiceM> GivenServiceMs
		{
			get
			{
				return this._GivenServiceMs;
			}
			set
			{
				this._GivenServiceMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Definition_PeriodicCalender", Storage="_PeriodicCalenders", ThisKey="ID", OtherKey="ShiftID")]
		public EntitySet<PeriodicCalender> PeriodicCalenders
		{
			get
			{
				return this._PeriodicCalenders;
			}
			set
			{
				this._PeriodicCalenders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Definition_Definition", Storage="_Definition1", ThisKey="Parent", OtherKey="ID", IsForeignKey=true)]
		public Definition Definition1
		{
			get
			{
				return this._Definition1.Entity;
			}
			set
			{
				Definition previousValue = this._Definition1.Entity;
				if (((previousValue != value) 
							|| (this._Definition1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Definition1.Entity = null;
						previousValue.Definitions.Remove(this);
					}
					this._Definition1.Entity = value;
					if ((value != null))
					{
						value.Definitions.Add(this);
						this._Parent = value.ID;
					}
					else
					{
						this._Parent = default(Nullable<int>);
					}
					this.SendPropertyChanged("Definition1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Agendas(Agenda entity)
		{
			this.SendPropertyChanging();
			entity.Definition = this;
		}
		
		private void detach_Agendas(Agenda entity)
		{
			this.SendPropertyChanging();
			entity.Definition = null;
		}
		
		private void attach_Definitions(Definition entity)
		{
			this.SendPropertyChanging();
			entity.Definition1 = this;
		}
		
		private void detach_Definitions(Definition entity)
		{
			this.SendPropertyChanging();
			entity.Definition1 = null;
		}
		
		private void attach_GivenServiceMs(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.Definition = this;
		}
		
		private void detach_GivenServiceMs(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.Definition = null;
		}
		
		private void attach_PeriodicCalenders(PeriodicCalender entity)
		{
			this.SendPropertyChanging();
			entity.Definition = this;
		}
		
		private void detach_PeriodicCalenders(PeriodicCalender entity)
		{
			this.SendPropertyChanging();
			entity.Definition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Location;
		
		private string _TypeName;
		
		private EntitySet<Agenda> _Agendas;
		
		private EntitySet<Person> _Persons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public Department()
		{
			this._Agendas = new EntitySet<Agenda>(new Action<Agenda>(this.attach_Agendas), new Action<Agenda>(this.detach_Agendas));
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(100)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(50)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Agenda", Storage="_Agendas", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<Agenda> Agendas
		{
			get
			{
				return this._Agendas;
			}
			set
			{
				this._Agendas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Person", Storage="_Persons", ThisKey="ID", OtherKey="FDDepartment")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Agendas(Agenda entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Agendas(Agenda entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DiagnosticServiceDetail")]
	public partial class DiagnosticServiceDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<int> _Code;
		
		private string _Description;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCodeChanging(System.Nullable<int> value);
    partial void OnCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DiagnosticServiceDetail()
		{
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int")]
		public System.Nullable<int> Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_DiagnosticServiceDetail", Storage="_Service", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.DiagnosticServiceDetail = null;
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.DiagnosticServiceDetail = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(System.Guid);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DoctorContract")]
	public partial class DoctorContract : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _ServiceID;
		
		private System.Nullable<System.Guid> _StaffID;
		
		private System.Nullable<decimal> _Payment;
		
		private string _Date;
		
		private string _Time;
		
		private System.Nullable<int> _CreatorUserID;
		
		private string _CreationDate;
		
		private string _CreationTime;
		
		private EntityRef<Service> _Service;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnServiceIDChanging(System.Nullable<System.Guid> value);
    partial void OnServiceIDChanged();
    partial void OnStaffIDChanging(System.Nullable<System.Guid> value);
    partial void OnStaffIDChanged();
    partial void OnPaymentChanging(System.Nullable<decimal> value);
    partial void OnPaymentChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    partial void OnCreatorUserIDChanging(System.Nullable<int> value);
    partial void OnCreatorUserIDChanged();
    partial void OnCreationDateChanging(string value);
    partial void OnCreationDateChanged();
    partial void OnCreationTimeChanging(string value);
    partial void OnCreationTimeChanged();
    #endregion
		
		public DoctorContract()
		{
			this._Service = default(EntityRef<Service>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment", DbType="Money")]
		public System.Nullable<decimal> Payment
		{
			get
			{
				return this._Payment;
			}
			set
			{
				if ((this._Payment != value))
				{
					this.OnPaymentChanging(value);
					this.SendPropertyChanging();
					this._Payment = value;
					this.SendPropertyChanged("Payment");
					this.OnPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NVarChar(10)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="NVarChar(8)")]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorUserID", DbType="Int")]
		public System.Nullable<int> CreatorUserID
		{
			get
			{
				return this._CreatorUserID;
			}
			set
			{
				if ((this._CreatorUserID != value))
				{
					this.OnCreatorUserIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorUserID = value;
					this.SendPropertyChanged("CreatorUserID");
					this.OnCreatorUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="NVarChar(12)")]
		public string CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="NVarChar(8)")]
		public string CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_DoctorContract", Storage="_Service", ThisKey="ServiceID", OtherKey="ID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.DoctorContracts.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.DoctorContracts.Add(this);
						this._ServiceID = value.ID;
					}
					else
					{
						this._ServiceID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_DoctorContract", Storage="_Staff", ThisKey="StaffID", OtherKey="ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.DoctorContracts.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.DoctorContracts.Add(this);
						this._StaffID = value.ID;
					}
					else
					{
						this._StaffID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DoctorInsurance")]
	public partial class DoctorInsurance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _InsuranceID;
		
		private System.Nullable<System.Guid> _StaffID;
		
		private EntityRef<Insurance> _Insurance;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInsuranceIDChanging(System.Nullable<int> value);
    partial void OnInsuranceIDChanged();
    partial void OnStaffIDChanging(System.Nullable<System.Guid> value);
    partial void OnStaffIDChanged();
    #endregion
		
		public DoctorInsurance()
		{
			this._Insurance = default(EntityRef<Insurance>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceID", DbType="Int")]
		public System.Nullable<int> InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					if (this._Insurance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Insurance_DoctorInsurance", Storage="_Insurance", ThisKey="InsuranceID", OtherKey="ID", IsForeignKey=true)]
		public Insurance Insurance
		{
			get
			{
				return this._Insurance.Entity;
			}
			set
			{
				Insurance previousValue = this._Insurance.Entity;
				if (((previousValue != value) 
							|| (this._Insurance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Insurance.Entity = null;
						previousValue.DoctorInsurances.Remove(this);
					}
					this._Insurance.Entity = value;
					if ((value != null))
					{
						value.DoctorInsurances.Add(this);
						this._InsuranceID = value.ID;
					}
					else
					{
						this._InsuranceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Insurance");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_DoctorInsurance", Storage="_Staff", ThisKey="StaffID", OtherKey="ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.DoctorInsurances.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.DoctorInsurances.Add(this);
						this._StaffID = value.ID;
					}
					else
					{
						this._StaffID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FavoriteICD10")]
	public partial class FavoriteICD10 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<int> _ICD10ID;
		
		private System.Nullable<System.Guid> _StaffID;
		
		private EntityRef<ICD10> _ICD10;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnICD10IDChanging(System.Nullable<int> value);
    partial void OnICD10IDChanged();
    partial void OnStaffIDChanging(System.Nullable<System.Guid> value);
    partial void OnStaffIDChanged();
    #endregion
		
		public FavoriteICD10()
		{
			this._ICD10 = default(EntityRef<ICD10>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICD10ID", DbType="Int")]
		public System.Nullable<int> ICD10ID
		{
			get
			{
				return this._ICD10ID;
			}
			set
			{
				if ((this._ICD10ID != value))
				{
					if (this._ICD10.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnICD10IDChanging(value);
					this.SendPropertyChanging();
					this._ICD10ID = value;
					this.SendPropertyChanged("ICD10ID");
					this.OnICD10IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ICD10_FavoriteICD10", Storage="_ICD10", ThisKey="ICD10ID", OtherKey="ID", IsForeignKey=true)]
		public ICD10 ICD10
		{
			get
			{
				return this._ICD10.Entity;
			}
			set
			{
				ICD10 previousValue = this._ICD10.Entity;
				if (((previousValue != value) 
							|| (this._ICD10.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ICD10.Entity = null;
						previousValue.FavoriteICD10s.Remove(this);
					}
					this._ICD10.Entity = value;
					if ((value != null))
					{
						value.FavoriteICD10s.Add(this);
						this._ICD10ID = value.ID;
					}
					else
					{
						this._ICD10ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ICD10");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_FavoriteICD10", Storage="_Staff", ThisKey="StaffID", OtherKey="ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.FavoriteICD10s.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.FavoriteICD10s.Add(this);
						this._StaffID = value.ID;
					}
					else
					{
						this._StaffID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FavoriteService")]
	public partial class FavoriteService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _StaffID;
		
		private System.Nullable<System.Guid> _ServiceID;
		
		private EntityRef<Service> _Service;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnStaffIDChanging(System.Nullable<System.Guid> value);
    partial void OnStaffIDChanged();
    partial void OnServiceIDChanging(System.Nullable<System.Guid> value);
    partial void OnServiceIDChanged();
    #endregion
		
		public FavoriteService()
		{
			this._Service = default(EntityRef<Service>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_FavoriteService", Storage="_Service", ThisKey="ServiceID", OtherKey="ID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.FavoriteServices.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.FavoriteServices.Add(this);
						this._ServiceID = value.ID;
					}
					else
					{
						this._ServiceID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_FavoriteService", Storage="_Staff", ThisKey="StaffID", OtherKey="ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.FavoriteServices.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.FavoriteServices.Add(this);
						this._StaffID = value.ID;
					}
					else
					{
						this._StaffID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GivenDiagnosticServiceD")]
	public partial class GivenDiagnosticServiceD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Position;
		
		private EntityRef<GivenServiceD> _GivenServiceD;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    #endregion
		
		public GivenDiagnosticServiceD()
		{
			this._GivenServiceD = default(EntityRef<GivenServiceD>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._GivenServiceD.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(100)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GivenServiceD_GivenDiagnosticServiceD", Storage="_GivenServiceD", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public GivenServiceD GivenServiceD
		{
			get
			{
				return this._GivenServiceD.Entity;
			}
			set
			{
				GivenServiceD previousValue = this._GivenServiceD.Entity;
				if (((previousValue != value) 
							|| (this._GivenServiceD.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GivenServiceD.Entity = null;
						previousValue.GivenDiagnosticServiceD = null;
					}
					this._GivenServiceD.Entity = value;
					if ((value != null))
					{
						value.GivenDiagnosticServiceD = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(System.Guid);
					}
					this.SendPropertyChanged("GivenServiceD");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GivenDiagnosticServiceM")]
	public partial class GivenDiagnosticServiceM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Result;
		
		private System.Nullable<int> _TechnecianID;
		
		private string _AnsweringDate;
		
		private string _AnswerTime;
		
		private EntityRef<GivenServiceM> _GivenServiceM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnTechnecianIDChanging(System.Nullable<int> value);
    partial void OnTechnecianIDChanged();
    partial void OnAnsweringDateChanging(string value);
    partial void OnAnsweringDateChanged();
    partial void OnAnswerTimeChanging(string value);
    partial void OnAnswerTimeChanged();
    #endregion
		
		public GivenDiagnosticServiceM()
		{
			this._GivenServiceM = default(EntityRef<GivenServiceM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._GivenServiceM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="NVarChar(MAX)")]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnecianID", DbType="Int")]
		public System.Nullable<int> TechnecianID
		{
			get
			{
				return this._TechnecianID;
			}
			set
			{
				if ((this._TechnecianID != value))
				{
					this.OnTechnecianIDChanging(value);
					this.SendPropertyChanging();
					this._TechnecianID = value;
					this.SendPropertyChanged("TechnecianID");
					this.OnTechnecianIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnsweringDate", DbType="NVarChar(10)")]
		public string AnsweringDate
		{
			get
			{
				return this._AnsweringDate;
			}
			set
			{
				if ((this._AnsweringDate != value))
				{
					this.OnAnsweringDateChanging(value);
					this.SendPropertyChanging();
					this._AnsweringDate = value;
					this.SendPropertyChanged("AnsweringDate");
					this.OnAnsweringDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerTime", DbType="NVarChar(8)")]
		public string AnswerTime
		{
			get
			{
				return this._AnswerTime;
			}
			set
			{
				if ((this._AnswerTime != value))
				{
					this.OnAnswerTimeChanging(value);
					this.SendPropertyChanging();
					this._AnswerTime = value;
					this.SendPropertyChanged("AnswerTime");
					this.OnAnswerTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GivenServiceM_GivenDiagnosticServiceM", Storage="_GivenServiceM", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public GivenServiceM GivenServiceM
		{
			get
			{
				return this._GivenServiceM.Entity;
			}
			set
			{
				GivenServiceM previousValue = this._GivenServiceM.Entity;
				if (((previousValue != value) 
							|| (this._GivenServiceM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GivenServiceM.Entity = null;
						previousValue.GivenDiagnosticServiceM = null;
					}
					this._GivenServiceM.Entity = value;
					if ((value != null))
					{
						value.GivenDiagnosticServiceM = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(System.Guid);
					}
					this.SendPropertyChanged("GivenServiceM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GivenLaboratoryServiceD")]
	public partial class GivenLaboratoryServiceD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Result;
		
		private string _NormalRange;
		
		private bool _GetSampel;
		
		private int _SampelCounter;
		
		private EntityRef<GivenServiceD> _GivenServiceD;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnNormalRangeChanging(string value);
    partial void OnNormalRangeChanged();
    partial void OnGetSampelChanging(bool value);
    partial void OnGetSampelChanged();
    partial void OnSampelCounterChanging(int value);
    partial void OnSampelCounterChanged();
    #endregion
		
		public GivenLaboratoryServiceD()
		{
			this._GivenServiceD = default(EntityRef<GivenServiceD>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._GivenServiceD.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="NVarChar(100)")]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NormalRange", DbType="NVarChar(300)")]
		public string NormalRange
		{
			get
			{
				return this._NormalRange;
			}
			set
			{
				if ((this._NormalRange != value))
				{
					this.OnNormalRangeChanging(value);
					this.SendPropertyChanging();
					this._NormalRange = value;
					this.SendPropertyChanged("NormalRange");
					this.OnNormalRangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GetSampel", DbType="Bit NOT NULL")]
		public bool GetSampel
		{
			get
			{
				return this._GetSampel;
			}
			set
			{
				if ((this._GetSampel != value))
				{
					this.OnGetSampelChanging(value);
					this.SendPropertyChanging();
					this._GetSampel = value;
					this.SendPropertyChanged("GetSampel");
					this.OnGetSampelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampelCounter", DbType="Int NOT NULL")]
		public int SampelCounter
		{
			get
			{
				return this._SampelCounter;
			}
			set
			{
				if ((this._SampelCounter != value))
				{
					this.OnSampelCounterChanging(value);
					this.SendPropertyChanging();
					this._SampelCounter = value;
					this.SendPropertyChanged("SampelCounter");
					this.OnSampelCounterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GivenServiceD_GivenLaboratoryServiceD", Storage="_GivenServiceD", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public GivenServiceD GivenServiceD
		{
			get
			{
				return this._GivenServiceD.Entity;
			}
			set
			{
				GivenServiceD previousValue = this._GivenServiceD.Entity;
				if (((previousValue != value) 
							|| (this._GivenServiceD.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GivenServiceD.Entity = null;
						previousValue.GivenLaboratoryServiceD = null;
					}
					this._GivenServiceD.Entity = value;
					if ((value != null))
					{
						value.GivenLaboratoryServiceD = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(System.Guid);
					}
					this.SendPropertyChanged("GivenServiceD");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GivenServiceD")]
	public partial class GivenServiceD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _GivenServiceMID;
		
		private System.Nullable<System.Guid> _ServiceID;
		
		private double _Amount;
		
		private System.Nullable<System.Guid> _TariffID;
		
		private decimal _TotalPrice;
		
		private decimal _PatientShare;
		
		private decimal _InsuranceShare;
		
		private decimal _PayedPrice;
		
		private bool _Payed;
		
		private decimal _PaymentPrice;
		
		private System.Nullable<System.Guid> _FunctorID;
		
		private bool _Confirm;
		
		private string _Comment;
		
		private System.Nullable<int> _LastModificator;
		
		private string _LastModificationDate;
		
		private string _LastModificationTime;
		
		private EntityRef<GivenDiagnosticServiceD> _GivenDiagnosticServiceD;
		
		private EntityRef<GivenLaboratoryServiceD> _GivenLaboratoryServiceD;
		
		private EntityRef<GivenServiceM> _GivenServiceM;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnGivenServiceMIDChanging(System.Nullable<System.Guid> value);
    partial void OnGivenServiceMIDChanged();
    partial void OnServiceIDChanging(System.Nullable<System.Guid> value);
    partial void OnServiceIDChanged();
    partial void OnAmountChanging(double value);
    partial void OnAmountChanged();
    partial void OnTariffIDChanging(System.Nullable<System.Guid> value);
    partial void OnTariffIDChanged();
    partial void OnTotalPriceChanging(decimal value);
    partial void OnTotalPriceChanged();
    partial void OnPatientShareChanging(decimal value);
    partial void OnPatientShareChanged();
    partial void OnInsuranceShareChanging(decimal value);
    partial void OnInsuranceShareChanged();
    partial void OnPayedPriceChanging(decimal value);
    partial void OnPayedPriceChanged();
    partial void OnPayedChanging(bool value);
    partial void OnPayedChanged();
    partial void OnPaymentPriceChanging(decimal value);
    partial void OnPaymentPriceChanged();
    partial void OnFunctorIDChanging(System.Nullable<System.Guid> value);
    partial void OnFunctorIDChanged();
    partial void OnConfirmChanging(bool value);
    partial void OnConfirmChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnLastModificatorChanging(System.Nullable<int> value);
    partial void OnLastModificatorChanged();
    partial void OnLastModificationDateChanging(string value);
    partial void OnLastModificationDateChanged();
    partial void OnLastModificationTimeChanging(string value);
    partial void OnLastModificationTimeChanged();
    #endregion
		
		public GivenServiceD()
		{
			this._GivenDiagnosticServiceD = default(EntityRef<GivenDiagnosticServiceD>);
			this._GivenLaboratoryServiceD = default(EntityRef<GivenLaboratoryServiceD>);
			this._GivenServiceM = default(EntityRef<GivenServiceM>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GivenServiceMID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> GivenServiceMID
		{
			get
			{
				return this._GivenServiceMID;
			}
			set
			{
				if ((this._GivenServiceMID != value))
				{
					if (this._GivenServiceM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGivenServiceMIDChanging(value);
					this.SendPropertyChanging();
					this._GivenServiceMID = value;
					this.SendPropertyChanged("GivenServiceMID");
					this.OnGivenServiceMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float NOT NULL")]
		public double Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TariffID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TariffID
		{
			get
			{
				return this._TariffID;
			}
			set
			{
				if ((this._TariffID != value))
				{
					this.OnTariffIDChanging(value);
					this.SendPropertyChanging();
					this._TariffID = value;
					this.SendPropertyChanged("TariffID");
					this.OnTariffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Money NOT NULL")]
		public decimal TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientShare", DbType="Money NOT NULL")]
		public decimal PatientShare
		{
			get
			{
				return this._PatientShare;
			}
			set
			{
				if ((this._PatientShare != value))
				{
					this.OnPatientShareChanging(value);
					this.SendPropertyChanging();
					this._PatientShare = value;
					this.SendPropertyChanged("PatientShare");
					this.OnPatientShareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceShare", DbType="Money NOT NULL")]
		public decimal InsuranceShare
		{
			get
			{
				return this._InsuranceShare;
			}
			set
			{
				if ((this._InsuranceShare != value))
				{
					this.OnInsuranceShareChanging(value);
					this.SendPropertyChanging();
					this._InsuranceShare = value;
					this.SendPropertyChanged("InsuranceShare");
					this.OnInsuranceShareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayedPrice", DbType="Money NOT NULL")]
		public decimal PayedPrice
		{
			get
			{
				return this._PayedPrice;
			}
			set
			{
				if ((this._PayedPrice != value))
				{
					this.OnPayedPriceChanging(value);
					this.SendPropertyChanging();
					this._PayedPrice = value;
					this.SendPropertyChanged("PayedPrice");
					this.OnPayedPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payed", DbType="Bit NOT NULL")]
		public bool Payed
		{
			get
			{
				return this._Payed;
			}
			set
			{
				if ((this._Payed != value))
				{
					this.OnPayedChanging(value);
					this.SendPropertyChanging();
					this._Payed = value;
					this.SendPropertyChanged("Payed");
					this.OnPayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentPrice", DbType="Money NOT NULL")]
		public decimal PaymentPrice
		{
			get
			{
				return this._PaymentPrice;
			}
			set
			{
				if ((this._PaymentPrice != value))
				{
					this.OnPaymentPriceChanging(value);
					this.SendPropertyChanging();
					this._PaymentPrice = value;
					this.SendPropertyChanged("PaymentPrice");
					this.OnPaymentPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FunctorID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FunctorID
		{
			get
			{
				return this._FunctorID;
			}
			set
			{
				if ((this._FunctorID != value))
				{
					this.OnFunctorIDChanging(value);
					this.SendPropertyChanging();
					this._FunctorID = value;
					this.SendPropertyChanged("FunctorID");
					this.OnFunctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Confirm]", Storage="_Confirm", DbType="Bit NOT NULL")]
		public bool Confirm
		{
			get
			{
				return this._Confirm;
			}
			set
			{
				if ((this._Confirm != value))
				{
					this.OnConfirmChanging(value);
					this.SendPropertyChanging();
					this._Confirm = value;
					this.SendPropertyChanged("Confirm");
					this.OnConfirmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificator", DbType="Int")]
		public System.Nullable<int> LastModificator
		{
			get
			{
				return this._LastModificator;
			}
			set
			{
				if ((this._LastModificator != value))
				{
					this.OnLastModificatorChanging(value);
					this.SendPropertyChanging();
					this._LastModificator = value;
					this.SendPropertyChanged("LastModificator");
					this.OnLastModificatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificationDate", DbType="NVarChar(10)")]
		public string LastModificationDate
		{
			get
			{
				return this._LastModificationDate;
			}
			set
			{
				if ((this._LastModificationDate != value))
				{
					this.OnLastModificationDateChanging(value);
					this.SendPropertyChanging();
					this._LastModificationDate = value;
					this.SendPropertyChanged("LastModificationDate");
					this.OnLastModificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificationTime", DbType="NVarChar(8)")]
		public string LastModificationTime
		{
			get
			{
				return this._LastModificationTime;
			}
			set
			{
				if ((this._LastModificationTime != value))
				{
					this.OnLastModificationTimeChanging(value);
					this.SendPropertyChanging();
					this._LastModificationTime = value;
					this.SendPropertyChanged("LastModificationTime");
					this.OnLastModificationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GivenServiceD_GivenDiagnosticServiceD", Storage="_GivenDiagnosticServiceD", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public GivenDiagnosticServiceD GivenDiagnosticServiceD
		{
			get
			{
				return this._GivenDiagnosticServiceD.Entity;
			}
			set
			{
				GivenDiagnosticServiceD previousValue = this._GivenDiagnosticServiceD.Entity;
				if (((previousValue != value) 
							|| (this._GivenDiagnosticServiceD.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GivenDiagnosticServiceD.Entity = null;
						previousValue.GivenServiceD = null;
					}
					this._GivenDiagnosticServiceD.Entity = value;
					if ((value != null))
					{
						value.GivenServiceD = this;
					}
					this.SendPropertyChanged("GivenDiagnosticServiceD");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GivenServiceD_GivenLaboratoryServiceD", Storage="_GivenLaboratoryServiceD", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public GivenLaboratoryServiceD GivenLaboratoryServiceD
		{
			get
			{
				return this._GivenLaboratoryServiceD.Entity;
			}
			set
			{
				GivenLaboratoryServiceD previousValue = this._GivenLaboratoryServiceD.Entity;
				if (((previousValue != value) 
							|| (this._GivenLaboratoryServiceD.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GivenLaboratoryServiceD.Entity = null;
						previousValue.GivenServiceD = null;
					}
					this._GivenLaboratoryServiceD.Entity = value;
					if ((value != null))
					{
						value.GivenServiceD = this;
					}
					this.SendPropertyChanged("GivenLaboratoryServiceD");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GivenServiceM_GivenServiceD", Storage="_GivenServiceM", ThisKey="GivenServiceMID", OtherKey="ID", IsForeignKey=true)]
		public GivenServiceM GivenServiceM
		{
			get
			{
				return this._GivenServiceM.Entity;
			}
			set
			{
				GivenServiceM previousValue = this._GivenServiceM.Entity;
				if (((previousValue != value) 
							|| (this._GivenServiceM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GivenServiceM.Entity = null;
						previousValue.GivenServiceDs.Remove(this);
					}
					this._GivenServiceM.Entity = value;
					if ((value != null))
					{
						value.GivenServiceDs.Add(this);
						this._GivenServiceMID = value.ID;
					}
					else
					{
						this._GivenServiceMID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("GivenServiceM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_GivenServiceD", Storage="_Service", ThisKey="ServiceID", OtherKey="ID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.GivenServiceDs.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.GivenServiceDs.Add(this);
						this._ServiceID = value.ID;
					}
					else
					{
						this._ServiceID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GivenServiceM")]
	public partial class GivenServiceM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _PersonID;
		
		private System.Nullable<System.Guid> _RequestStaffID;
		
		private System.Nullable<int> _InsuranceID;
		
		private System.Nullable<System.Guid> _ParentID;
		
		private System.Nullable<int> _ShiftID;
		
		private System.Nullable<System.Guid> _AgendaID;
		
		private System.Nullable<System.Guid> _PeriodicCalendeID;
		
		private System.Nullable<int> _ServiceCategoryID;
		
		private System.Nullable<System.Guid> _FunctorID;
		
		private System.Nullable<System.Guid> _TechnicianID;
		
		private System.Nullable<System.Guid> _PaymentID;
		
		private System.Nullable<System.Guid> _PhysioOrderMID;
		
		private int _SerialNumber;
		
		private string _Date;
		
		private string _Time;
		
		private string _InsuranceNo;
		
		private string _RequestDate;
		
		private string _RequestTime;
		
		private string _AdmitDate;
		
		private string _AdmitTime;
		
		private string _BookletType;
		
		private string _BookletDate;
		
		private string _BookletExpireDate;
		
		private string _AnsweringDate;
		
		private string _TurningDate;
		
		private string _TurningTime;
		
		private string _BookletSerialNumber;
		
		private string _BookletPageNumber;
		
		private decimal _PayedPrice;
		
		private decimal _PaymentPrice;
		
		private string _SendToDrTime;
		
		private bool _SendToDr;
		
		private bool _Admitted;
		
		private bool _Confirm;
		
		private bool _Payed;
		
		private bool _Priority;
		
		private bool _RemissionStatus;
		
		private string _Comment;
		
		private System.Nullable<int> _DailySN;
		
		private System.Nullable<int> _CreatorUserID;
		
		private string _CreationTime;
		
		private string _CreationDate;
		
		private System.Nullable<int> _LastModificator;
		
		private string _LastModificationDate;
		
		private string _LastModificationTime;
		
		private string _ComplementInsurance;
		
		private string _ComplementInsuranceNO;
		
		private EntityRef<Visit> _Visit;
		
		private EntityRef<GivenDiagnosticServiceM> _GivenDiagnosticServiceM;
		
		private EntitySet<GivenServiceD> _GivenServiceDs;
		
		private EntitySet<GivenServiceM> _GivenServiceMs;
		
		private EntitySet<Payment> _Payments;
		
		private EntitySet<Reference> _References;
		
		private EntityRef<Agenda> _Agenda;
		
		private EntityRef<Definition> _Definition;
		
		private EntityRef<GivenServiceM> _GivenServiceM1;
		
		private EntityRef<Insurance> _Insurance;
		
		private EntityRef<PeriodicCalender> _PeriodicCalender;
		
		private EntityRef<PhysiotherapyOrderM> _PhysiotherapyOrderM;
		
		private EntityRef<ServiceCategory> _ServiceCategory;
		
		private EntityRef<Staff> _Staff;
		
		private EntityRef<Staff> _Staff1;
		
		private EntityRef<Staff> _Staff2;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPersonIDChanging(System.Nullable<System.Guid> value);
    partial void OnPersonIDChanged();
    partial void OnRequestStaffIDChanging(System.Nullable<System.Guid> value);
    partial void OnRequestStaffIDChanged();
    partial void OnInsuranceIDChanging(System.Nullable<int> value);
    partial void OnInsuranceIDChanged();
    partial void OnParentIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentIDChanged();
    partial void OnShiftIDChanging(System.Nullable<int> value);
    partial void OnShiftIDChanged();
    partial void OnAgendaIDChanging(System.Nullable<System.Guid> value);
    partial void OnAgendaIDChanged();
    partial void OnPeriodicCalendeIDChanging(System.Nullable<System.Guid> value);
    partial void OnPeriodicCalendeIDChanged();
    partial void OnServiceCategoryIDChanging(System.Nullable<int> value);
    partial void OnServiceCategoryIDChanged();
    partial void OnFunctorIDChanging(System.Nullable<System.Guid> value);
    partial void OnFunctorIDChanged();
    partial void OnTechnicianIDChanging(System.Nullable<System.Guid> value);
    partial void OnTechnicianIDChanged();
    partial void OnPaymentIDChanging(System.Nullable<System.Guid> value);
    partial void OnPaymentIDChanged();
    partial void OnPhysioOrderMIDChanging(System.Nullable<System.Guid> value);
    partial void OnPhysioOrderMIDChanged();
    partial void OnSerialNumberChanging(int value);
    partial void OnSerialNumberChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    partial void OnInsuranceNoChanging(string value);
    partial void OnInsuranceNoChanged();
    partial void OnRequestDateChanging(string value);
    partial void OnRequestDateChanged();
    partial void OnRequestTimeChanging(string value);
    partial void OnRequestTimeChanged();
    partial void OnAdmitDateChanging(string value);
    partial void OnAdmitDateChanged();
    partial void OnAdmitTimeChanging(string value);
    partial void OnAdmitTimeChanged();
    partial void OnBookletTypeChanging(string value);
    partial void OnBookletTypeChanged();
    partial void OnBookletDateChanging(string value);
    partial void OnBookletDateChanged();
    partial void OnBookletExpireDateChanging(string value);
    partial void OnBookletExpireDateChanged();
    partial void OnAnsweringDateChanging(string value);
    partial void OnAnsweringDateChanged();
    partial void OnTurningDateChanging(string value);
    partial void OnTurningDateChanged();
    partial void OnTurningTimeChanging(string value);
    partial void OnTurningTimeChanged();
    partial void OnBookletSerialNumberChanging(string value);
    partial void OnBookletSerialNumberChanged();
    partial void OnBookletPageNumberChanging(string value);
    partial void OnBookletPageNumberChanged();
    partial void OnPayedPriceChanging(decimal value);
    partial void OnPayedPriceChanged();
    partial void OnPaymentPriceChanging(decimal value);
    partial void OnPaymentPriceChanged();
    partial void OnSendToDrTimeChanging(string value);
    partial void OnSendToDrTimeChanged();
    partial void OnSendToDrChanging(bool value);
    partial void OnSendToDrChanged();
    partial void OnAdmittedChanging(bool value);
    partial void OnAdmittedChanged();
    partial void OnConfirmChanging(bool value);
    partial void OnConfirmChanged();
    partial void OnPayedChanging(bool value);
    partial void OnPayedChanged();
    partial void OnPriorityChanging(bool value);
    partial void OnPriorityChanged();
    partial void OnRemissionStatusChanging(bool value);
    partial void OnRemissionStatusChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnDailySNChanging(System.Nullable<int> value);
    partial void OnDailySNChanged();
    partial void OnCreatorUserIDChanging(System.Nullable<int> value);
    partial void OnCreatorUserIDChanged();
    partial void OnCreationTimeChanging(string value);
    partial void OnCreationTimeChanged();
    partial void OnCreationDateChanging(string value);
    partial void OnCreationDateChanged();
    partial void OnLastModificatorChanging(System.Nullable<int> value);
    partial void OnLastModificatorChanged();
    partial void OnLastModificationDateChanging(string value);
    partial void OnLastModificationDateChanged();
    partial void OnLastModificationTimeChanging(string value);
    partial void OnLastModificationTimeChanged();
    partial void OnComplementInsuranceChanging(string value);
    partial void OnComplementInsuranceChanged();
    partial void OnComplementInsuranceNOChanging(string value);
    partial void OnComplementInsuranceNOChanged();
    #endregion
		
		public GivenServiceM()
		{
			this._Visit = default(EntityRef<Visit>);
			this._GivenDiagnosticServiceM = default(EntityRef<GivenDiagnosticServiceM>);
			this._GivenServiceDs = new EntitySet<GivenServiceD>(new Action<GivenServiceD>(this.attach_GivenServiceDs), new Action<GivenServiceD>(this.detach_GivenServiceDs));
			this._GivenServiceMs = new EntitySet<GivenServiceM>(new Action<GivenServiceM>(this.attach_GivenServiceMs), new Action<GivenServiceM>(this.detach_GivenServiceMs));
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._References = new EntitySet<Reference>(new Action<Reference>(this.attach_References), new Action<Reference>(this.detach_References));
			this._Agenda = default(EntityRef<Agenda>);
			this._Definition = default(EntityRef<Definition>);
			this._GivenServiceM1 = default(EntityRef<GivenServiceM>);
			this._Insurance = default(EntityRef<Insurance>);
			this._PeriodicCalender = default(EntityRef<PeriodicCalender>);
			this._PhysiotherapyOrderM = default(EntityRef<PhysiotherapyOrderM>);
			this._ServiceCategory = default(EntityRef<ServiceCategory>);
			this._Staff = default(EntityRef<Staff>);
			this._Staff1 = default(EntityRef<Staff>);
			this._Staff2 = default(EntityRef<Staff>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestStaffID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RequestStaffID
		{
			get
			{
				return this._RequestStaffID;
			}
			set
			{
				if ((this._RequestStaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestStaffIDChanging(value);
					this.SendPropertyChanging();
					this._RequestStaffID = value;
					this.SendPropertyChanged("RequestStaffID");
					this.OnRequestStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceID", DbType="Int")]
		public System.Nullable<int> InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					if (this._Insurance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._GivenServiceM1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShiftID", DbType="Int")]
		public System.Nullable<int> ShiftID
		{
			get
			{
				return this._ShiftID;
			}
			set
			{
				if ((this._ShiftID != value))
				{
					if (this._Definition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShiftIDChanging(value);
					this.SendPropertyChanging();
					this._ShiftID = value;
					this.SendPropertyChanged("ShiftID");
					this.OnShiftIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgendaID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AgendaID
		{
			get
			{
				return this._AgendaID;
			}
			set
			{
				if ((this._AgendaID != value))
				{
					if (this._Agenda.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgendaIDChanging(value);
					this.SendPropertyChanging();
					this._AgendaID = value;
					this.SendPropertyChanged("AgendaID");
					this.OnAgendaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodicCalendeID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PeriodicCalendeID
		{
			get
			{
				return this._PeriodicCalendeID;
			}
			set
			{
				if ((this._PeriodicCalendeID != value))
				{
					if (this._PeriodicCalender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPeriodicCalendeIDChanging(value);
					this.SendPropertyChanging();
					this._PeriodicCalendeID = value;
					this.SendPropertyChanged("PeriodicCalendeID");
					this.OnPeriodicCalendeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceCategoryID", DbType="Int")]
		public System.Nullable<int> ServiceCategoryID
		{
			get
			{
				return this._ServiceCategoryID;
			}
			set
			{
				if ((this._ServiceCategoryID != value))
				{
					if (this._ServiceCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceCategoryID = value;
					this.SendPropertyChanged("ServiceCategoryID");
					this.OnServiceCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FunctorID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FunctorID
		{
			get
			{
				return this._FunctorID;
			}
			set
			{
				if ((this._FunctorID != value))
				{
					if (this._Staff1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFunctorIDChanging(value);
					this.SendPropertyChanging();
					this._FunctorID = value;
					this.SendPropertyChanged("FunctorID");
					this.OnFunctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnicianID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TechnicianID
		{
			get
			{
				return this._TechnicianID;
			}
			set
			{
				if ((this._TechnicianID != value))
				{
					if (this._Staff2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechnicianIDChanging(value);
					this.SendPropertyChanging();
					this._TechnicianID = value;
					this.SendPropertyChanged("TechnicianID");
					this.OnTechnicianIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PaymentID
		{
			get
			{
				return this._PaymentID;
			}
			set
			{
				if ((this._PaymentID != value))
				{
					this.OnPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentID = value;
					this.SendPropertyChanged("PaymentID");
					this.OnPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysioOrderMID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PhysioOrderMID
		{
			get
			{
				return this._PhysioOrderMID;
			}
			set
			{
				if ((this._PhysioOrderMID != value))
				{
					if (this._PhysiotherapyOrderM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhysioOrderMIDChanging(value);
					this.SendPropertyChanging();
					this._PhysioOrderMID = value;
					this.SendPropertyChanged("PhysioOrderMID");
					this.OnPhysioOrderMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NVarChar(10)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="NVarChar(8)")]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceNo", DbType="NVarChar(50)")]
		public string InsuranceNo
		{
			get
			{
				return this._InsuranceNo;
			}
			set
			{
				if ((this._InsuranceNo != value))
				{
					this.OnInsuranceNoChanging(value);
					this.SendPropertyChanging();
					this._InsuranceNo = value;
					this.SendPropertyChanged("InsuranceNo");
					this.OnInsuranceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestDate", DbType="NVarChar(10)")]
		public string RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestTime", DbType="NVarChar(8)")]
		public string RequestTime
		{
			get
			{
				return this._RequestTime;
			}
			set
			{
				if ((this._RequestTime != value))
				{
					this.OnRequestTimeChanging(value);
					this.SendPropertyChanging();
					this._RequestTime = value;
					this.SendPropertyChanged("RequestTime");
					this.OnRequestTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdmitDate", DbType="NVarChar(10)")]
		public string AdmitDate
		{
			get
			{
				return this._AdmitDate;
			}
			set
			{
				if ((this._AdmitDate != value))
				{
					this.OnAdmitDateChanging(value);
					this.SendPropertyChanging();
					this._AdmitDate = value;
					this.SendPropertyChanged("AdmitDate");
					this.OnAdmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdmitTime", DbType="NVarChar(8)")]
		public string AdmitTime
		{
			get
			{
				return this._AdmitTime;
			}
			set
			{
				if ((this._AdmitTime != value))
				{
					this.OnAdmitTimeChanging(value);
					this.SendPropertyChanging();
					this._AdmitTime = value;
					this.SendPropertyChanged("AdmitTime");
					this.OnAdmitTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookletType", DbType="NVarChar(20)")]
		public string BookletType
		{
			get
			{
				return this._BookletType;
			}
			set
			{
				if ((this._BookletType != value))
				{
					this.OnBookletTypeChanging(value);
					this.SendPropertyChanging();
					this._BookletType = value;
					this.SendPropertyChanged("BookletType");
					this.OnBookletTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookletDate", DbType="NVarChar(10)")]
		public string BookletDate
		{
			get
			{
				return this._BookletDate;
			}
			set
			{
				if ((this._BookletDate != value))
				{
					this.OnBookletDateChanging(value);
					this.SendPropertyChanging();
					this._BookletDate = value;
					this.SendPropertyChanged("BookletDate");
					this.OnBookletDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookletExpireDate", DbType="NVarChar(10)")]
		public string BookletExpireDate
		{
			get
			{
				return this._BookletExpireDate;
			}
			set
			{
				if ((this._BookletExpireDate != value))
				{
					this.OnBookletExpireDateChanging(value);
					this.SendPropertyChanging();
					this._BookletExpireDate = value;
					this.SendPropertyChanged("BookletExpireDate");
					this.OnBookletExpireDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnsweringDate", DbType="NVarChar(10)")]
		public string AnsweringDate
		{
			get
			{
				return this._AnsweringDate;
			}
			set
			{
				if ((this._AnsweringDate != value))
				{
					this.OnAnsweringDateChanging(value);
					this.SendPropertyChanging();
					this._AnsweringDate = value;
					this.SendPropertyChanged("AnsweringDate");
					this.OnAnsweringDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TurningDate", DbType="NVarChar(10)")]
		public string TurningDate
		{
			get
			{
				return this._TurningDate;
			}
			set
			{
				if ((this._TurningDate != value))
				{
					this.OnTurningDateChanging(value);
					this.SendPropertyChanging();
					this._TurningDate = value;
					this.SendPropertyChanged("TurningDate");
					this.OnTurningDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TurningTime", DbType="NVarChar(8)")]
		public string TurningTime
		{
			get
			{
				return this._TurningTime;
			}
			set
			{
				if ((this._TurningTime != value))
				{
					this.OnTurningTimeChanging(value);
					this.SendPropertyChanging();
					this._TurningTime = value;
					this.SendPropertyChanged("TurningTime");
					this.OnTurningTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookletSerialNumber", DbType="NVarChar(50)")]
		public string BookletSerialNumber
		{
			get
			{
				return this._BookletSerialNumber;
			}
			set
			{
				if ((this._BookletSerialNumber != value))
				{
					this.OnBookletSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._BookletSerialNumber = value;
					this.SendPropertyChanged("BookletSerialNumber");
					this.OnBookletSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookletPageNumber", DbType="NVarChar(25)")]
		public string BookletPageNumber
		{
			get
			{
				return this._BookletPageNumber;
			}
			set
			{
				if ((this._BookletPageNumber != value))
				{
					this.OnBookletPageNumberChanging(value);
					this.SendPropertyChanging();
					this._BookletPageNumber = value;
					this.SendPropertyChanged("BookletPageNumber");
					this.OnBookletPageNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayedPrice", DbType="Money NOT NULL")]
		public decimal PayedPrice
		{
			get
			{
				return this._PayedPrice;
			}
			set
			{
				if ((this._PayedPrice != value))
				{
					this.OnPayedPriceChanging(value);
					this.SendPropertyChanging();
					this._PayedPrice = value;
					this.SendPropertyChanged("PayedPrice");
					this.OnPayedPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentPrice", DbType="Money NOT NULL")]
		public decimal PaymentPrice
		{
			get
			{
				return this._PaymentPrice;
			}
			set
			{
				if ((this._PaymentPrice != value))
				{
					this.OnPaymentPriceChanging(value);
					this.SendPropertyChanging();
					this._PaymentPrice = value;
					this.SendPropertyChanged("PaymentPrice");
					this.OnPaymentPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SendToDrTime", DbType="NVarChar(8)")]
		public string SendToDrTime
		{
			get
			{
				return this._SendToDrTime;
			}
			set
			{
				if ((this._SendToDrTime != value))
				{
					this.OnSendToDrTimeChanging(value);
					this.SendPropertyChanging();
					this._SendToDrTime = value;
					this.SendPropertyChanged("SendToDrTime");
					this.OnSendToDrTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SendToDr", DbType="Bit NOT NULL")]
		public bool SendToDr
		{
			get
			{
				return this._SendToDr;
			}
			set
			{
				if ((this._SendToDr != value))
				{
					this.OnSendToDrChanging(value);
					this.SendPropertyChanging();
					this._SendToDr = value;
					this.SendPropertyChanged("SendToDr");
					this.OnSendToDrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admitted", DbType="Bit NOT NULL")]
		public bool Admitted
		{
			get
			{
				return this._Admitted;
			}
			set
			{
				if ((this._Admitted != value))
				{
					this.OnAdmittedChanging(value);
					this.SendPropertyChanging();
					this._Admitted = value;
					this.SendPropertyChanged("Admitted");
					this.OnAdmittedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Confirm]", Storage="_Confirm", DbType="Bit NOT NULL")]
		public bool Confirm
		{
			get
			{
				return this._Confirm;
			}
			set
			{
				if ((this._Confirm != value))
				{
					this.OnConfirmChanging(value);
					this.SendPropertyChanging();
					this._Confirm = value;
					this.SendPropertyChanged("Confirm");
					this.OnConfirmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payed", DbType="Bit NOT NULL")]
		public bool Payed
		{
			get
			{
				return this._Payed;
			}
			set
			{
				if ((this._Payed != value))
				{
					this.OnPayedChanging(value);
					this.SendPropertyChanging();
					this._Payed = value;
					this.SendPropertyChanged("Payed");
					this.OnPayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Bit NOT NULL")]
		public bool Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemissionStatus", DbType="Bit NOT NULL")]
		public bool RemissionStatus
		{
			get
			{
				return this._RemissionStatus;
			}
			set
			{
				if ((this._RemissionStatus != value))
				{
					this.OnRemissionStatusChanging(value);
					this.SendPropertyChanging();
					this._RemissionStatus = value;
					this.SendPropertyChanged("RemissionStatus");
					this.OnRemissionStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DailySN", DbType="Int")]
		public System.Nullable<int> DailySN
		{
			get
			{
				return this._DailySN;
			}
			set
			{
				if ((this._DailySN != value))
				{
					this.OnDailySNChanging(value);
					this.SendPropertyChanging();
					this._DailySN = value;
					this.SendPropertyChanged("DailySN");
					this.OnDailySNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorUserID", DbType="Int")]
		public System.Nullable<int> CreatorUserID
		{
			get
			{
				return this._CreatorUserID;
			}
			set
			{
				if ((this._CreatorUserID != value))
				{
					this.OnCreatorUserIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorUserID = value;
					this.SendPropertyChanged("CreatorUserID");
					this.OnCreatorUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="NVarChar(8)")]
		public string CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="NVarChar(10)")]
		public string CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificator", DbType="Int")]
		public System.Nullable<int> LastModificator
		{
			get
			{
				return this._LastModificator;
			}
			set
			{
				if ((this._LastModificator != value))
				{
					this.OnLastModificatorChanging(value);
					this.SendPropertyChanging();
					this._LastModificator = value;
					this.SendPropertyChanged("LastModificator");
					this.OnLastModificatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificationDate", DbType="NVarChar(10)")]
		public string LastModificationDate
		{
			get
			{
				return this._LastModificationDate;
			}
			set
			{
				if ((this._LastModificationDate != value))
				{
					this.OnLastModificationDateChanging(value);
					this.SendPropertyChanging();
					this._LastModificationDate = value;
					this.SendPropertyChanged("LastModificationDate");
					this.OnLastModificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificationTime", DbType="NVarChar(8)")]
		public string LastModificationTime
		{
			get
			{
				return this._LastModificationTime;
			}
			set
			{
				if ((this._LastModificationTime != value))
				{
					this.OnLastModificationTimeChanging(value);
					this.SendPropertyChanging();
					this._LastModificationTime = value;
					this.SendPropertyChanged("LastModificationTime");
					this.OnLastModificationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComplementInsurance", DbType="NVarChar(50)")]
		public string ComplementInsurance
		{
			get
			{
				return this._ComplementInsurance;
			}
			set
			{
				if ((this._ComplementInsurance != value))
				{
					this.OnComplementInsuranceChanging(value);
					this.SendPropertyChanging();
					this._ComplementInsurance = value;
					this.SendPropertyChanged("ComplementInsurance");
					this.OnComplementInsuranceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComplementInsuranceNO", DbType="NVarChar(50)")]
		public string ComplementInsuranceNO
		{
			get
			{
				return this._ComplementInsuranceNO;
			}
			set
			{
				if ((this._ComplementInsuranceNO != value))
				{
					this.OnComplementInsuranceNOChanging(value);
					this.SendPropertyChanging();
					this._ComplementInsuranceNO = value;
					this.SendPropertyChanged("ComplementInsuranceNO");
					this.OnComplementInsuranceNOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GivenServiceM_Visit", Storage="_Visit", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public Visit Visit
		{
			get
			{
				return this._Visit.Entity;
			}
			set
			{
				Visit previousValue = this._Visit.Entity;
				if (((previousValue != value) 
							|| (this._Visit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Visit.Entity = null;
						previousValue.GivenServiceM = null;
					}
					this._Visit.Entity = value;
					if ((value != null))
					{
						value.GivenServiceM = this;
					}
					this.SendPropertyChanged("Visit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GivenServiceM_GivenDiagnosticServiceM", Storage="_GivenDiagnosticServiceM", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public GivenDiagnosticServiceM GivenDiagnosticServiceM
		{
			get
			{
				return this._GivenDiagnosticServiceM.Entity;
			}
			set
			{
				GivenDiagnosticServiceM previousValue = this._GivenDiagnosticServiceM.Entity;
				if (((previousValue != value) 
							|| (this._GivenDiagnosticServiceM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GivenDiagnosticServiceM.Entity = null;
						previousValue.GivenServiceM = null;
					}
					this._GivenDiagnosticServiceM.Entity = value;
					if ((value != null))
					{
						value.GivenServiceM = this;
					}
					this.SendPropertyChanged("GivenDiagnosticServiceM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GivenServiceM_GivenServiceD", Storage="_GivenServiceDs", ThisKey="ID", OtherKey="GivenServiceMID")]
		public EntitySet<GivenServiceD> GivenServiceDs
		{
			get
			{
				return this._GivenServiceDs;
			}
			set
			{
				this._GivenServiceDs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GivenServiceM_GivenServiceM", Storage="_GivenServiceMs", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<GivenServiceM> GivenServiceMs
		{
			get
			{
				return this._GivenServiceMs;
			}
			set
			{
				this._GivenServiceMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GivenServiceM_Payment", Storage="_Payments", ThisKey="ID", OtherKey="GivenServiceMID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GivenServiceM_Reference", Storage="_References", ThisKey="ID", OtherKey="GivenServiceMID")]
		public EntitySet<Reference> References
		{
			get
			{
				return this._References;
			}
			set
			{
				this._References.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Agenda_GivenServiceM", Storage="_Agenda", ThisKey="AgendaID", OtherKey="ID", IsForeignKey=true)]
		public Agenda Agenda
		{
			get
			{
				return this._Agenda.Entity;
			}
			set
			{
				Agenda previousValue = this._Agenda.Entity;
				if (((previousValue != value) 
							|| (this._Agenda.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Agenda.Entity = null;
						previousValue.GivenServiceMs.Remove(this);
					}
					this._Agenda.Entity = value;
					if ((value != null))
					{
						value.GivenServiceMs.Add(this);
						this._AgendaID = value.ID;
					}
					else
					{
						this._AgendaID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Agenda");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Definition_GivenServiceM", Storage="_Definition", ThisKey="ShiftID", OtherKey="ID", IsForeignKey=true)]
		public Definition Definition
		{
			get
			{
				return this._Definition.Entity;
			}
			set
			{
				Definition previousValue = this._Definition.Entity;
				if (((previousValue != value) 
							|| (this._Definition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Definition.Entity = null;
						previousValue.GivenServiceMs.Remove(this);
					}
					this._Definition.Entity = value;
					if ((value != null))
					{
						value.GivenServiceMs.Add(this);
						this._ShiftID = value.ID;
					}
					else
					{
						this._ShiftID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Definition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GivenServiceM_GivenServiceM", Storage="_GivenServiceM1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public GivenServiceM GivenServiceM1
		{
			get
			{
				return this._GivenServiceM1.Entity;
			}
			set
			{
				GivenServiceM previousValue = this._GivenServiceM1.Entity;
				if (((previousValue != value) 
							|| (this._GivenServiceM1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GivenServiceM1.Entity = null;
						previousValue.GivenServiceMs.Remove(this);
					}
					this._GivenServiceM1.Entity = value;
					if ((value != null))
					{
						value.GivenServiceMs.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("GivenServiceM1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Insurance_GivenServiceM", Storage="_Insurance", ThisKey="InsuranceID", OtherKey="ID", IsForeignKey=true)]
		public Insurance Insurance
		{
			get
			{
				return this._Insurance.Entity;
			}
			set
			{
				Insurance previousValue = this._Insurance.Entity;
				if (((previousValue != value) 
							|| (this._Insurance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Insurance.Entity = null;
						previousValue.GivenServiceMs.Remove(this);
					}
					this._Insurance.Entity = value;
					if ((value != null))
					{
						value.GivenServiceMs.Add(this);
						this._InsuranceID = value.ID;
					}
					else
					{
						this._InsuranceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Insurance");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PeriodicCalender_GivenServiceM", Storage="_PeriodicCalender", ThisKey="PeriodicCalendeID", OtherKey="ID", IsForeignKey=true)]
		public PeriodicCalender PeriodicCalender
		{
			get
			{
				return this._PeriodicCalender.Entity;
			}
			set
			{
				PeriodicCalender previousValue = this._PeriodicCalender.Entity;
				if (((previousValue != value) 
							|| (this._PeriodicCalender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PeriodicCalender.Entity = null;
						previousValue.GivenServiceMs.Remove(this);
					}
					this._PeriodicCalender.Entity = value;
					if ((value != null))
					{
						value.GivenServiceMs.Add(this);
						this._PeriodicCalendeID = value.ID;
					}
					else
					{
						this._PeriodicCalendeID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PeriodicCalender");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhysiotherapyOrderM_GivenServiceM", Storage="_PhysiotherapyOrderM", ThisKey="PhysioOrderMID", OtherKey="ID", IsForeignKey=true)]
		public PhysiotherapyOrderM PhysiotherapyOrderM
		{
			get
			{
				return this._PhysiotherapyOrderM.Entity;
			}
			set
			{
				PhysiotherapyOrderM previousValue = this._PhysiotherapyOrderM.Entity;
				if (((previousValue != value) 
							|| (this._PhysiotherapyOrderM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhysiotherapyOrderM.Entity = null;
						previousValue.GivenServiceMs.Remove(this);
					}
					this._PhysiotherapyOrderM.Entity = value;
					if ((value != null))
					{
						value.GivenServiceMs.Add(this);
						this._PhysioOrderMID = value.ID;
					}
					else
					{
						this._PhysioOrderMID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PhysiotherapyOrderM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceCategory_GivenServiceM", Storage="_ServiceCategory", ThisKey="ServiceCategoryID", OtherKey="ID", IsForeignKey=true)]
		public ServiceCategory ServiceCategory
		{
			get
			{
				return this._ServiceCategory.Entity;
			}
			set
			{
				ServiceCategory previousValue = this._ServiceCategory.Entity;
				if (((previousValue != value) 
							|| (this._ServiceCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceCategory.Entity = null;
						previousValue.GivenServiceMs.Remove(this);
					}
					this._ServiceCategory.Entity = value;
					if ((value != null))
					{
						value.GivenServiceMs.Add(this);
						this._ServiceCategoryID = value.ID;
					}
					else
					{
						this._ServiceCategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ServiceCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_GivenServiceM", Storage="_Staff", ThisKey="RequestStaffID", OtherKey="ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.GivenServiceMs.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.GivenServiceMs.Add(this);
						this._RequestStaffID = value.ID;
					}
					else
					{
						this._RequestStaffID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_GivenServiceM1", Storage="_Staff1", ThisKey="FunctorID", OtherKey="ID", IsForeignKey=true)]
		public Staff Staff1
		{
			get
			{
				return this._Staff1.Entity;
			}
			set
			{
				Staff previousValue = this._Staff1.Entity;
				if (((previousValue != value) 
							|| (this._Staff1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff1.Entity = null;
						previousValue.GivenServiceMs1.Remove(this);
					}
					this._Staff1.Entity = value;
					if ((value != null))
					{
						value.GivenServiceMs1.Add(this);
						this._FunctorID = value.ID;
					}
					else
					{
						this._FunctorID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Staff1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_GivenServiceM2", Storage="_Staff2", ThisKey="TechnicianID", OtherKey="ID", IsForeignKey=true)]
		public Staff Staff2
		{
			get
			{
				return this._Staff2.Entity;
			}
			set
			{
				Staff previousValue = this._Staff2.Entity;
				if (((previousValue != value) 
							|| (this._Staff2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff2.Entity = null;
						previousValue.GivenServiceMs2.Remove(this);
					}
					this._Staff2.Entity = value;
					if ((value != null))
					{
						value.GivenServiceMs2.Add(this);
						this._TechnicianID = value.ID;
					}
					else
					{
						this._TechnicianID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Staff2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_GivenServiceM", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.GivenServiceMs.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.GivenServiceMs.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GivenServiceDs(GivenServiceD entity)
		{
			this.SendPropertyChanging();
			entity.GivenServiceM = this;
		}
		
		private void detach_GivenServiceDs(GivenServiceD entity)
		{
			this.SendPropertyChanging();
			entity.GivenServiceM = null;
		}
		
		private void attach_GivenServiceMs(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.GivenServiceM1 = this;
		}
		
		private void detach_GivenServiceMs(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.GivenServiceM1 = null;
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.GivenServiceM = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.GivenServiceM = null;
		}
		
		private void attach_References(Reference entity)
		{
			this.SendPropertyChanging();
			entity.GivenServiceM = this;
		}
		
		private void detach_References(Reference entity)
		{
			this.SendPropertyChanging();
			entity.GivenServiceM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ICD10")]
	public partial class ICD10 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _IDParent;
		
		private string _NameF;
		
		private string _NameE;
		
		private string _ICDCode;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<byte> _CodeType;
		
		private EntitySet<Visit> _Visits;
		
		private EntitySet<Visit> _Visits1;
		
		private EntitySet<Visit> _Visits2;
		
		private EntitySet<FavoriteICD10> _FavoriteICD10s;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDParentChanging(System.Nullable<int> value);
    partial void OnIDParentChanged();
    partial void OnNameFChanging(string value);
    partial void OnNameFChanged();
    partial void OnNameEChanging(string value);
    partial void OnNameEChanged();
    partial void OnICDCodeChanging(string value);
    partial void OnICDCodeChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCodeTypeChanging(System.Nullable<byte> value);
    partial void OnCodeTypeChanged();
    #endregion
		
		public ICD10()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			this._Visits1 = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits1), new Action<Visit>(this.detach_Visits1));
			this._Visits2 = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits2), new Action<Visit>(this.detach_Visits2));
			this._FavoriteICD10s = new EntitySet<FavoriteICD10>(new Action<FavoriteICD10>(this.attach_FavoriteICD10s), new Action<FavoriteICD10>(this.detach_FavoriteICD10s));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDParent", DbType="Int")]
		public System.Nullable<int> IDParent
		{
			get
			{
				return this._IDParent;
			}
			set
			{
				if ((this._IDParent != value))
				{
					this.OnIDParentChanging(value);
					this.SendPropertyChanging();
					this._IDParent = value;
					this.SendPropertyChanged("IDParent");
					this.OnIDParentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameF", DbType="NVarChar(MAX)")]
		public string NameF
		{
			get
			{
				return this._NameF;
			}
			set
			{
				if ((this._NameF != value))
				{
					this.OnNameFChanging(value);
					this.SendPropertyChanging();
					this._NameF = value;
					this.SendPropertyChanged("NameF");
					this.OnNameFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameE", DbType="NVarChar(MAX)")]
		public string NameE
		{
			get
			{
				return this._NameE;
			}
			set
			{
				if ((this._NameE != value))
				{
					this.OnNameEChanging(value);
					this.SendPropertyChanging();
					this._NameE = value;
					this.SendPropertyChanged("NameE");
					this.OnNameEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICDCode", DbType="NVarChar(20)")]
		public string ICDCode
		{
			get
			{
				return this._ICDCode;
			}
			set
			{
				if ((this._ICDCode != value))
				{
					this.OnICDCodeChanging(value);
					this.SendPropertyChanging();
					this._ICDCode = value;
					this.SendPropertyChanged("ICDCode");
					this.OnICDCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeType", DbType="TinyInt")]
		public System.Nullable<byte> CodeType
		{
			get
			{
				return this._CodeType;
			}
			set
			{
				if ((this._CodeType != value))
				{
					this.OnCodeTypeChanging(value);
					this.SendPropertyChanging();
					this._CodeType = value;
					this.SendPropertyChanged("CodeType");
					this.OnCodeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ICD10_Visit", Storage="_Visits", ThisKey="ID", OtherKey="IMP")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ICD10_Visit1", Storage="_Visits1", ThisKey="ID", OtherKey="DDx1")]
		public EntitySet<Visit> Visits1
		{
			get
			{
				return this._Visits1;
			}
			set
			{
				this._Visits1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ICD10_Visit2", Storage="_Visits2", ThisKey="ID", OtherKey="DDx2")]
		public EntitySet<Visit> Visits2
		{
			get
			{
				return this._Visits2;
			}
			set
			{
				this._Visits2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ICD10_FavoriteICD10", Storage="_FavoriteICD10s", ThisKey="ID", OtherKey="ICD10ID")]
		public EntitySet<FavoriteICD10> FavoriteICD10s
		{
			get
			{
				return this._FavoriteICD10s;
			}
			set
			{
				this._FavoriteICD10s.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.ICD10 = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.ICD10 = null;
		}
		
		private void attach_Visits1(Visit entity)
		{
			this.SendPropertyChanging();
			entity.ICD101 = this;
		}
		
		private void detach_Visits1(Visit entity)
		{
			this.SendPropertyChanging();
			entity.ICD101 = null;
		}
		
		private void attach_Visits2(Visit entity)
		{
			this.SendPropertyChanging();
			entity.ICD102 = this;
		}
		
		private void detach_Visits2(Visit entity)
		{
			this.SendPropertyChanging();
			entity.ICD102 = null;
		}
		
		private void attach_FavoriteICD10s(FavoriteICD10 entity)
		{
			this.SendPropertyChanging();
			entity.ICD10 = this;
		}
		
		private void detach_FavoriteICD10s(FavoriteICD10 entity)
		{
			this.SendPropertyChanging();
			entity.ICD10 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Insurance")]
	public partial class Insurance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<DoctorInsurance> _DoctorInsurances;
		
		private EntitySet<GivenServiceM> _GivenServiceMs;
		
		private EntitySet<Tariff> _Tariffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Insurance()
		{
			this._DoctorInsurances = new EntitySet<DoctorInsurance>(new Action<DoctorInsurance>(this.attach_DoctorInsurances), new Action<DoctorInsurance>(this.detach_DoctorInsurances));
			this._GivenServiceMs = new EntitySet<GivenServiceM>(new Action<GivenServiceM>(this.attach_GivenServiceMs), new Action<GivenServiceM>(this.detach_GivenServiceMs));
			this._Tariffs = new EntitySet<Tariff>(new Action<Tariff>(this.attach_Tariffs), new Action<Tariff>(this.detach_Tariffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Insurance_DoctorInsurance", Storage="_DoctorInsurances", ThisKey="ID", OtherKey="InsuranceID")]
		public EntitySet<DoctorInsurance> DoctorInsurances
		{
			get
			{
				return this._DoctorInsurances;
			}
			set
			{
				this._DoctorInsurances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Insurance_GivenServiceM", Storage="_GivenServiceMs", ThisKey="ID", OtherKey="InsuranceID")]
		public EntitySet<GivenServiceM> GivenServiceMs
		{
			get
			{
				return this._GivenServiceMs;
			}
			set
			{
				this._GivenServiceMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Insurance_Tariff", Storage="_Tariffs", ThisKey="ID", OtherKey="InsuranceID")]
		public EntitySet<Tariff> Tariffs
		{
			get
			{
				return this._Tariffs;
			}
			set
			{
				this._Tariffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DoctorInsurances(DoctorInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = this;
		}
		
		private void detach_DoctorInsurances(DoctorInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = null;
		}
		
		private void attach_GivenServiceMs(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = this;
		}
		
		private void detach_GivenServiceMs(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = null;
		}
		
		private void attach_Tariffs(Tariff entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = this;
		}
		
		private void detach_Tariffs(Tariff entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LaboratoryServiceDetail")]
	public partial class LaboratoryServiceDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _TestCode;
		
		private System.Nullable<bool> _TestOnly;
		
		private System.Nullable<short> _TestNo;
		
		private string _MeasurementUnit;
		
		private string _AbbreviationName;
		
		private string _TestType;
		
		private string _UpperBound;
		
		private string _LowerBound;
		
		private string _NormalRange;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnTestCodeChanging(int value);
    partial void OnTestCodeChanged();
    partial void OnTestOnlyChanging(System.Nullable<bool> value);
    partial void OnTestOnlyChanged();
    partial void OnTestNoChanging(System.Nullable<short> value);
    partial void OnTestNoChanged();
    partial void OnMeasurementUnitChanging(string value);
    partial void OnMeasurementUnitChanged();
    partial void OnAbbreviationNameChanging(string value);
    partial void OnAbbreviationNameChanged();
    partial void OnTestTypeChanging(string value);
    partial void OnTestTypeChanged();
    partial void OnUpperBoundChanging(string value);
    partial void OnUpperBoundChanged();
    partial void OnLowerBoundChanging(string value);
    partial void OnLowerBoundChanged();
    partial void OnNormalRangeChanging(string value);
    partial void OnNormalRangeChanged();
    #endregion
		
		public LaboratoryServiceDetail()
		{
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestCode", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int TestCode
		{
			get
			{
				return this._TestCode;
			}
			set
			{
				if ((this._TestCode != value))
				{
					this.OnTestCodeChanging(value);
					this.SendPropertyChanging();
					this._TestCode = value;
					this.SendPropertyChanged("TestCode");
					this.OnTestCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestOnly", DbType="Bit")]
		public System.Nullable<bool> TestOnly
		{
			get
			{
				return this._TestOnly;
			}
			set
			{
				if ((this._TestOnly != value))
				{
					this.OnTestOnlyChanging(value);
					this.SendPropertyChanging();
					this._TestOnly = value;
					this.SendPropertyChanged("TestOnly");
					this.OnTestOnlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestNo", DbType="SmallInt")]
		public System.Nullable<short> TestNo
		{
			get
			{
				return this._TestNo;
			}
			set
			{
				if ((this._TestNo != value))
				{
					this.OnTestNoChanging(value);
					this.SendPropertyChanging();
					this._TestNo = value;
					this.SendPropertyChanged("TestNo");
					this.OnTestNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasurementUnit", DbType="NVarChar(50)")]
		public string MeasurementUnit
		{
			get
			{
				return this._MeasurementUnit;
			}
			set
			{
				if ((this._MeasurementUnit != value))
				{
					this.OnMeasurementUnitChanging(value);
					this.SendPropertyChanging();
					this._MeasurementUnit = value;
					this.SendPropertyChanged("MeasurementUnit");
					this.OnMeasurementUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbbreviationName", DbType="NVarChar(50)")]
		public string AbbreviationName
		{
			get
			{
				return this._AbbreviationName;
			}
			set
			{
				if ((this._AbbreviationName != value))
				{
					this.OnAbbreviationNameChanging(value);
					this.SendPropertyChanging();
					this._AbbreviationName = value;
					this.SendPropertyChanged("AbbreviationName");
					this.OnAbbreviationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestType", DbType="NVarChar(20)")]
		public string TestType
		{
			get
			{
				return this._TestType;
			}
			set
			{
				if ((this._TestType != value))
				{
					this.OnTestTypeChanging(value);
					this.SendPropertyChanging();
					this._TestType = value;
					this.SendPropertyChanged("TestType");
					this.OnTestTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpperBound", DbType="NVarChar(50)")]
		public string UpperBound
		{
			get
			{
				return this._UpperBound;
			}
			set
			{
				if ((this._UpperBound != value))
				{
					this.OnUpperBoundChanging(value);
					this.SendPropertyChanging();
					this._UpperBound = value;
					this.SendPropertyChanged("UpperBound");
					this.OnUpperBoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowerBound", DbType="NVarChar(50)")]
		public string LowerBound
		{
			get
			{
				return this._LowerBound;
			}
			set
			{
				if ((this._LowerBound != value))
				{
					this.OnLowerBoundChanging(value);
					this.SendPropertyChanging();
					this._LowerBound = value;
					this.SendPropertyChanged("LowerBound");
					this.OnLowerBoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NormalRange", DbType="NVarChar(300)")]
		public string NormalRange
		{
			get
			{
				return this._NormalRange;
			}
			set
			{
				if ((this._NormalRange != value))
				{
					this.OnNormalRangeChanging(value);
					this.SendPropertyChanging();
					this._NormalRange = value;
					this.SendPropertyChanged("NormalRange");
					this.OnNormalRangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_LaboratoryServiceDetail", Storage="_Service", ThisKey="ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.LaboratoryServiceDetail = null;
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.LaboratoryServiceDetail = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(System.Guid);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabTerm")]
	public partial class LabTerm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ShortcutKey;
		
		private string _TermText;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnShortcutKeyChanging(string value);
    partial void OnShortcutKeyChanged();
    partial void OnTermTextChanging(string value);
    partial void OnTermTextChanged();
    #endregion
		
		public LabTerm()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortcutKey", DbType="NVarChar(20)")]
		public string ShortcutKey
		{
			get
			{
				return this._ShortcutKey;
			}
			set
			{
				if ((this._ShortcutKey != value))
				{
					this.OnShortcutKeyChanging(value);
					this.SendPropertyChanging();
					this._ShortcutKey = value;
					this.SendPropertyChanged("ShortcutKey");
					this.OnShortcutKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermText", DbType="NVarChar(MAX)")]
		public string TermText
		{
			get
			{
				return this._TermText;
			}
			set
			{
				if ((this._TermText != value))
				{
					this.OnTermTextChanging(value);
					this.SendPropertyChanging();
					this._TermText = value;
					this.SendPropertyChanged("TermText");
					this.OnTermTextChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private decimal _Price;
		
		private string _Date;
		
		private string _Type;
		
		private System.Nullable<System.Guid> _StaffID;
		
		private System.Nullable<System.Guid> _PersonID;
		
		private bool _PayBack;
		
		private string _Description;
		
		private string _Time;
		
		private string _TransactionID;
		
		private System.Nullable<int> _CreatorUserID;
		
		private string _CreatorFullName;
		
		private System.Nullable<int> _ModificatorUserID;
		
		private string _ModificatorFullName;
		
		private System.Nullable<System.Guid> _PayBackID;
		
		private int _SerialNumber;
		
		private string _PayBackType;
		
		private System.Nullable<System.Guid> _GivenServiceMID;
		
		private string _InstallMent;
		
		private EntitySet<Payment> _Payments;
		
		private EntityRef<GivenServiceM> _GivenServiceM;
		
		private EntityRef<Payment> _Payment1;
		
		private EntityRef<Staff> _Staff;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnStaffIDChanging(System.Nullable<System.Guid> value);
    partial void OnStaffIDChanged();
    partial void OnPersonIDChanging(System.Nullable<System.Guid> value);
    partial void OnPersonIDChanged();
    partial void OnPayBackChanging(bool value);
    partial void OnPayBackChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    partial void OnTransactionIDChanging(string value);
    partial void OnTransactionIDChanged();
    partial void OnCreatorUserIDChanging(System.Nullable<int> value);
    partial void OnCreatorUserIDChanged();
    partial void OnCreatorFullNameChanging(string value);
    partial void OnCreatorFullNameChanged();
    partial void OnModificatorUserIDChanging(System.Nullable<int> value);
    partial void OnModificatorUserIDChanged();
    partial void OnModificatorFullNameChanging(string value);
    partial void OnModificatorFullNameChanged();
    partial void OnPayBackIDChanging(System.Nullable<System.Guid> value);
    partial void OnPayBackIDChanged();
    partial void OnSerialNumberChanging(int value);
    partial void OnSerialNumberChanged();
    partial void OnPayBackTypeChanging(string value);
    partial void OnPayBackTypeChanged();
    partial void OnGivenServiceMIDChanging(System.Nullable<System.Guid> value);
    partial void OnGivenServiceMIDChanged();
    partial void OnInstallMentChanging(string value);
    partial void OnInstallMentChanged();
    #endregion
		
		public Payment()
		{
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._GivenServiceM = default(EntityRef<GivenServiceM>);
			this._Payment1 = default(EntityRef<Payment>);
			this._Staff = default(EntityRef<Staff>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NVarChar(10)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayBack", DbType="Bit NOT NULL")]
		public bool PayBack
		{
			get
			{
				return this._PayBack;
			}
			set
			{
				if ((this._PayBack != value))
				{
					this.OnPayBackChanging(value);
					this.SendPropertyChanging();
					this._PayBack = value;
					this.SendPropertyChanged("PayBack");
					this.OnPayBackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="NChar(10)")]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", DbType="NVarChar(50)")]
		public string TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorUserID", DbType="Int")]
		public System.Nullable<int> CreatorUserID
		{
			get
			{
				return this._CreatorUserID;
			}
			set
			{
				if ((this._CreatorUserID != value))
				{
					this.OnCreatorUserIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorUserID = value;
					this.SendPropertyChanged("CreatorUserID");
					this.OnCreatorUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorFullName", DbType="NVarChar(100)")]
		public string CreatorFullName
		{
			get
			{
				return this._CreatorFullName;
			}
			set
			{
				if ((this._CreatorFullName != value))
				{
					this.OnCreatorFullNameChanging(value);
					this.SendPropertyChanging();
					this._CreatorFullName = value;
					this.SendPropertyChanged("CreatorFullName");
					this.OnCreatorFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModificatorUserID", DbType="Int")]
		public System.Nullable<int> ModificatorUserID
		{
			get
			{
				return this._ModificatorUserID;
			}
			set
			{
				if ((this._ModificatorUserID != value))
				{
					this.OnModificatorUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModificatorUserID = value;
					this.SendPropertyChanged("ModificatorUserID");
					this.OnModificatorUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModificatorFullName", DbType="NVarChar(100)")]
		public string ModificatorFullName
		{
			get
			{
				return this._ModificatorFullName;
			}
			set
			{
				if ((this._ModificatorFullName != value))
				{
					this.OnModificatorFullNameChanging(value);
					this.SendPropertyChanging();
					this._ModificatorFullName = value;
					this.SendPropertyChanged("ModificatorFullName");
					this.OnModificatorFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayBackID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PayBackID
		{
			get
			{
				return this._PayBackID;
			}
			set
			{
				if ((this._PayBackID != value))
				{
					if (this._Payment1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPayBackIDChanging(value);
					this.SendPropertyChanging();
					this._PayBackID = value;
					this.SendPropertyChanged("PayBackID");
					this.OnPayBackIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayBackType", DbType="NVarChar(20)")]
		public string PayBackType
		{
			get
			{
				return this._PayBackType;
			}
			set
			{
				if ((this._PayBackType != value))
				{
					this.OnPayBackTypeChanging(value);
					this.SendPropertyChanging();
					this._PayBackType = value;
					this.SendPropertyChanged("PayBackType");
					this.OnPayBackTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GivenServiceMID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> GivenServiceMID
		{
			get
			{
				return this._GivenServiceMID;
			}
			set
			{
				if ((this._GivenServiceMID != value))
				{
					if (this._GivenServiceM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGivenServiceMIDChanging(value);
					this.SendPropertyChanging();
					this._GivenServiceMID = value;
					this.SendPropertyChanged("GivenServiceMID");
					this.OnGivenServiceMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstallMent", DbType="NVarChar(50)")]
		public string InstallMent
		{
			get
			{
				return this._InstallMent;
			}
			set
			{
				if ((this._InstallMent != value))
				{
					this.OnInstallMentChanging(value);
					this.SendPropertyChanging();
					this._InstallMent = value;
					this.SendPropertyChanged("InstallMent");
					this.OnInstallMentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payment_Payment", Storage="_Payments", ThisKey="ID", OtherKey="PayBackID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GivenServiceM_Payment", Storage="_GivenServiceM", ThisKey="GivenServiceMID", OtherKey="ID", IsForeignKey=true)]
		public GivenServiceM GivenServiceM
		{
			get
			{
				return this._GivenServiceM.Entity;
			}
			set
			{
				GivenServiceM previousValue = this._GivenServiceM.Entity;
				if (((previousValue != value) 
							|| (this._GivenServiceM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GivenServiceM.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._GivenServiceM.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._GivenServiceMID = value.ID;
					}
					else
					{
						this._GivenServiceMID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("GivenServiceM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payment_Payment", Storage="_Payment1", ThisKey="PayBackID", OtherKey="ID", IsForeignKey=true)]
		public Payment Payment1
		{
			get
			{
				return this._Payment1.Entity;
			}
			set
			{
				Payment previousValue = this._Payment1.Entity;
				if (((previousValue != value) 
							|| (this._Payment1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Payment1.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._Payment1.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._PayBackID = value.ID;
					}
					else
					{
						this._PayBackID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Payment1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Payment", Storage="_Staff", ThisKey="StaffID", OtherKey="ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._StaffID = value.ID;
					}
					else
					{
						this._StaffID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Payment", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Payment1 = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Payment1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PeriodicCalender")]
	public partial class PeriodicCalender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<int> _ShiftID;
		
		private System.Nullable<int> _ServiceCategoryID;
		
		private System.Nullable<int> _Capacity;
		
		private string _FromDate;
		
		private string _ToDate;
		
		private string _FromClock;
		
		private string _ToClock;
		
		private System.Nullable<bool> _Shanbeh;
		
		private System.Nullable<bool> _YekShanbeh;
		
		private System.Nullable<bool> _DoShanbeh;
		
		private System.Nullable<bool> _SeShanbeh;
		
		private System.Nullable<bool> _ChaharShanbeh;
		
		private System.Nullable<bool> _PanjShanbeh;
		
		private System.Nullable<bool> _Jomeh;
		
		private EntitySet<Agenda> _Agendas;
		
		private EntitySet<GivenServiceM> _GivenServiceMs;
		
		private EntityRef<Definition> _Definition;
		
		private EntityRef<ServiceCategory> _ServiceCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnShiftIDChanging(System.Nullable<int> value);
    partial void OnShiftIDChanged();
    partial void OnServiceCategoryIDChanging(System.Nullable<int> value);
    partial void OnServiceCategoryIDChanged();
    partial void OnCapacityChanging(System.Nullable<int> value);
    partial void OnCapacityChanged();
    partial void OnFromDateChanging(string value);
    partial void OnFromDateChanged();
    partial void OnToDateChanging(string value);
    partial void OnToDateChanged();
    partial void OnFromClockChanging(string value);
    partial void OnFromClockChanged();
    partial void OnToClockChanging(string value);
    partial void OnToClockChanged();
    partial void OnShanbehChanging(System.Nullable<bool> value);
    partial void OnShanbehChanged();
    partial void OnYekShanbehChanging(System.Nullable<bool> value);
    partial void OnYekShanbehChanged();
    partial void OnDoShanbehChanging(System.Nullable<bool> value);
    partial void OnDoShanbehChanged();
    partial void OnSeShanbehChanging(System.Nullable<bool> value);
    partial void OnSeShanbehChanged();
    partial void OnChaharShanbehChanging(System.Nullable<bool> value);
    partial void OnChaharShanbehChanged();
    partial void OnPanjShanbehChanging(System.Nullable<bool> value);
    partial void OnPanjShanbehChanged();
    partial void OnJomehChanging(System.Nullable<bool> value);
    partial void OnJomehChanged();
    #endregion
		
		public PeriodicCalender()
		{
			this._Agendas = new EntitySet<Agenda>(new Action<Agenda>(this.attach_Agendas), new Action<Agenda>(this.detach_Agendas));
			this._GivenServiceMs = new EntitySet<GivenServiceM>(new Action<GivenServiceM>(this.attach_GivenServiceMs), new Action<GivenServiceM>(this.detach_GivenServiceMs));
			this._Definition = default(EntityRef<Definition>);
			this._ServiceCategory = default(EntityRef<ServiceCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShiftID", DbType="Int")]
		public System.Nullable<int> ShiftID
		{
			get
			{
				return this._ShiftID;
			}
			set
			{
				if ((this._ShiftID != value))
				{
					if (this._Definition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShiftIDChanging(value);
					this.SendPropertyChanging();
					this._ShiftID = value;
					this.SendPropertyChanged("ShiftID");
					this.OnShiftIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceCategoryID", DbType="Int")]
		public System.Nullable<int> ServiceCategoryID
		{
			get
			{
				return this._ServiceCategoryID;
			}
			set
			{
				if ((this._ServiceCategoryID != value))
				{
					if (this._ServiceCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceCategoryID = value;
					this.SendPropertyChanged("ServiceCategoryID");
					this.OnServiceCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int")]
		public System.Nullable<int> Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromDate", DbType="NVarChar(10)")]
		public string FromDate
		{
			get
			{
				return this._FromDate;
			}
			set
			{
				if ((this._FromDate != value))
				{
					this.OnFromDateChanging(value);
					this.SendPropertyChanging();
					this._FromDate = value;
					this.SendPropertyChanged("FromDate");
					this.OnFromDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToDate", DbType="NVarChar(10)")]
		public string ToDate
		{
			get
			{
				return this._ToDate;
			}
			set
			{
				if ((this._ToDate != value))
				{
					this.OnToDateChanging(value);
					this.SendPropertyChanging();
					this._ToDate = value;
					this.SendPropertyChanged("ToDate");
					this.OnToDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromClock", DbType="NVarChar(8)")]
		public string FromClock
		{
			get
			{
				return this._FromClock;
			}
			set
			{
				if ((this._FromClock != value))
				{
					this.OnFromClockChanging(value);
					this.SendPropertyChanging();
					this._FromClock = value;
					this.SendPropertyChanged("FromClock");
					this.OnFromClockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToClock", DbType="NVarChar(8)")]
		public string ToClock
		{
			get
			{
				return this._ToClock;
			}
			set
			{
				if ((this._ToClock != value))
				{
					this.OnToClockChanging(value);
					this.SendPropertyChanging();
					this._ToClock = value;
					this.SendPropertyChanged("ToClock");
					this.OnToClockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shanbeh", DbType="Bit")]
		public System.Nullable<bool> Shanbeh
		{
			get
			{
				return this._Shanbeh;
			}
			set
			{
				if ((this._Shanbeh != value))
				{
					this.OnShanbehChanging(value);
					this.SendPropertyChanging();
					this._Shanbeh = value;
					this.SendPropertyChanged("Shanbeh");
					this.OnShanbehChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YekShanbeh", DbType="Bit")]
		public System.Nullable<bool> YekShanbeh
		{
			get
			{
				return this._YekShanbeh;
			}
			set
			{
				if ((this._YekShanbeh != value))
				{
					this.OnYekShanbehChanging(value);
					this.SendPropertyChanging();
					this._YekShanbeh = value;
					this.SendPropertyChanged("YekShanbeh");
					this.OnYekShanbehChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoShanbeh", DbType="Bit")]
		public System.Nullable<bool> DoShanbeh
		{
			get
			{
				return this._DoShanbeh;
			}
			set
			{
				if ((this._DoShanbeh != value))
				{
					this.OnDoShanbehChanging(value);
					this.SendPropertyChanging();
					this._DoShanbeh = value;
					this.SendPropertyChanged("DoShanbeh");
					this.OnDoShanbehChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeShanbeh", DbType="Bit")]
		public System.Nullable<bool> SeShanbeh
		{
			get
			{
				return this._SeShanbeh;
			}
			set
			{
				if ((this._SeShanbeh != value))
				{
					this.OnSeShanbehChanging(value);
					this.SendPropertyChanging();
					this._SeShanbeh = value;
					this.SendPropertyChanged("SeShanbeh");
					this.OnSeShanbehChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChaharShanbeh", DbType="Bit")]
		public System.Nullable<bool> ChaharShanbeh
		{
			get
			{
				return this._ChaharShanbeh;
			}
			set
			{
				if ((this._ChaharShanbeh != value))
				{
					this.OnChaharShanbehChanging(value);
					this.SendPropertyChanging();
					this._ChaharShanbeh = value;
					this.SendPropertyChanged("ChaharShanbeh");
					this.OnChaharShanbehChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PanjShanbeh", DbType="Bit")]
		public System.Nullable<bool> PanjShanbeh
		{
			get
			{
				return this._PanjShanbeh;
			}
			set
			{
				if ((this._PanjShanbeh != value))
				{
					this.OnPanjShanbehChanging(value);
					this.SendPropertyChanging();
					this._PanjShanbeh = value;
					this.SendPropertyChanged("PanjShanbeh");
					this.OnPanjShanbehChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Jomeh", DbType="Bit")]
		public System.Nullable<bool> Jomeh
		{
			get
			{
				return this._Jomeh;
			}
			set
			{
				if ((this._Jomeh != value))
				{
					this.OnJomehChanging(value);
					this.SendPropertyChanging();
					this._Jomeh = value;
					this.SendPropertyChanged("Jomeh");
					this.OnJomehChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PeriodicCalender_Agenda", Storage="_Agendas", ThisKey="ID", OtherKey="PeriodicCalenderID")]
		public EntitySet<Agenda> Agendas
		{
			get
			{
				return this._Agendas;
			}
			set
			{
				this._Agendas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PeriodicCalender_GivenServiceM", Storage="_GivenServiceMs", ThisKey="ID", OtherKey="PeriodicCalendeID")]
		public EntitySet<GivenServiceM> GivenServiceMs
		{
			get
			{
				return this._GivenServiceMs;
			}
			set
			{
				this._GivenServiceMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Definition_PeriodicCalender", Storage="_Definition", ThisKey="ShiftID", OtherKey="ID", IsForeignKey=true)]
		public Definition Definition
		{
			get
			{
				return this._Definition.Entity;
			}
			set
			{
				Definition previousValue = this._Definition.Entity;
				if (((previousValue != value) 
							|| (this._Definition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Definition.Entity = null;
						previousValue.PeriodicCalenders.Remove(this);
					}
					this._Definition.Entity = value;
					if ((value != null))
					{
						value.PeriodicCalenders.Add(this);
						this._ShiftID = value.ID;
					}
					else
					{
						this._ShiftID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Definition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceCategory_PeriodicCalender", Storage="_ServiceCategory", ThisKey="ServiceCategoryID", OtherKey="ID", IsForeignKey=true)]
		public ServiceCategory ServiceCategory
		{
			get
			{
				return this._ServiceCategory.Entity;
			}
			set
			{
				ServiceCategory previousValue = this._ServiceCategory.Entity;
				if (((previousValue != value) 
							|| (this._ServiceCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceCategory.Entity = null;
						previousValue.PeriodicCalenders.Remove(this);
					}
					this._ServiceCategory.Entity = value;
					if ((value != null))
					{
						value.PeriodicCalenders.Add(this);
						this._ServiceCategoryID = value.ID;
					}
					else
					{
						this._ServiceCategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ServiceCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Agendas(Agenda entity)
		{
			this.SendPropertyChanging();
			entity.PeriodicCalender = this;
		}
		
		private void detach_Agendas(Agenda entity)
		{
			this.SendPropertyChanging();
			entity.PeriodicCalender = null;
		}
		
		private void attach_GivenServiceMs(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.PeriodicCalender = this;
		}
		
		private void detach_GivenServiceMs(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.PeriodicCalender = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhysiotherapyOrderD")]
	public partial class PhysiotherapyOrderD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _PhysiotherapyOrderMID;
		
		private System.Nullable<System.Guid> _ServiceID;
		
		private string _Position;
		
		private string _Commnet;
		
		private System.Nullable<int> _LastModificator;
		
		private string _LastModificationDate;
		
		private string _LastModificationTime;
		
		private EntityRef<PhysiotherapyOrderM> _PhysiotherapyOrderM;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPhysiotherapyOrderMIDChanging(System.Nullable<System.Guid> value);
    partial void OnPhysiotherapyOrderMIDChanged();
    partial void OnServiceIDChanging(System.Nullable<System.Guid> value);
    partial void OnServiceIDChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnCommnetChanging(string value);
    partial void OnCommnetChanged();
    partial void OnLastModificatorChanging(System.Nullable<int> value);
    partial void OnLastModificatorChanged();
    partial void OnLastModificationDateChanging(string value);
    partial void OnLastModificationDateChanged();
    partial void OnLastModificationTimeChanging(string value);
    partial void OnLastModificationTimeChanged();
    #endregion
		
		public PhysiotherapyOrderD()
		{
			this._PhysiotherapyOrderM = default(EntityRef<PhysiotherapyOrderM>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysiotherapyOrderMID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PhysiotherapyOrderMID
		{
			get
			{
				return this._PhysiotherapyOrderMID;
			}
			set
			{
				if ((this._PhysiotherapyOrderMID != value))
				{
					if (this._PhysiotherapyOrderM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhysiotherapyOrderMIDChanging(value);
					this.SendPropertyChanging();
					this._PhysiotherapyOrderMID = value;
					this.SendPropertyChanged("PhysiotherapyOrderMID");
					this.OnPhysiotherapyOrderMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(50)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commnet", DbType="NVarChar(MAX)")]
		public string Commnet
		{
			get
			{
				return this._Commnet;
			}
			set
			{
				if ((this._Commnet != value))
				{
					this.OnCommnetChanging(value);
					this.SendPropertyChanging();
					this._Commnet = value;
					this.SendPropertyChanged("Commnet");
					this.OnCommnetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificator", DbType="Int")]
		public System.Nullable<int> LastModificator
		{
			get
			{
				return this._LastModificator;
			}
			set
			{
				if ((this._LastModificator != value))
				{
					this.OnLastModificatorChanging(value);
					this.SendPropertyChanging();
					this._LastModificator = value;
					this.SendPropertyChanged("LastModificator");
					this.OnLastModificatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificationDate", DbType="NVarChar(10)")]
		public string LastModificationDate
		{
			get
			{
				return this._LastModificationDate;
			}
			set
			{
				if ((this._LastModificationDate != value))
				{
					this.OnLastModificationDateChanging(value);
					this.SendPropertyChanging();
					this._LastModificationDate = value;
					this.SendPropertyChanged("LastModificationDate");
					this.OnLastModificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificationTime", DbType="NVarChar(8)")]
		public string LastModificationTime
		{
			get
			{
				return this._LastModificationTime;
			}
			set
			{
				if ((this._LastModificationTime != value))
				{
					this.OnLastModificationTimeChanging(value);
					this.SendPropertyChanging();
					this._LastModificationTime = value;
					this.SendPropertyChanged("LastModificationTime");
					this.OnLastModificationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhysiotherapyOrderM_PhysiotherapyOrderD", Storage="_PhysiotherapyOrderM", ThisKey="PhysiotherapyOrderMID", OtherKey="ID", IsForeignKey=true)]
		public PhysiotherapyOrderM PhysiotherapyOrderM
		{
			get
			{
				return this._PhysiotherapyOrderM.Entity;
			}
			set
			{
				PhysiotherapyOrderM previousValue = this._PhysiotherapyOrderM.Entity;
				if (((previousValue != value) 
							|| (this._PhysiotherapyOrderM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhysiotherapyOrderM.Entity = null;
						previousValue.PhysiotherapyOrderDs.Remove(this);
					}
					this._PhysiotherapyOrderM.Entity = value;
					if ((value != null))
					{
						value.PhysiotherapyOrderDs.Add(this);
						this._PhysiotherapyOrderMID = value.ID;
					}
					else
					{
						this._PhysiotherapyOrderMID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PhysiotherapyOrderM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_PhysiotherapyOrderD", Storage="_Service", ThisKey="ServiceID", OtherKey="ID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.PhysiotherapyOrderDs.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.PhysiotherapyOrderDs.Add(this);
						this._ServiceID = value.ID;
					}
					else
					{
						this._ServiceID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhysiotherapyOrderM")]
	public partial class PhysiotherapyOrderM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _PersonID;
		
		private System.Nullable<System.Guid> _RequestStaffID;
		
		private System.Nullable<int> _RequestedTime;
		
		private string _Date;
		
		private string _Time;
		
		private string _RequestDate;
		
		private string _RequestTime;
		
		private System.Nullable<int> _CreatorUserID;
		
		private string _CreationDate;
		
		private string _CreationTime;
		
		private System.Nullable<int> _LastModificator;
		
		private string _LastModificationDate;
		
		private string _LastModificationTime;
		
		private EntitySet<GivenServiceM> _GivenServiceMs;
		
		private EntitySet<PhysiotherapyOrderD> _PhysiotherapyOrderDs;
		
		private EntityRef<Staff> _Staff;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPersonIDChanging(System.Nullable<System.Guid> value);
    partial void OnPersonIDChanged();
    partial void OnRequestStaffIDChanging(System.Nullable<System.Guid> value);
    partial void OnRequestStaffIDChanged();
    partial void OnRequestedTimeChanging(System.Nullable<int> value);
    partial void OnRequestedTimeChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    partial void OnRequestDateChanging(string value);
    partial void OnRequestDateChanged();
    partial void OnRequestTimeChanging(string value);
    partial void OnRequestTimeChanged();
    partial void OnCreatorUserIDChanging(System.Nullable<int> value);
    partial void OnCreatorUserIDChanged();
    partial void OnCreationDateChanging(string value);
    partial void OnCreationDateChanged();
    partial void OnCreationTimeChanging(string value);
    partial void OnCreationTimeChanged();
    partial void OnLastModificatorChanging(System.Nullable<int> value);
    partial void OnLastModificatorChanged();
    partial void OnLastModificationDateChanging(string value);
    partial void OnLastModificationDateChanged();
    partial void OnLastModificationTimeChanging(string value);
    partial void OnLastModificationTimeChanged();
    #endregion
		
		public PhysiotherapyOrderM()
		{
			this._GivenServiceMs = new EntitySet<GivenServiceM>(new Action<GivenServiceM>(this.attach_GivenServiceMs), new Action<GivenServiceM>(this.detach_GivenServiceMs));
			this._PhysiotherapyOrderDs = new EntitySet<PhysiotherapyOrderD>(new Action<PhysiotherapyOrderD>(this.attach_PhysiotherapyOrderDs), new Action<PhysiotherapyOrderD>(this.detach_PhysiotherapyOrderDs));
			this._Staff = default(EntityRef<Staff>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestStaffID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RequestStaffID
		{
			get
			{
				return this._RequestStaffID;
			}
			set
			{
				if ((this._RequestStaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestStaffIDChanging(value);
					this.SendPropertyChanging();
					this._RequestStaffID = value;
					this.SendPropertyChanged("RequestStaffID");
					this.OnRequestStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestedTime", DbType="Int")]
		public System.Nullable<int> RequestedTime
		{
			get
			{
				return this._RequestedTime;
			}
			set
			{
				if ((this._RequestedTime != value))
				{
					this.OnRequestedTimeChanging(value);
					this.SendPropertyChanging();
					this._RequestedTime = value;
					this.SendPropertyChanged("RequestedTime");
					this.OnRequestedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NVarChar(10)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="NVarChar(8)")]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestDate", DbType="NVarChar(10)")]
		public string RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestTime", DbType="NVarChar(8)")]
		public string RequestTime
		{
			get
			{
				return this._RequestTime;
			}
			set
			{
				if ((this._RequestTime != value))
				{
					this.OnRequestTimeChanging(value);
					this.SendPropertyChanging();
					this._RequestTime = value;
					this.SendPropertyChanged("RequestTime");
					this.OnRequestTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorUserID", DbType="Int")]
		public System.Nullable<int> CreatorUserID
		{
			get
			{
				return this._CreatorUserID;
			}
			set
			{
				if ((this._CreatorUserID != value))
				{
					this.OnCreatorUserIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorUserID = value;
					this.SendPropertyChanged("CreatorUserID");
					this.OnCreatorUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="NVarChar(10)")]
		public string CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="NVarChar(8)")]
		public string CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificator", DbType="Int")]
		public System.Nullable<int> LastModificator
		{
			get
			{
				return this._LastModificator;
			}
			set
			{
				if ((this._LastModificator != value))
				{
					this.OnLastModificatorChanging(value);
					this.SendPropertyChanging();
					this._LastModificator = value;
					this.SendPropertyChanged("LastModificator");
					this.OnLastModificatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificationDate", DbType="NVarChar(10)")]
		public string LastModificationDate
		{
			get
			{
				return this._LastModificationDate;
			}
			set
			{
				if ((this._LastModificationDate != value))
				{
					this.OnLastModificationDateChanging(value);
					this.SendPropertyChanging();
					this._LastModificationDate = value;
					this.SendPropertyChanged("LastModificationDate");
					this.OnLastModificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificationTime", DbType="NVarChar(8)")]
		public string LastModificationTime
		{
			get
			{
				return this._LastModificationTime;
			}
			set
			{
				if ((this._LastModificationTime != value))
				{
					this.OnLastModificationTimeChanging(value);
					this.SendPropertyChanging();
					this._LastModificationTime = value;
					this.SendPropertyChanged("LastModificationTime");
					this.OnLastModificationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhysiotherapyOrderM_GivenServiceM", Storage="_GivenServiceMs", ThisKey="ID", OtherKey="PhysioOrderMID")]
		public EntitySet<GivenServiceM> GivenServiceMs
		{
			get
			{
				return this._GivenServiceMs;
			}
			set
			{
				this._GivenServiceMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhysiotherapyOrderM_PhysiotherapyOrderD", Storage="_PhysiotherapyOrderDs", ThisKey="ID", OtherKey="PhysiotherapyOrderMID")]
		public EntitySet<PhysiotherapyOrderD> PhysiotherapyOrderDs
		{
			get
			{
				return this._PhysiotherapyOrderDs;
			}
			set
			{
				this._PhysiotherapyOrderDs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_PhysiotherapyOrderM", Storage="_Staff", ThisKey="RequestStaffID", OtherKey="ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.PhysiotherapyOrderMs.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.PhysiotherapyOrderMs.Add(this);
						this._RequestStaffID = value.ID;
					}
					else
					{
						this._RequestStaffID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PhysiotherapyOrderM", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PhysiotherapyOrderMs.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PhysiotherapyOrderMs.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GivenServiceMs(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.PhysiotherapyOrderM = this;
		}
		
		private void detach_GivenServiceMs(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.PhysiotherapyOrderM = null;
		}
		
		private void attach_PhysiotherapyOrderDs(PhysiotherapyOrderD entity)
		{
			this.SendPropertyChanging();
			entity.PhysiotherapyOrderM = this;
		}
		
		private void detach_PhysiotherapyOrderDs(PhysiotherapyOrderD entity)
		{
			this.SendPropertyChanging();
			entity.PhysiotherapyOrderM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QualitativePoints")]
	public partial class QualitativePoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _StaffID;
		
		private string _Date;
		
		private System.Nullable<int> _Education;
		
		private System.Nullable<int> _WorkExperience;
		
		private System.Nullable<int> _PhysicalPresence;
		
		private System.Nullable<int> _ResponsibleTheory;
		
		private System.Nullable<int> _WorkQuality;
		
		private System.Nullable<double> _TotalPoint;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnStaffIDChanging(System.Guid value);
    partial void OnStaffIDChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnEducationChanging(System.Nullable<int> value);
    partial void OnEducationChanged();
    partial void OnWorkExperienceChanging(System.Nullable<int> value);
    partial void OnWorkExperienceChanged();
    partial void OnPhysicalPresenceChanging(System.Nullable<int> value);
    partial void OnPhysicalPresenceChanged();
    partial void OnResponsibleTheoryChanging(System.Nullable<int> value);
    partial void OnResponsibleTheoryChanged();
    partial void OnWorkQualityChanging(System.Nullable<int> value);
    partial void OnWorkQualityChanged();
    partial void OnTotalPointChanging(System.Nullable<double> value);
    partial void OnTotalPointChanged();
    #endregion
		
		public QualitativePoint()
		{
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NVarChar(10)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Education", DbType="Int")]
		public System.Nullable<int> Education
		{
			get
			{
				return this._Education;
			}
			set
			{
				if ((this._Education != value))
				{
					this.OnEducationChanging(value);
					this.SendPropertyChanging();
					this._Education = value;
					this.SendPropertyChanged("Education");
					this.OnEducationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkExperience", DbType="Int")]
		public System.Nullable<int> WorkExperience
		{
			get
			{
				return this._WorkExperience;
			}
			set
			{
				if ((this._WorkExperience != value))
				{
					this.OnWorkExperienceChanging(value);
					this.SendPropertyChanging();
					this._WorkExperience = value;
					this.SendPropertyChanged("WorkExperience");
					this.OnWorkExperienceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalPresence", DbType="Int")]
		public System.Nullable<int> PhysicalPresence
		{
			get
			{
				return this._PhysicalPresence;
			}
			set
			{
				if ((this._PhysicalPresence != value))
				{
					this.OnPhysicalPresenceChanging(value);
					this.SendPropertyChanging();
					this._PhysicalPresence = value;
					this.SendPropertyChanged("PhysicalPresence");
					this.OnPhysicalPresenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponsibleTheory", DbType="Int")]
		public System.Nullable<int> ResponsibleTheory
		{
			get
			{
				return this._ResponsibleTheory;
			}
			set
			{
				if ((this._ResponsibleTheory != value))
				{
					this.OnResponsibleTheoryChanging(value);
					this.SendPropertyChanging();
					this._ResponsibleTheory = value;
					this.SendPropertyChanged("ResponsibleTheory");
					this.OnResponsibleTheoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkQuality", DbType="Int")]
		public System.Nullable<int> WorkQuality
		{
			get
			{
				return this._WorkQuality;
			}
			set
			{
				if ((this._WorkQuality != value))
				{
					this.OnWorkQualityChanging(value);
					this.SendPropertyChanging();
					this._WorkQuality = value;
					this.SendPropertyChanged("WorkQuality");
					this.OnWorkQualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPoint", DbType="Float")]
		public System.Nullable<double> TotalPoint
		{
			get
			{
				return this._TotalPoint;
			}
			set
			{
				if ((this._TotalPoint != value))
				{
					this.OnTotalPointChanging(value);
					this.SendPropertyChanging();
					this._TotalPoint = value;
					this.SendPropertyChanged("TotalPoint");
					this.OnTotalPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_QualitativePoint", Storage="_Staff", ThisKey="StaffID", OtherKey="ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.QualitativePoints.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.QualitativePoints.Add(this);
						this._StaffID = value.ID;
					}
					else
					{
						this._StaffID = default(System.Guid);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reference")]
	public partial class Reference : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _GivenServiceMID;
		
		private System.Nullable<int> _SpecialityID;
		
		private System.Nullable<System.Guid> _StaffID;
		
		private string _SuggestedDate;
		
		private System.Nullable<int> _CreatorUserID;
		
		private string _CreationTime;
		
		private string _CreationDate;
		
		private System.Nullable<int> _LastModificator;
		
		private string _LastModificationDate;
		
		private string _LastModificationTime;
		
		private EntityRef<GivenServiceM> _GivenServiceM;
		
		private EntityRef<Speciality> _Speciality;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnGivenServiceMIDChanging(System.Nullable<System.Guid> value);
    partial void OnGivenServiceMIDChanged();
    partial void OnSpecialityIDChanging(System.Nullable<int> value);
    partial void OnSpecialityIDChanged();
    partial void OnStaffIDChanging(System.Nullable<System.Guid> value);
    partial void OnStaffIDChanged();
    partial void OnSuggestedDateChanging(string value);
    partial void OnSuggestedDateChanged();
    partial void OnCreatorUserIDChanging(System.Nullable<int> value);
    partial void OnCreatorUserIDChanged();
    partial void OnCreationTimeChanging(string value);
    partial void OnCreationTimeChanged();
    partial void OnCreationDateChanging(string value);
    partial void OnCreationDateChanged();
    partial void OnLastModificatorChanging(System.Nullable<int> value);
    partial void OnLastModificatorChanged();
    partial void OnLastModificationDateChanging(string value);
    partial void OnLastModificationDateChanged();
    partial void OnLastModificationTimeChanging(string value);
    partial void OnLastModificationTimeChanged();
    #endregion
		
		public Reference()
		{
			this._GivenServiceM = default(EntityRef<GivenServiceM>);
			this._Speciality = default(EntityRef<Speciality>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GivenServiceMID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> GivenServiceMID
		{
			get
			{
				return this._GivenServiceMID;
			}
			set
			{
				if ((this._GivenServiceMID != value))
				{
					if (this._GivenServiceM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGivenServiceMIDChanging(value);
					this.SendPropertyChanging();
					this._GivenServiceMID = value;
					this.SendPropertyChanged("GivenServiceMID");
					this.OnGivenServiceMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityID", DbType="Int")]
		public System.Nullable<int> SpecialityID
		{
			get
			{
				return this._SpecialityID;
			}
			set
			{
				if ((this._SpecialityID != value))
				{
					if (this._Speciality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityIDChanging(value);
					this.SendPropertyChanging();
					this._SpecialityID = value;
					this.SendPropertyChanged("SpecialityID");
					this.OnSpecialityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuggestedDate", DbType="NVarChar(10)")]
		public string SuggestedDate
		{
			get
			{
				return this._SuggestedDate;
			}
			set
			{
				if ((this._SuggestedDate != value))
				{
					this.OnSuggestedDateChanging(value);
					this.SendPropertyChanging();
					this._SuggestedDate = value;
					this.SendPropertyChanged("SuggestedDate");
					this.OnSuggestedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorUserID", DbType="Int")]
		public System.Nullable<int> CreatorUserID
		{
			get
			{
				return this._CreatorUserID;
			}
			set
			{
				if ((this._CreatorUserID != value))
				{
					this.OnCreatorUserIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorUserID = value;
					this.SendPropertyChanged("CreatorUserID");
					this.OnCreatorUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="NVarChar(8)")]
		public string CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="NVarChar(10)")]
		public string CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificator", DbType="Int")]
		public System.Nullable<int> LastModificator
		{
			get
			{
				return this._LastModificator;
			}
			set
			{
				if ((this._LastModificator != value))
				{
					this.OnLastModificatorChanging(value);
					this.SendPropertyChanging();
					this._LastModificator = value;
					this.SendPropertyChanged("LastModificator");
					this.OnLastModificatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificationDate", DbType="NVarChar(10)")]
		public string LastModificationDate
		{
			get
			{
				return this._LastModificationDate;
			}
			set
			{
				if ((this._LastModificationDate != value))
				{
					this.OnLastModificationDateChanging(value);
					this.SendPropertyChanging();
					this._LastModificationDate = value;
					this.SendPropertyChanged("LastModificationDate");
					this.OnLastModificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificationTime", DbType="NVarChar(8)")]
		public string LastModificationTime
		{
			get
			{
				return this._LastModificationTime;
			}
			set
			{
				if ((this._LastModificationTime != value))
				{
					this.OnLastModificationTimeChanging(value);
					this.SendPropertyChanging();
					this._LastModificationTime = value;
					this.SendPropertyChanged("LastModificationTime");
					this.OnLastModificationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GivenServiceM_Reference", Storage="_GivenServiceM", ThisKey="GivenServiceMID", OtherKey="ID", IsForeignKey=true)]
		public GivenServiceM GivenServiceM
		{
			get
			{
				return this._GivenServiceM.Entity;
			}
			set
			{
				GivenServiceM previousValue = this._GivenServiceM.Entity;
				if (((previousValue != value) 
							|| (this._GivenServiceM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GivenServiceM.Entity = null;
						previousValue.References.Remove(this);
					}
					this._GivenServiceM.Entity = value;
					if ((value != null))
					{
						value.References.Add(this);
						this._GivenServiceMID = value.ID;
					}
					else
					{
						this._GivenServiceMID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("GivenServiceM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_Reference", Storage="_Speciality", ThisKey="SpecialityID", OtherKey="ID", IsForeignKey=true)]
		public Speciality Speciality
		{
			get
			{
				return this._Speciality.Entity;
			}
			set
			{
				Speciality previousValue = this._Speciality.Entity;
				if (((previousValue != value) 
							|| (this._Speciality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speciality.Entity = null;
						previousValue.References.Remove(this);
					}
					this._Speciality.Entity = value;
					if ((value != null))
					{
						value.References.Add(this);
						this._SpecialityID = value.ID;
					}
					else
					{
						this._SpecialityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Speciality");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Reference", Storage="_Staff", ThisKey="StaffID", OtherKey="ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.References.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.References.Add(this);
						this._StaffID = value.ID;
					}
					else
					{
						this._StaffID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RVU")]
	public partial class RVU : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Dastgah;
		
		private string _Sarfasl_Khedmati;
		
		private string _Gorooh_Khedmati;
		
		private string _Khosoosiat_Code;
		
		private System.Nullable<double> _Code_Melli;
		
		private System.Nullable<double> _Code_Namayande;
		
		private System.Nullable<double> _Sayer_Codaye_Tajmi_Shode;
		
		private string _Sharhe_Codaye_Tajmi_Shode;
		
		private System.Nullable<double> _Arzesh_Nesbi;
		
		private System.Nullable<double> _Joze_Herfeyi_26;
		
		private System.Nullable<double> _Joze_Fanni_27;
		
		private System.Nullable<double> _Arzesh_Paye_Bihooshi;
		
		private string _NationalID;
		
		private string _Comment;
		
		private System.Nullable<double> _RelativeValue;
		
		private string _CreationDate;
		
		private string _CreationTime;
		
		private string _LastModificationDate;
		
		private string _LastModificationTime;
		
		private System.Nullable<double> _Version;
		
		private bool _Deleted;
		
		private string _TerminologyId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnDastgahChanging(string value);
    partial void OnDastgahChanged();
    partial void OnSarfasl_KhedmatiChanging(string value);
    partial void OnSarfasl_KhedmatiChanged();
    partial void OnGorooh_KhedmatiChanging(string value);
    partial void OnGorooh_KhedmatiChanged();
    partial void OnKhosoosiat_CodeChanging(string value);
    partial void OnKhosoosiat_CodeChanged();
    partial void OnCode_MelliChanging(System.Nullable<double> value);
    partial void OnCode_MelliChanged();
    partial void OnCode_NamayandeChanging(System.Nullable<double> value);
    partial void OnCode_NamayandeChanged();
    partial void OnSayer_Codaye_Tajmi_ShodeChanging(System.Nullable<double> value);
    partial void OnSayer_Codaye_Tajmi_ShodeChanged();
    partial void OnSharhe_Codaye_Tajmi_ShodeChanging(string value);
    partial void OnSharhe_Codaye_Tajmi_ShodeChanged();
    partial void OnArzesh_NesbiChanging(System.Nullable<double> value);
    partial void OnArzesh_NesbiChanged();
    partial void OnJoze_Herfeyi_26Changing(System.Nullable<double> value);
    partial void OnJoze_Herfeyi_26Changed();
    partial void OnJoze_Fanni_27Changing(System.Nullable<double> value);
    partial void OnJoze_Fanni_27Changed();
    partial void OnArzesh_Paye_BihooshiChanging(System.Nullable<double> value);
    partial void OnArzesh_Paye_BihooshiChanged();
    partial void OnNationalIDChanging(string value);
    partial void OnNationalIDChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnRelativeValueChanging(System.Nullable<double> value);
    partial void OnRelativeValueChanged();
    partial void OnCreationDateChanging(string value);
    partial void OnCreationDateChanged();
    partial void OnCreationTimeChanging(string value);
    partial void OnCreationTimeChanged();
    partial void OnLastModificationDateChanging(string value);
    partial void OnLastModificationDateChanged();
    partial void OnLastModificationTimeChanging(string value);
    partial void OnLastModificationTimeChanged();
    partial void OnVersionChanging(System.Nullable<double> value);
    partial void OnVersionChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnTerminologyIdChanging(string value);
    partial void OnTerminologyIdChanged();
    #endregion
		
		public RVU()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dastgah", DbType="NVarChar(255)")]
		public string Dastgah
		{
			get
			{
				return this._Dastgah;
			}
			set
			{
				if ((this._Dastgah != value))
				{
					this.OnDastgahChanging(value);
					this.SendPropertyChanging();
					this._Dastgah = value;
					this.SendPropertyChanged("Dastgah");
					this.OnDastgahChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sarfasl_Khedmati", DbType="NVarChar(255)")]
		public string Sarfasl_Khedmati
		{
			get
			{
				return this._Sarfasl_Khedmati;
			}
			set
			{
				if ((this._Sarfasl_Khedmati != value))
				{
					this.OnSarfasl_KhedmatiChanging(value);
					this.SendPropertyChanging();
					this._Sarfasl_Khedmati = value;
					this.SendPropertyChanged("Sarfasl_Khedmati");
					this.OnSarfasl_KhedmatiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gorooh_Khedmati", DbType="NVarChar(255)")]
		public string Gorooh_Khedmati
		{
			get
			{
				return this._Gorooh_Khedmati;
			}
			set
			{
				if ((this._Gorooh_Khedmati != value))
				{
					this.OnGorooh_KhedmatiChanging(value);
					this.SendPropertyChanging();
					this._Gorooh_Khedmati = value;
					this.SendPropertyChanged("Gorooh_Khedmati");
					this.OnGorooh_KhedmatiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Khosoosiat_Code", DbType="NVarChar(255)")]
		public string Khosoosiat_Code
		{
			get
			{
				return this._Khosoosiat_Code;
			}
			set
			{
				if ((this._Khosoosiat_Code != value))
				{
					this.OnKhosoosiat_CodeChanging(value);
					this.SendPropertyChanging();
					this._Khosoosiat_Code = value;
					this.SendPropertyChanged("Khosoosiat_Code");
					this.OnKhosoosiat_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code_Melli", DbType="Float")]
		public System.Nullable<double> Code_Melli
		{
			get
			{
				return this._Code_Melli;
			}
			set
			{
				if ((this._Code_Melli != value))
				{
					this.OnCode_MelliChanging(value);
					this.SendPropertyChanging();
					this._Code_Melli = value;
					this.SendPropertyChanged("Code_Melli");
					this.OnCode_MelliChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code_Namayande", DbType="Float")]
		public System.Nullable<double> Code_Namayande
		{
			get
			{
				return this._Code_Namayande;
			}
			set
			{
				if ((this._Code_Namayande != value))
				{
					this.OnCode_NamayandeChanging(value);
					this.SendPropertyChanging();
					this._Code_Namayande = value;
					this.SendPropertyChanged("Code_Namayande");
					this.OnCode_NamayandeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sayer_Codaye_Tajmi_Shode", DbType="Float")]
		public System.Nullable<double> Sayer_Codaye_Tajmi_Shode
		{
			get
			{
				return this._Sayer_Codaye_Tajmi_Shode;
			}
			set
			{
				if ((this._Sayer_Codaye_Tajmi_Shode != value))
				{
					this.OnSayer_Codaye_Tajmi_ShodeChanging(value);
					this.SendPropertyChanging();
					this._Sayer_Codaye_Tajmi_Shode = value;
					this.SendPropertyChanged("Sayer_Codaye_Tajmi_Shode");
					this.OnSayer_Codaye_Tajmi_ShodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sharhe_Codaye_Tajmi_Shode", DbType="NVarChar(MAX)")]
		public string Sharhe_Codaye_Tajmi_Shode
		{
			get
			{
				return this._Sharhe_Codaye_Tajmi_Shode;
			}
			set
			{
				if ((this._Sharhe_Codaye_Tajmi_Shode != value))
				{
					this.OnSharhe_Codaye_Tajmi_ShodeChanging(value);
					this.SendPropertyChanging();
					this._Sharhe_Codaye_Tajmi_Shode = value;
					this.SendPropertyChanged("Sharhe_Codaye_Tajmi_Shode");
					this.OnSharhe_Codaye_Tajmi_ShodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Arzesh_Nesbi", DbType="Float")]
		public System.Nullable<double> Arzesh_Nesbi
		{
			get
			{
				return this._Arzesh_Nesbi;
			}
			set
			{
				if ((this._Arzesh_Nesbi != value))
				{
					this.OnArzesh_NesbiChanging(value);
					this.SendPropertyChanging();
					this._Arzesh_Nesbi = value;
					this.SendPropertyChanged("Arzesh_Nesbi");
					this.OnArzesh_NesbiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Joze_Herfeyi_26", DbType="Float")]
		public System.Nullable<double> Joze_Herfeyi_26
		{
			get
			{
				return this._Joze_Herfeyi_26;
			}
			set
			{
				if ((this._Joze_Herfeyi_26 != value))
				{
					this.OnJoze_Herfeyi_26Changing(value);
					this.SendPropertyChanging();
					this._Joze_Herfeyi_26 = value;
					this.SendPropertyChanged("Joze_Herfeyi_26");
					this.OnJoze_Herfeyi_26Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Joze_Fanni_27", DbType="Float")]
		public System.Nullable<double> Joze_Fanni_27
		{
			get
			{
				return this._Joze_Fanni_27;
			}
			set
			{
				if ((this._Joze_Fanni_27 != value))
				{
					this.OnJoze_Fanni_27Changing(value);
					this.SendPropertyChanging();
					this._Joze_Fanni_27 = value;
					this.SendPropertyChanged("Joze_Fanni_27");
					this.OnJoze_Fanni_27Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Arzesh_Paye_Bihooshi", DbType="Float")]
		public System.Nullable<double> Arzesh_Paye_Bihooshi
		{
			get
			{
				return this._Arzesh_Paye_Bihooshi;
			}
			set
			{
				if ((this._Arzesh_Paye_Bihooshi != value))
				{
					this.OnArzesh_Paye_BihooshiChanging(value);
					this.SendPropertyChanging();
					this._Arzesh_Paye_Bihooshi = value;
					this.SendPropertyChanged("Arzesh_Paye_Bihooshi");
					this.OnArzesh_Paye_BihooshiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalID", DbType="NVarChar(15)")]
		public string NationalID
		{
			get
			{
				return this._NationalID;
			}
			set
			{
				if ((this._NationalID != value))
				{
					this.OnNationalIDChanging(value);
					this.SendPropertyChanging();
					this._NationalID = value;
					this.SendPropertyChanged("NationalID");
					this.OnNationalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(255)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelativeValue", DbType="Float")]
		public System.Nullable<double> RelativeValue
		{
			get
			{
				return this._RelativeValue;
			}
			set
			{
				if ((this._RelativeValue != value))
				{
					this.OnRelativeValueChanging(value);
					this.SendPropertyChanging();
					this._RelativeValue = value;
					this.SendPropertyChanged("RelativeValue");
					this.OnRelativeValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="NVarChar(10)")]
		public string CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="NVarChar(5)")]
		public string CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificationDate", DbType="NVarChar(10)")]
		public string LastModificationDate
		{
			get
			{
				return this._LastModificationDate;
			}
			set
			{
				if ((this._LastModificationDate != value))
				{
					this.OnLastModificationDateChanging(value);
					this.SendPropertyChanging();
					this._LastModificationDate = value;
					this.SendPropertyChanged("LastModificationDate");
					this.OnLastModificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificationTime", DbType="NVarChar(5)")]
		public string LastModificationTime
		{
			get
			{
				return this._LastModificationTime;
			}
			set
			{
				if ((this._LastModificationTime != value))
				{
					this.OnLastModificationTimeChanging(value);
					this.SendPropertyChanging();
					this._LastModificationTime = value;
					this.SendPropertyChanged("LastModificationTime");
					this.OnLastModificationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Float")]
		public System.Nullable<double> Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TerminologyId", DbType="NVarChar(255)")]
		public string TerminologyId
		{
			get
			{
				return this._TerminologyId;
			}
			set
			{
				if ((this._TerminologyId != value))
				{
					this.OnTerminologyIdChanging(value);
					this.SendPropertyChanging();
					this._TerminologyId = value;
					this.SendPropertyChanged("TerminologyId");
					this.OnTerminologyIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SampleAnswer")]
	public partial class SampleAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _GroupServiceID;
		
		private string _Title;
		
		private string _Description;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnGroupServiceIDChanging(System.Nullable<System.Guid> value);
    partial void OnGroupServiceIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SampleAnswer()
		{
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupServiceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> GroupServiceID
		{
			get
			{
				return this._GroupServiceID;
			}
			set
			{
				if ((this._GroupServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupServiceIDChanging(value);
					this.SendPropertyChanging();
					this._GroupServiceID = value;
					this.SendPropertyChanged("GroupServiceID");
					this.OnGroupServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_SampleAnswer", Storage="_Service", ThisKey="GroupServiceID", OtherKey="ID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.SampleAnswers.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.SampleAnswers.Add(this);
						this._GroupServiceID = value.ID;
					}
					else
					{
						this._GroupServiceID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<int> _CategoryID;
		
		private string _Name;
		
		private string _Name_En;
		
		private string _CaliforniaCode;
		
		private string _SalamatBookletCode;
		
		private System.Nullable<System.Guid> _ParentID;
		
		private string _Shape;
		
		private EntitySet<Agenda> _Agendas;
		
		private EntityRef<DiagnosticServiceDetail> _DiagnosticServiceDetail;
		
		private EntitySet<DoctorContract> _DoctorContracts;
		
		private EntitySet<FavoriteService> _FavoriteServices;
		
		private EntitySet<GivenServiceD> _GivenServiceDs;
		
		private EntityRef<LaboratoryServiceDetail> _LaboratoryServiceDetail;
		
		private EntitySet<PhysiotherapyOrderD> _PhysiotherapyOrderDs;
		
		private EntitySet<SampleAnswer> _SampleAnswers;
		
		private EntitySet<Service> _Services;
		
		private EntitySet<Tariff> _Tariffs;
		
		private EntityRef<Service> _Service1;
		
		private EntityRef<ServiceCategory> _ServiceCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnName_EnChanging(string value);
    partial void OnName_EnChanged();
    partial void OnCaliforniaCodeChanging(string value);
    partial void OnCaliforniaCodeChanged();
    partial void OnSalamatBookletCodeChanging(string value);
    partial void OnSalamatBookletCodeChanged();
    partial void OnParentIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentIDChanged();
    partial void OnShapeChanging(string value);
    partial void OnShapeChanged();
    #endregion
		
		public Service()
		{
			this._Agendas = new EntitySet<Agenda>(new Action<Agenda>(this.attach_Agendas), new Action<Agenda>(this.detach_Agendas));
			this._DiagnosticServiceDetail = default(EntityRef<DiagnosticServiceDetail>);
			this._DoctorContracts = new EntitySet<DoctorContract>(new Action<DoctorContract>(this.attach_DoctorContracts), new Action<DoctorContract>(this.detach_DoctorContracts));
			this._FavoriteServices = new EntitySet<FavoriteService>(new Action<FavoriteService>(this.attach_FavoriteServices), new Action<FavoriteService>(this.detach_FavoriteServices));
			this._GivenServiceDs = new EntitySet<GivenServiceD>(new Action<GivenServiceD>(this.attach_GivenServiceDs), new Action<GivenServiceD>(this.detach_GivenServiceDs));
			this._LaboratoryServiceDetail = default(EntityRef<LaboratoryServiceDetail>);
			this._PhysiotherapyOrderDs = new EntitySet<PhysiotherapyOrderD>(new Action<PhysiotherapyOrderD>(this.attach_PhysiotherapyOrderDs), new Action<PhysiotherapyOrderD>(this.detach_PhysiotherapyOrderDs));
			this._SampleAnswers = new EntitySet<SampleAnswer>(new Action<SampleAnswer>(this.attach_SampleAnswers), new Action<SampleAnswer>(this.detach_SampleAnswers));
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			this._Tariffs = new EntitySet<Tariff>(new Action<Tariff>(this.attach_Tariffs), new Action<Tariff>(this.detach_Tariffs));
			this._Service1 = default(EntityRef<Service>);
			this._ServiceCategory = default(EntityRef<ServiceCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int")]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._ServiceCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name_En", DbType="NVarChar(MAX)")]
		public string Name_En
		{
			get
			{
				return this._Name_En;
			}
			set
			{
				if ((this._Name_En != value))
				{
					this.OnName_EnChanging(value);
					this.SendPropertyChanging();
					this._Name_En = value;
					this.SendPropertyChanged("Name_En");
					this.OnName_EnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaliforniaCode", DbType="NVarChar(50)")]
		public string CaliforniaCode
		{
			get
			{
				return this._CaliforniaCode;
			}
			set
			{
				if ((this._CaliforniaCode != value))
				{
					this.OnCaliforniaCodeChanging(value);
					this.SendPropertyChanging();
					this._CaliforniaCode = value;
					this.SendPropertyChanged("CaliforniaCode");
					this.OnCaliforniaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalamatBookletCode", DbType="NVarChar(50)")]
		public string SalamatBookletCode
		{
			get
			{
				return this._SalamatBookletCode;
			}
			set
			{
				if ((this._SalamatBookletCode != value))
				{
					this.OnSalamatBookletCodeChanging(value);
					this.SendPropertyChanging();
					this._SalamatBookletCode = value;
					this.SendPropertyChanged("SalamatBookletCode");
					this.OnSalamatBookletCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Service1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shape", DbType="NVarChar(50)")]
		public string Shape
		{
			get
			{
				return this._Shape;
			}
			set
			{
				if ((this._Shape != value))
				{
					this.OnShapeChanging(value);
					this.SendPropertyChanging();
					this._Shape = value;
					this.SendPropertyChanged("Shape");
					this.OnShapeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Agenda", Storage="_Agendas", ThisKey="ID", OtherKey="ServiceID")]
		public EntitySet<Agenda> Agendas
		{
			get
			{
				return this._Agendas;
			}
			set
			{
				this._Agendas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_DiagnosticServiceDetail", Storage="_DiagnosticServiceDetail", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public DiagnosticServiceDetail DiagnosticServiceDetail
		{
			get
			{
				return this._DiagnosticServiceDetail.Entity;
			}
			set
			{
				DiagnosticServiceDetail previousValue = this._DiagnosticServiceDetail.Entity;
				if (((previousValue != value) 
							|| (this._DiagnosticServiceDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DiagnosticServiceDetail.Entity = null;
						previousValue.Service = null;
					}
					this._DiagnosticServiceDetail.Entity = value;
					if ((value != null))
					{
						value.Service = this;
					}
					this.SendPropertyChanged("DiagnosticServiceDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_DoctorContract", Storage="_DoctorContracts", ThisKey="ID", OtherKey="ServiceID")]
		public EntitySet<DoctorContract> DoctorContracts
		{
			get
			{
				return this._DoctorContracts;
			}
			set
			{
				this._DoctorContracts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_FavoriteService", Storage="_FavoriteServices", ThisKey="ID", OtherKey="ServiceID")]
		public EntitySet<FavoriteService> FavoriteServices
		{
			get
			{
				return this._FavoriteServices;
			}
			set
			{
				this._FavoriteServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_GivenServiceD", Storage="_GivenServiceDs", ThisKey="ID", OtherKey="ServiceID")]
		public EntitySet<GivenServiceD> GivenServiceDs
		{
			get
			{
				return this._GivenServiceDs;
			}
			set
			{
				this._GivenServiceDs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_LaboratoryServiceDetail", Storage="_LaboratoryServiceDetail", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public LaboratoryServiceDetail LaboratoryServiceDetail
		{
			get
			{
				return this._LaboratoryServiceDetail.Entity;
			}
			set
			{
				LaboratoryServiceDetail previousValue = this._LaboratoryServiceDetail.Entity;
				if (((previousValue != value) 
							|| (this._LaboratoryServiceDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LaboratoryServiceDetail.Entity = null;
						previousValue.Service = null;
					}
					this._LaboratoryServiceDetail.Entity = value;
					if ((value != null))
					{
						value.Service = this;
					}
					this.SendPropertyChanged("LaboratoryServiceDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_PhysiotherapyOrderD", Storage="_PhysiotherapyOrderDs", ThisKey="ID", OtherKey="ServiceID")]
		public EntitySet<PhysiotherapyOrderD> PhysiotherapyOrderDs
		{
			get
			{
				return this._PhysiotherapyOrderDs;
			}
			set
			{
				this._PhysiotherapyOrderDs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_SampleAnswer", Storage="_SampleAnswers", ThisKey="ID", OtherKey="GroupServiceID")]
		public EntitySet<SampleAnswer> SampleAnswers
		{
			get
			{
				return this._SampleAnswers;
			}
			set
			{
				this._SampleAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Service", Storage="_Services", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Tariff", Storage="_Tariffs", ThisKey="ID", OtherKey="ServiceID")]
		public EntitySet<Tariff> Tariffs
		{
			get
			{
				return this._Tariffs;
			}
			set
			{
				this._Tariffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Service", Storage="_Service1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public Service Service1
		{
			get
			{
				return this._Service1.Entity;
			}
			set
			{
				Service previousValue = this._Service1.Entity;
				if (((previousValue != value) 
							|| (this._Service1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service1.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Service1.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Service1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceCategory_Service", Storage="_ServiceCategory", ThisKey="CategoryID", OtherKey="ID", IsForeignKey=true)]
		public ServiceCategory ServiceCategory
		{
			get
			{
				return this._ServiceCategory.Entity;
			}
			set
			{
				ServiceCategory previousValue = this._ServiceCategory.Entity;
				if (((previousValue != value) 
							|| (this._ServiceCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceCategory.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._ServiceCategory.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._CategoryID = value.ID;
					}
					else
					{
						this._CategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ServiceCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Agendas(Agenda entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Agendas(Agenda entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_DoctorContracts(DoctorContract entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_DoctorContracts(DoctorContract entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_FavoriteServices(FavoriteService entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_FavoriteServices(FavoriteService entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_GivenServiceDs(GivenServiceD entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_GivenServiceDs(GivenServiceD entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_PhysiotherapyOrderDs(PhysiotherapyOrderD entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_PhysiotherapyOrderDs(PhysiotherapyOrderD entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_SampleAnswers(SampleAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_SampleAnswers(SampleAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Service1 = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Service1 = null;
		}
		
		private void attach_Tariffs(Tariff entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Tariffs(Tariff entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceCategory")]
	public partial class ServiceCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<GivenServiceM> _GivenServiceMs;
		
		private EntitySet<PeriodicCalender> _PeriodicCalenders;
		
		private EntitySet<Service> _Services;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ServiceCategory()
		{
			this._GivenServiceMs = new EntitySet<GivenServiceM>(new Action<GivenServiceM>(this.attach_GivenServiceMs), new Action<GivenServiceM>(this.detach_GivenServiceMs));
			this._PeriodicCalenders = new EntitySet<PeriodicCalender>(new Action<PeriodicCalender>(this.attach_PeriodicCalenders), new Action<PeriodicCalender>(this.detach_PeriodicCalenders));
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceCategory_GivenServiceM", Storage="_GivenServiceMs", ThisKey="ID", OtherKey="ServiceCategoryID")]
		public EntitySet<GivenServiceM> GivenServiceMs
		{
			get
			{
				return this._GivenServiceMs;
			}
			set
			{
				this._GivenServiceMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceCategory_PeriodicCalender", Storage="_PeriodicCalenders", ThisKey="ID", OtherKey="ServiceCategoryID")]
		public EntitySet<PeriodicCalender> PeriodicCalenders
		{
			get
			{
				return this._PeriodicCalenders;
			}
			set
			{
				this._PeriodicCalenders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceCategory_Service", Storage="_Services", ThisKey="ID", OtherKey="CategoryID")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GivenServiceMs(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.ServiceCategory = this;
		}
		
		private void detach_GivenServiceMs(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.ServiceCategory = null;
		}
		
		private void attach_PeriodicCalenders(PeriodicCalender entity)
		{
			this.SendPropertyChanging();
			entity.ServiceCategory = this;
		}
		
		private void detach_PeriodicCalenders(PeriodicCalender entity)
		{
			this.SendPropertyChanging();
			entity.ServiceCategory = null;
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.ServiceCategory = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.ServiceCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Speciality")]
	public partial class Speciality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Speciality1;
		
		private EntitySet<Reference> _References;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSpeciality1Changing(string value);
    partial void OnSpeciality1Changed();
    #endregion
		
		public Speciality()
		{
			this._References = new EntitySet<Reference>(new Action<Reference>(this.attach_References), new Action<Reference>(this.detach_References));
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Speciality", Storage="_Speciality1", DbType="NVarChar(50)")]
		public string Speciality1
		{
			get
			{
				return this._Speciality1;
			}
			set
			{
				if ((this._Speciality1 != value))
				{
					this.OnSpeciality1Changing(value);
					this.SendPropertyChanging();
					this._Speciality1 = value;
					this.SendPropertyChanged("Speciality1");
					this.OnSpeciality1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_Reference", Storage="_References", ThisKey="ID", OtherKey="SpecialityID")]
		public EntitySet<Reference> References
		{
			get
			{
				return this._References;
			}
			set
			{
				this._References.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_Staff", Storage="_Staffs", ThisKey="ID", OtherKey="SpecialityID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_References(Reference entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = this;
		}
		
		private void detach_References(Reference entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = null;
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _Code;
		
		private string _MedicalSystemCode;
		
		private string _Position;
		
		private System.Nullable<int> _UserID;
		
		private string _UserType;
		
		private System.Nullable<int> _SpecialityID;
		
		private string _SpecialityDegree;
		
		private EntitySet<Agenda> _Agendas;
		
		private EntitySet<DoctorContract> _DoctorContracts;
		
		private EntitySet<DoctorInsurance> _DoctorInsurances;
		
		private EntitySet<FavoriteICD10> _FavoriteICD10s;
		
		private EntitySet<FavoriteService> _FavoriteServices;
		
		private EntitySet<GivenServiceM> _GivenServiceMs;
		
		private EntitySet<GivenServiceM> _GivenServiceMs1;
		
		private EntitySet<GivenServiceM> _GivenServiceMs2;
		
		private EntitySet<Payment> _Payments;
		
		private EntitySet<PhysiotherapyOrderM> _PhysiotherapyOrderMs;
		
		private EntitySet<QualitativePoint> _QualitativePoints;
		
		private EntitySet<Reference> _References;
		
		private EntityRef<Speciality> _Speciality;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnMedicalSystemCodeChanging(string value);
    partial void OnMedicalSystemCodeChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnUserTypeChanging(string value);
    partial void OnUserTypeChanged();
    partial void OnSpecialityIDChanging(System.Nullable<int> value);
    partial void OnSpecialityIDChanged();
    partial void OnSpecialityDegreeChanging(string value);
    partial void OnSpecialityDegreeChanged();
    #endregion
		
		public Staff()
		{
			this._Agendas = new EntitySet<Agenda>(new Action<Agenda>(this.attach_Agendas), new Action<Agenda>(this.detach_Agendas));
			this._DoctorContracts = new EntitySet<DoctorContract>(new Action<DoctorContract>(this.attach_DoctorContracts), new Action<DoctorContract>(this.detach_DoctorContracts));
			this._DoctorInsurances = new EntitySet<DoctorInsurance>(new Action<DoctorInsurance>(this.attach_DoctorInsurances), new Action<DoctorInsurance>(this.detach_DoctorInsurances));
			this._FavoriteICD10s = new EntitySet<FavoriteICD10>(new Action<FavoriteICD10>(this.attach_FavoriteICD10s), new Action<FavoriteICD10>(this.detach_FavoriteICD10s));
			this._FavoriteServices = new EntitySet<FavoriteService>(new Action<FavoriteService>(this.attach_FavoriteServices), new Action<FavoriteService>(this.detach_FavoriteServices));
			this._GivenServiceMs = new EntitySet<GivenServiceM>(new Action<GivenServiceM>(this.attach_GivenServiceMs), new Action<GivenServiceM>(this.detach_GivenServiceMs));
			this._GivenServiceMs1 = new EntitySet<GivenServiceM>(new Action<GivenServiceM>(this.attach_GivenServiceMs1), new Action<GivenServiceM>(this.detach_GivenServiceMs1));
			this._GivenServiceMs2 = new EntitySet<GivenServiceM>(new Action<GivenServiceM>(this.attach_GivenServiceMs2), new Action<GivenServiceM>(this.detach_GivenServiceMs2));
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._PhysiotherapyOrderMs = new EntitySet<PhysiotherapyOrderM>(new Action<PhysiotherapyOrderM>(this.attach_PhysiotherapyOrderMs), new Action<PhysiotherapyOrderM>(this.detach_PhysiotherapyOrderMs));
			this._QualitativePoints = new EntitySet<QualitativePoint>(new Action<QualitativePoint>(this.attach_QualitativePoints), new Action<QualitativePoint>(this.detach_QualitativePoints));
			this._References = new EntitySet<Reference>(new Action<Reference>(this.attach_References), new Action<Reference>(this.detach_References));
			this._Speciality = default(EntityRef<Speciality>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalSystemCode", DbType="NVarChar(20)")]
		public string MedicalSystemCode
		{
			get
			{
				return this._MedicalSystemCode;
			}
			set
			{
				if ((this._MedicalSystemCode != value))
				{
					this.OnMedicalSystemCodeChanging(value);
					this.SendPropertyChanging();
					this._MedicalSystemCode = value;
					this.SendPropertyChanged("MedicalSystemCode");
					this.OnMedicalSystemCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(50)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="NVarChar(50)")]
		public string UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityID", DbType="Int")]
		public System.Nullable<int> SpecialityID
		{
			get
			{
				return this._SpecialityID;
			}
			set
			{
				if ((this._SpecialityID != value))
				{
					if (this._Speciality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityIDChanging(value);
					this.SendPropertyChanging();
					this._SpecialityID = value;
					this.SendPropertyChanged("SpecialityID");
					this.OnSpecialityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityDegree", DbType="NVarChar(20)")]
		public string SpecialityDegree
		{
			get
			{
				return this._SpecialityDegree;
			}
			set
			{
				if ((this._SpecialityDegree != value))
				{
					this.OnSpecialityDegreeChanging(value);
					this.SendPropertyChanging();
					this._SpecialityDegree = value;
					this.SendPropertyChanged("SpecialityDegree");
					this.OnSpecialityDegreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Agenda", Storage="_Agendas", ThisKey="ID", OtherKey="StaffID")]
		public EntitySet<Agenda> Agendas
		{
			get
			{
				return this._Agendas;
			}
			set
			{
				this._Agendas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_DoctorContract", Storage="_DoctorContracts", ThisKey="ID", OtherKey="StaffID")]
		public EntitySet<DoctorContract> DoctorContracts
		{
			get
			{
				return this._DoctorContracts;
			}
			set
			{
				this._DoctorContracts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_DoctorInsurance", Storage="_DoctorInsurances", ThisKey="ID", OtherKey="StaffID")]
		public EntitySet<DoctorInsurance> DoctorInsurances
		{
			get
			{
				return this._DoctorInsurances;
			}
			set
			{
				this._DoctorInsurances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_FavoriteICD10", Storage="_FavoriteICD10s", ThisKey="ID", OtherKey="StaffID")]
		public EntitySet<FavoriteICD10> FavoriteICD10s
		{
			get
			{
				return this._FavoriteICD10s;
			}
			set
			{
				this._FavoriteICD10s.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_FavoriteService", Storage="_FavoriteServices", ThisKey="ID", OtherKey="StaffID")]
		public EntitySet<FavoriteService> FavoriteServices
		{
			get
			{
				return this._FavoriteServices;
			}
			set
			{
				this._FavoriteServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_GivenServiceM", Storage="_GivenServiceMs", ThisKey="ID", OtherKey="RequestStaffID")]
		public EntitySet<GivenServiceM> GivenServiceMs
		{
			get
			{
				return this._GivenServiceMs;
			}
			set
			{
				this._GivenServiceMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_GivenServiceM1", Storage="_GivenServiceMs1", ThisKey="ID", OtherKey="FunctorID")]
		public EntitySet<GivenServiceM> GivenServiceMs1
		{
			get
			{
				return this._GivenServiceMs1;
			}
			set
			{
				this._GivenServiceMs1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_GivenServiceM2", Storage="_GivenServiceMs2", ThisKey="ID", OtherKey="TechnicianID")]
		public EntitySet<GivenServiceM> GivenServiceMs2
		{
			get
			{
				return this._GivenServiceMs2;
			}
			set
			{
				this._GivenServiceMs2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Payment", Storage="_Payments", ThisKey="ID", OtherKey="StaffID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_PhysiotherapyOrderM", Storage="_PhysiotherapyOrderMs", ThisKey="ID", OtherKey="RequestStaffID")]
		public EntitySet<PhysiotherapyOrderM> PhysiotherapyOrderMs
		{
			get
			{
				return this._PhysiotherapyOrderMs;
			}
			set
			{
				this._PhysiotherapyOrderMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_QualitativePoint", Storage="_QualitativePoints", ThisKey="ID", OtherKey="StaffID")]
		public EntitySet<QualitativePoint> QualitativePoints
		{
			get
			{
				return this._QualitativePoints;
			}
			set
			{
				this._QualitativePoints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Reference", Storage="_References", ThisKey="ID", OtherKey="StaffID")]
		public EntitySet<Reference> References
		{
			get
			{
				return this._References;
			}
			set
			{
				this._References.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_Staff", Storage="_Speciality", ThisKey="SpecialityID", OtherKey="ID", IsForeignKey=true)]
		public Speciality Speciality
		{
			get
			{
				return this._Speciality.Entity;
			}
			set
			{
				Speciality previousValue = this._Speciality.Entity;
				if (((previousValue != value) 
							|| (this._Speciality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speciality.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Speciality.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._SpecialityID = value.ID;
					}
					else
					{
						this._SpecialityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Speciality");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Staff", Storage="_Person", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Staff = null;
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Staff = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(System.Guid);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Agendas(Agenda entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Agendas(Agenda entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_DoctorContracts(DoctorContract entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_DoctorContracts(DoctorContract entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_DoctorInsurances(DoctorInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_DoctorInsurances(DoctorInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_FavoriteICD10s(FavoriteICD10 entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_FavoriteICD10s(FavoriteICD10 entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_FavoriteServices(FavoriteService entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_FavoriteServices(FavoriteService entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_GivenServiceMs(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_GivenServiceMs(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_GivenServiceMs1(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.Staff1 = this;
		}
		
		private void detach_GivenServiceMs1(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.Staff1 = null;
		}
		
		private void attach_GivenServiceMs2(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.Staff2 = this;
		}
		
		private void detach_GivenServiceMs2(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.Staff2 = null;
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_PhysiotherapyOrderMs(PhysiotherapyOrderM entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_PhysiotherapyOrderMs(PhysiotherapyOrderM entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_QualitativePoints(QualitativePoint entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_QualitativePoints(QualitativePoint entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_References(Reference entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_References(Reference entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tariff")]
	public partial class Tariff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<int> _InsuranceID;
		
		private System.Nullable<System.Guid> _ServiceID;
		
		private string _Date;
		
		private System.Nullable<decimal> _PatientShare;
		
		private System.Nullable<decimal> _OrganizationShare;
		
		private System.Nullable<decimal> _FreePrice;
		
		private System.Nullable<decimal> _GovernmentalPrice;
		
		private System.Nullable<decimal> _TotalPrice;
		
		private bool _Lock;
		
		private EntityRef<Insurance> _Insurance;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnInsuranceIDChanging(System.Nullable<int> value);
    partial void OnInsuranceIDChanged();
    partial void OnServiceIDChanging(System.Nullable<System.Guid> value);
    partial void OnServiceIDChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnPatientShareChanging(System.Nullable<decimal> value);
    partial void OnPatientShareChanged();
    partial void OnOrganizationShareChanging(System.Nullable<decimal> value);
    partial void OnOrganizationShareChanged();
    partial void OnFreePriceChanging(System.Nullable<decimal> value);
    partial void OnFreePriceChanged();
    partial void OnGovernmentalPriceChanging(System.Nullable<decimal> value);
    partial void OnGovernmentalPriceChanged();
    partial void OnTotalPriceChanging(System.Nullable<decimal> value);
    partial void OnTotalPriceChanged();
    partial void OnLockChanging(bool value);
    partial void OnLockChanged();
    #endregion
		
		public Tariff()
		{
			this._Insurance = default(EntityRef<Insurance>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceID", DbType="Int")]
		public System.Nullable<int> InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					if (this._Insurance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NChar(10)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientShare", DbType="Money")]
		public System.Nullable<decimal> PatientShare
		{
			get
			{
				return this._PatientShare;
			}
			set
			{
				if ((this._PatientShare != value))
				{
					this.OnPatientShareChanging(value);
					this.SendPropertyChanging();
					this._PatientShare = value;
					this.SendPropertyChanged("PatientShare");
					this.OnPatientShareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationShare", DbType="Money")]
		public System.Nullable<decimal> OrganizationShare
		{
			get
			{
				return this._OrganizationShare;
			}
			set
			{
				if ((this._OrganizationShare != value))
				{
					this.OnOrganizationShareChanging(value);
					this.SendPropertyChanging();
					this._OrganizationShare = value;
					this.SendPropertyChanged("OrganizationShare");
					this.OnOrganizationShareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreePrice", DbType="Money")]
		public System.Nullable<decimal> FreePrice
		{
			get
			{
				return this._FreePrice;
			}
			set
			{
				if ((this._FreePrice != value))
				{
					this.OnFreePriceChanging(value);
					this.SendPropertyChanging();
					this._FreePrice = value;
					this.SendPropertyChanged("FreePrice");
					this.OnFreePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GovernmentalPrice", DbType="Money")]
		public System.Nullable<decimal> GovernmentalPrice
		{
			get
			{
				return this._GovernmentalPrice;
			}
			set
			{
				if ((this._GovernmentalPrice != value))
				{
					this.OnGovernmentalPriceChanging(value);
					this.SendPropertyChanging();
					this._GovernmentalPrice = value;
					this.SendPropertyChanged("GovernmentalPrice");
					this.OnGovernmentalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Money")]
		public System.Nullable<decimal> TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lock", DbType="Bit NOT NULL")]
		public bool Lock
		{
			get
			{
				return this._Lock;
			}
			set
			{
				if ((this._Lock != value))
				{
					this.OnLockChanging(value);
					this.SendPropertyChanging();
					this._Lock = value;
					this.SendPropertyChanged("Lock");
					this.OnLockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Insurance_Tariff", Storage="_Insurance", ThisKey="InsuranceID", OtherKey="ID", IsForeignKey=true)]
		public Insurance Insurance
		{
			get
			{
				return this._Insurance.Entity;
			}
			set
			{
				Insurance previousValue = this._Insurance.Entity;
				if (((previousValue != value) 
							|| (this._Insurance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Insurance.Entity = null;
						previousValue.Tariffs.Remove(this);
					}
					this._Insurance.Entity = value;
					if ((value != null))
					{
						value.Tariffs.Add(this);
						this._InsuranceID = value.ID;
					}
					else
					{
						this._InsuranceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Insurance");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Tariff", Storage="_Service", ThisKey="ServiceID", OtherKey="ID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Tariffs.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Tariffs.Add(this);
						this._ServiceID = value.ID;
					}
					else
					{
						this._ServiceID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdminMessage")]
	public partial class AdminMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _AdminName;
		
		private string _Date;
		
		private string _Message;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAdminNameChanging(string value);
    partial void OnAdminNameChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    #endregion
		
		public AdminMessage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminName", DbType="NVarChar(500)")]
		public string AdminName
		{
			get
			{
				return this._AdminName;
			}
			set
			{
				if ((this._AdminName != value))
				{
					this.OnAdminNameChanging(value);
					this.SendPropertyChanging();
					this._AdminName = value;
					this.SendPropertyChanged("AdminName");
					this.OnAdminNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NVarChar(10)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(500)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _IDInt;
		
		private string _MedicalID;
		
		private string _FamilyNumber;
		
		private System.Nullable<System.Guid> _FamilyDoctor;
		
		private System.Nullable<System.Guid> _FamilyNurse;
		
		private System.Nullable<System.Guid> _FDDepartment;
		
		private string _NationalCode;
		
		private string _PersonalCode;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<bool> _Sex;
		
		private string _IdentityNumber;
		
		private string _IdentityPlace;
		
		private string _FatherName;
		
		private string _BirthDate;
		
		private string _BirthPlace;
		
		private string _Phone;
		
		private string _CellularPhone;
		
		private string _WorkPhone;
		
		private System.Data.Linq.Binary _Photo;
		
		private string _Address;
		
		private string _WorkAddress;
		
		private string _InsuranceName;
		
		private string _InsuranceNo;
		
		private string _Education;
		
		private string _Comment;
		
		private string _MaritalStatus;
		
		private string _Religion;
		
		private string _CurrentJob;
		
		private string _BloodType;
		
		private System.Nullable<double> _Weight;
		
		private System.Nullable<double> _Height;
		
		private System.Nullable<int> _Barcode;
		
		private System.Nullable<int> _CreatorUser;
		
		private string _CreationDate;
		
		private string _CreationTime;
		
		private System.Nullable<int> _LastModificator;
		
		private string _LastModificationDate;
		
		private string _LastModificationTime;
		
		private string _BookletExpireDate;
		
		private bool _AllowInstallment;
		
		private bool _NotUse;
		
		private bool _Visibel;
		
		private bool _Death;
		
		private string _DeathTime;
		
		private string _DeathDate;
		
		private string _DialectLanguage;
		
		private bool _Forieng;
		
		private string _Nationality;
		
		private string _PassportNumber;
		
		private System.Nullable<System.DateTime> _TS;
		
		private System.Nullable<System.DateTime> _InsertTime;
		
		private string _FamilyHealthNurse;
		
		private string _FamilyHealthResponsible;
		
		private string _GrowthMonitorExpert;
		
		private string _MentalExpert;
		
		private string _NutritionExpert;
		
		private EntitySet<GivenServiceM> _GivenServiceMs;
		
		private EntitySet<Payment> _Payments;
		
		private EntitySet<PhysiotherapyOrderM> _PhysiotherapyOrderMs;
		
		private EntityRef<Staff> _Staff;
		
		private EntitySet<Person> _Persons;
		
		private EntitySet<Person> _Persons1;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Person> _Person1;
		
		private EntityRef<Person> _Person2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDIntChanging(int value);
    partial void OnIDIntChanged();
    partial void OnMedicalIDChanging(string value);
    partial void OnMedicalIDChanged();
    partial void OnFamilyNumberChanging(string value);
    partial void OnFamilyNumberChanged();
    partial void OnFamilyDoctorChanging(System.Nullable<System.Guid> value);
    partial void OnFamilyDoctorChanged();
    partial void OnFamilyNurseChanging(System.Nullable<System.Guid> value);
    partial void OnFamilyNurseChanged();
    partial void OnFDDepartmentChanging(System.Nullable<System.Guid> value);
    partial void OnFDDepartmentChanged();
    partial void OnNationalCodeChanging(string value);
    partial void OnNationalCodeChanged();
    partial void OnPersonalCodeChanging(string value);
    partial void OnPersonalCodeChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnSexChanging(System.Nullable<bool> value);
    partial void OnSexChanged();
    partial void OnIdentityNumberChanging(string value);
    partial void OnIdentityNumberChanged();
    partial void OnIdentityPlaceChanging(string value);
    partial void OnIdentityPlaceChanged();
    partial void OnFatherNameChanging(string value);
    partial void OnFatherNameChanged();
    partial void OnBirthDateChanging(string value);
    partial void OnBirthDateChanged();
    partial void OnBirthPlaceChanging(string value);
    partial void OnBirthPlaceChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnCellularPhoneChanging(string value);
    partial void OnCellularPhoneChanged();
    partial void OnWorkPhoneChanging(string value);
    partial void OnWorkPhoneChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnWorkAddressChanging(string value);
    partial void OnWorkAddressChanged();
    partial void OnInsuranceNameChanging(string value);
    partial void OnInsuranceNameChanged();
    partial void OnInsuranceNoChanging(string value);
    partial void OnInsuranceNoChanged();
    partial void OnEducationChanging(string value);
    partial void OnEducationChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnMaritalStatusChanging(string value);
    partial void OnMaritalStatusChanged();
    partial void OnReligionChanging(string value);
    partial void OnReligionChanged();
    partial void OnCurrentJobChanging(string value);
    partial void OnCurrentJobChanged();
    partial void OnBloodTypeChanging(string value);
    partial void OnBloodTypeChanged();
    partial void OnWeightChanging(System.Nullable<double> value);
    partial void OnWeightChanged();
    partial void OnHeightChanging(System.Nullable<double> value);
    partial void OnHeightChanged();
    partial void OnBarcodeChanging(System.Nullable<int> value);
    partial void OnBarcodeChanged();
    partial void OnCreatorUserChanging(System.Nullable<int> value);
    partial void OnCreatorUserChanged();
    partial void OnCreationDateChanging(string value);
    partial void OnCreationDateChanged();
    partial void OnCreationTimeChanging(string value);
    partial void OnCreationTimeChanged();
    partial void OnLastModificatorChanging(System.Nullable<int> value);
    partial void OnLastModificatorChanged();
    partial void OnLastModificationDateChanging(string value);
    partial void OnLastModificationDateChanged();
    partial void OnLastModificationTimeChanging(string value);
    partial void OnLastModificationTimeChanged();
    partial void OnBookletExpireDateChanging(string value);
    partial void OnBookletExpireDateChanged();
    partial void OnAllowInstallmentChanging(bool value);
    partial void OnAllowInstallmentChanged();
    partial void OnNotUseChanging(bool value);
    partial void OnNotUseChanged();
    partial void OnVisibelChanging(bool value);
    partial void OnVisibelChanged();
    partial void OnDeathChanging(bool value);
    partial void OnDeathChanged();
    partial void OnDeathTimeChanging(string value);
    partial void OnDeathTimeChanged();
    partial void OnDeathDateChanging(string value);
    partial void OnDeathDateChanged();
    partial void OnDialectLanguageChanging(string value);
    partial void OnDialectLanguageChanged();
    partial void OnForiengChanging(bool value);
    partial void OnForiengChanged();
    partial void OnNationalityChanging(string value);
    partial void OnNationalityChanged();
    partial void OnPassportNumberChanging(string value);
    partial void OnPassportNumberChanged();
    partial void OnTSChanging(System.Nullable<System.DateTime> value);
    partial void OnTSChanged();
    partial void OnInsertTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnInsertTimeChanged();
    partial void OnFamilyHealthNurseChanging(string value);
    partial void OnFamilyHealthNurseChanged();
    partial void OnFamilyHealthResponsibleChanging(string value);
    partial void OnFamilyHealthResponsibleChanged();
    partial void OnGrowthMonitorExpertChanging(string value);
    partial void OnGrowthMonitorExpertChanged();
    partial void OnMentalExpertChanging(string value);
    partial void OnMentalExpertChanged();
    partial void OnNutritionExpertChanging(string value);
    partial void OnNutritionExpertChanged();
    #endregion
		
		public Person()
		{
			this._GivenServiceMs = new EntitySet<GivenServiceM>(new Action<GivenServiceM>(this.attach_GivenServiceMs), new Action<GivenServiceM>(this.detach_GivenServiceMs));
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._PhysiotherapyOrderMs = new EntitySet<PhysiotherapyOrderM>(new Action<PhysiotherapyOrderM>(this.attach_PhysiotherapyOrderMs), new Action<PhysiotherapyOrderM>(this.detach_PhysiotherapyOrderMs));
			this._Staff = default(EntityRef<Staff>);
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			this._Persons1 = new EntitySet<Person>(new Action<Person>(this.attach_Persons1), new Action<Person>(this.detach_Persons1));
			this._Department = default(EntityRef<Department>);
			this._Person1 = default(EntityRef<Person>);
			this._Person2 = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDInt", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int IDInt
		{
			get
			{
				return this._IDInt;
			}
			set
			{
				if ((this._IDInt != value))
				{
					this.OnIDIntChanging(value);
					this.SendPropertyChanging();
					this._IDInt = value;
					this.SendPropertyChanged("IDInt");
					this.OnIDIntChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalID", DbType="NVarChar(13)")]
		public string MedicalID
		{
			get
			{
				return this._MedicalID;
			}
			set
			{
				if ((this._MedicalID != value))
				{
					this.OnMedicalIDChanging(value);
					this.SendPropertyChanging();
					this._MedicalID = value;
					this.SendPropertyChanged("MedicalID");
					this.OnMedicalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FamilyNumber", DbType="NVarChar(10)")]
		public string FamilyNumber
		{
			get
			{
				return this._FamilyNumber;
			}
			set
			{
				if ((this._FamilyNumber != value))
				{
					this.OnFamilyNumberChanging(value);
					this.SendPropertyChanging();
					this._FamilyNumber = value;
					this.SendPropertyChanged("FamilyNumber");
					this.OnFamilyNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FamilyDoctor", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FamilyDoctor
		{
			get
			{
				return this._FamilyDoctor;
			}
			set
			{
				if ((this._FamilyDoctor != value))
				{
					if (this._Person1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFamilyDoctorChanging(value);
					this.SendPropertyChanging();
					this._FamilyDoctor = value;
					this.SendPropertyChanged("FamilyDoctor");
					this.OnFamilyDoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FamilyNurse", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FamilyNurse
		{
			get
			{
				return this._FamilyNurse;
			}
			set
			{
				if ((this._FamilyNurse != value))
				{
					if (this._Person2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFamilyNurseChanging(value);
					this.SendPropertyChanging();
					this._FamilyNurse = value;
					this.SendPropertyChanged("FamilyNurse");
					this.OnFamilyNurseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FDDepartment", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FDDepartment
		{
			get
			{
				return this._FDDepartment;
			}
			set
			{
				if ((this._FDDepartment != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFDDepartmentChanging(value);
					this.SendPropertyChanging();
					this._FDDepartment = value;
					this.SendPropertyChanged("FDDepartment");
					this.OnFDDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalCode", DbType="NVarChar(10)")]
		public string NationalCode
		{
			get
			{
				return this._NationalCode;
			}
			set
			{
				if ((this._NationalCode != value))
				{
					this.OnNationalCodeChanging(value);
					this.SendPropertyChanging();
					this._NationalCode = value;
					this.SendPropertyChanged("NationalCode");
					this.OnNationalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalCode", DbType="NVarChar(10)")]
		public string PersonalCode
		{
			get
			{
				return this._PersonalCode;
			}
			set
			{
				if ((this._PersonalCode != value))
				{
					this.OnPersonalCodeChanging(value);
					this.SendPropertyChanging();
					this._PersonalCode = value;
					this.SendPropertyChanged("PersonalCode");
					this.OnPersonalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(100)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(100)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="Bit")]
		public System.Nullable<bool> Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdentityNumber", DbType="NVarChar(10)")]
		public string IdentityNumber
		{
			get
			{
				return this._IdentityNumber;
			}
			set
			{
				if ((this._IdentityNumber != value))
				{
					this.OnIdentityNumberChanging(value);
					this.SendPropertyChanging();
					this._IdentityNumber = value;
					this.SendPropertyChanged("IdentityNumber");
					this.OnIdentityNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdentityPlace", DbType="NVarChar(50)")]
		public string IdentityPlace
		{
			get
			{
				return this._IdentityPlace;
			}
			set
			{
				if ((this._IdentityPlace != value))
				{
					this.OnIdentityPlaceChanging(value);
					this.SendPropertyChanging();
					this._IdentityPlace = value;
					this.SendPropertyChanged("IdentityPlace");
					this.OnIdentityPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FatherName", DbType="NVarChar(100)")]
		public string FatherName
		{
			get
			{
				return this._FatherName;
			}
			set
			{
				if ((this._FatherName != value))
				{
					this.OnFatherNameChanging(value);
					this.SendPropertyChanging();
					this._FatherName = value;
					this.SendPropertyChanged("FatherName");
					this.OnFatherNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="NVarChar(10)")]
		public string BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthPlace", DbType="NVarChar(50)")]
		public string BirthPlace
		{
			get
			{
				return this._BirthPlace;
			}
			set
			{
				if ((this._BirthPlace != value))
				{
					this.OnBirthPlaceChanging(value);
					this.SendPropertyChanging();
					this._BirthPlace = value;
					this.SendPropertyChanged("BirthPlace");
					this.OnBirthPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(25)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellularPhone", DbType="NVarChar(25)")]
		public string CellularPhone
		{
			get
			{
				return this._CellularPhone;
			}
			set
			{
				if ((this._CellularPhone != value))
				{
					this.OnCellularPhoneChanging(value);
					this.SendPropertyChanging();
					this._CellularPhone = value;
					this.SendPropertyChanged("CellularPhone");
					this.OnCellularPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPhone", DbType="NVarChar(25)")]
		public string WorkPhone
		{
			get
			{
				return this._WorkPhone;
			}
			set
			{
				if ((this._WorkPhone != value))
				{
					this.OnWorkPhoneChanging(value);
					this.SendPropertyChanging();
					this._WorkPhone = value;
					this.SendPropertyChanged("WorkPhone");
					this.OnWorkPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(300)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkAddress", DbType="NVarChar(300)")]
		public string WorkAddress
		{
			get
			{
				return this._WorkAddress;
			}
			set
			{
				if ((this._WorkAddress != value))
				{
					this.OnWorkAddressChanging(value);
					this.SendPropertyChanging();
					this._WorkAddress = value;
					this.SendPropertyChanged("WorkAddress");
					this.OnWorkAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceName", DbType="NVarChar(50)")]
		public string InsuranceName
		{
			get
			{
				return this._InsuranceName;
			}
			set
			{
				if ((this._InsuranceName != value))
				{
					this.OnInsuranceNameChanging(value);
					this.SendPropertyChanging();
					this._InsuranceName = value;
					this.SendPropertyChanged("InsuranceName");
					this.OnInsuranceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceNo", DbType="NVarChar(50)")]
		public string InsuranceNo
		{
			get
			{
				return this._InsuranceNo;
			}
			set
			{
				if ((this._InsuranceNo != value))
				{
					this.OnInsuranceNoChanging(value);
					this.SendPropertyChanging();
					this._InsuranceNo = value;
					this.SendPropertyChanged("InsuranceNo");
					this.OnInsuranceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Education", DbType="NVarChar(100)")]
		public string Education
		{
			get
			{
				return this._Education;
			}
			set
			{
				if ((this._Education != value))
				{
					this.OnEducationChanging(value);
					this.SendPropertyChanging();
					this._Education = value;
					this.SendPropertyChanged("Education");
					this.OnEducationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaritalStatus", DbType="NVarChar(50)")]
		public string MaritalStatus
		{
			get
			{
				return this._MaritalStatus;
			}
			set
			{
				if ((this._MaritalStatus != value))
				{
					this.OnMaritalStatusChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatus = value;
					this.SendPropertyChanged("MaritalStatus");
					this.OnMaritalStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Religion", DbType="NVarChar(50)")]
		public string Religion
		{
			get
			{
				return this._Religion;
			}
			set
			{
				if ((this._Religion != value))
				{
					this.OnReligionChanging(value);
					this.SendPropertyChanging();
					this._Religion = value;
					this.SendPropertyChanged("Religion");
					this.OnReligionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentJob", DbType="NVarChar(500)")]
		public string CurrentJob
		{
			get
			{
				return this._CurrentJob;
			}
			set
			{
				if ((this._CurrentJob != value))
				{
					this.OnCurrentJobChanging(value);
					this.SendPropertyChanging();
					this._CurrentJob = value;
					this.SendPropertyChanged("CurrentJob");
					this.OnCurrentJobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BloodType", DbType="NVarChar(20)")]
		public string BloodType
		{
			get
			{
				return this._BloodType;
			}
			set
			{
				if ((this._BloodType != value))
				{
					this.OnBloodTypeChanging(value);
					this.SendPropertyChanging();
					this._BloodType = value;
					this.SendPropertyChanged("BloodType");
					this.OnBloodTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Float")]
		public System.Nullable<double> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Float")]
		public System.Nullable<double> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Barcode", DbType="Int")]
		public System.Nullable<int> Barcode
		{
			get
			{
				return this._Barcode;
			}
			set
			{
				if ((this._Barcode != value))
				{
					this.OnBarcodeChanging(value);
					this.SendPropertyChanging();
					this._Barcode = value;
					this.SendPropertyChanged("Barcode");
					this.OnBarcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorUser", DbType="Int")]
		public System.Nullable<int> CreatorUser
		{
			get
			{
				return this._CreatorUser;
			}
			set
			{
				if ((this._CreatorUser != value))
				{
					this.OnCreatorUserChanging(value);
					this.SendPropertyChanging();
					this._CreatorUser = value;
					this.SendPropertyChanged("CreatorUser");
					this.OnCreatorUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="NVarChar(10)")]
		public string CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="NVarChar(8)")]
		public string CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificator", DbType="Int")]
		public System.Nullable<int> LastModificator
		{
			get
			{
				return this._LastModificator;
			}
			set
			{
				if ((this._LastModificator != value))
				{
					this.OnLastModificatorChanging(value);
					this.SendPropertyChanging();
					this._LastModificator = value;
					this.SendPropertyChanged("LastModificator");
					this.OnLastModificatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificationDate", DbType="NVarChar(10)")]
		public string LastModificationDate
		{
			get
			{
				return this._LastModificationDate;
			}
			set
			{
				if ((this._LastModificationDate != value))
				{
					this.OnLastModificationDateChanging(value);
					this.SendPropertyChanging();
					this._LastModificationDate = value;
					this.SendPropertyChanged("LastModificationDate");
					this.OnLastModificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificationTime", DbType="NVarChar(8)")]
		public string LastModificationTime
		{
			get
			{
				return this._LastModificationTime;
			}
			set
			{
				if ((this._LastModificationTime != value))
				{
					this.OnLastModificationTimeChanging(value);
					this.SendPropertyChanging();
					this._LastModificationTime = value;
					this.SendPropertyChanged("LastModificationTime");
					this.OnLastModificationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookletExpireDate", DbType="NVarChar(10)")]
		public string BookletExpireDate
		{
			get
			{
				return this._BookletExpireDate;
			}
			set
			{
				if ((this._BookletExpireDate != value))
				{
					this.OnBookletExpireDateChanging(value);
					this.SendPropertyChanging();
					this._BookletExpireDate = value;
					this.SendPropertyChanged("BookletExpireDate");
					this.OnBookletExpireDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowInstallment", DbType="Bit NOT NULL")]
		public bool AllowInstallment
		{
			get
			{
				return this._AllowInstallment;
			}
			set
			{
				if ((this._AllowInstallment != value))
				{
					this.OnAllowInstallmentChanging(value);
					this.SendPropertyChanging();
					this._AllowInstallment = value;
					this.SendPropertyChanged("AllowInstallment");
					this.OnAllowInstallmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotUse", DbType="Bit NOT NULL")]
		public bool NotUse
		{
			get
			{
				return this._NotUse;
			}
			set
			{
				if ((this._NotUse != value))
				{
					this.OnNotUseChanging(value);
					this.SendPropertyChanging();
					this._NotUse = value;
					this.SendPropertyChanged("NotUse");
					this.OnNotUseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visibel", DbType="Bit NOT NULL")]
		public bool Visibel
		{
			get
			{
				return this._Visibel;
			}
			set
			{
				if ((this._Visibel != value))
				{
					this.OnVisibelChanging(value);
					this.SendPropertyChanging();
					this._Visibel = value;
					this.SendPropertyChanged("Visibel");
					this.OnVisibelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Death", DbType="Bit NOT NULL")]
		public bool Death
		{
			get
			{
				return this._Death;
			}
			set
			{
				if ((this._Death != value))
				{
					this.OnDeathChanging(value);
					this.SendPropertyChanging();
					this._Death = value;
					this.SendPropertyChanged("Death");
					this.OnDeathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeathTime", DbType="NVarChar(8)")]
		public string DeathTime
		{
			get
			{
				return this._DeathTime;
			}
			set
			{
				if ((this._DeathTime != value))
				{
					this.OnDeathTimeChanging(value);
					this.SendPropertyChanging();
					this._DeathTime = value;
					this.SendPropertyChanged("DeathTime");
					this.OnDeathTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeathDate", DbType="NVarChar(10)")]
		public string DeathDate
		{
			get
			{
				return this._DeathDate;
			}
			set
			{
				if ((this._DeathDate != value))
				{
					this.OnDeathDateChanging(value);
					this.SendPropertyChanging();
					this._DeathDate = value;
					this.SendPropertyChanged("DeathDate");
					this.OnDeathDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DialectLanguage", DbType="NVarChar(50)")]
		public string DialectLanguage
		{
			get
			{
				return this._DialectLanguage;
			}
			set
			{
				if ((this._DialectLanguage != value))
				{
					this.OnDialectLanguageChanging(value);
					this.SendPropertyChanging();
					this._DialectLanguage = value;
					this.SendPropertyChanged("DialectLanguage");
					this.OnDialectLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Forieng", DbType="Bit NOT NULL")]
		public bool Forieng
		{
			get
			{
				return this._Forieng;
			}
			set
			{
				if ((this._Forieng != value))
				{
					this.OnForiengChanging(value);
					this.SendPropertyChanging();
					this._Forieng = value;
					this.SendPropertyChanged("Forieng");
					this.OnForiengChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nationality", DbType="NVarChar(50)")]
		public string Nationality
		{
			get
			{
				return this._Nationality;
			}
			set
			{
				if ((this._Nationality != value))
				{
					this.OnNationalityChanging(value);
					this.SendPropertyChanging();
					this._Nationality = value;
					this.SendPropertyChanged("Nationality");
					this.OnNationalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassportNumber", DbType="NVarChar(50)")]
		public string PassportNumber
		{
			get
			{
				return this._PassportNumber;
			}
			set
			{
				if ((this._PassportNumber != value))
				{
					this.OnPassportNumberChanging(value);
					this.SendPropertyChanging();
					this._PassportNumber = value;
					this.SendPropertyChanged("PassportNumber");
					this.OnPassportNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TS", DbType="DateTime2")]
		public System.Nullable<System.DateTime> TS
		{
			get
			{
				return this._TS;
			}
			set
			{
				if ((this._TS != value))
				{
					this.OnTSChanging(value);
					this.SendPropertyChanging();
					this._TS = value;
					this.SendPropertyChanged("TS");
					this.OnTSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertTime", DbType="DateTime2")]
		public System.Nullable<System.DateTime> InsertTime
		{
			get
			{
				return this._InsertTime;
			}
			set
			{
				if ((this._InsertTime != value))
				{
					this.OnInsertTimeChanging(value);
					this.SendPropertyChanging();
					this._InsertTime = value;
					this.SendPropertyChanged("InsertTime");
					this.OnInsertTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FamilyHealthNurse", DbType="NVarChar(150)")]
		public string FamilyHealthNurse
		{
			get
			{
				return this._FamilyHealthNurse;
			}
			set
			{
				if ((this._FamilyHealthNurse != value))
				{
					this.OnFamilyHealthNurseChanging(value);
					this.SendPropertyChanging();
					this._FamilyHealthNurse = value;
					this.SendPropertyChanged("FamilyHealthNurse");
					this.OnFamilyHealthNurseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FamilyHealthResponsible", DbType="NVarChar(150)")]
		public string FamilyHealthResponsible
		{
			get
			{
				return this._FamilyHealthResponsible;
			}
			set
			{
				if ((this._FamilyHealthResponsible != value))
				{
					this.OnFamilyHealthResponsibleChanging(value);
					this.SendPropertyChanging();
					this._FamilyHealthResponsible = value;
					this.SendPropertyChanged("FamilyHealthResponsible");
					this.OnFamilyHealthResponsibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrowthMonitorExpert", DbType="NVarChar(150)")]
		public string GrowthMonitorExpert
		{
			get
			{
				return this._GrowthMonitorExpert;
			}
			set
			{
				if ((this._GrowthMonitorExpert != value))
				{
					this.OnGrowthMonitorExpertChanging(value);
					this.SendPropertyChanging();
					this._GrowthMonitorExpert = value;
					this.SendPropertyChanged("GrowthMonitorExpert");
					this.OnGrowthMonitorExpertChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MentalExpert", DbType="NVarChar(150)")]
		public string MentalExpert
		{
			get
			{
				return this._MentalExpert;
			}
			set
			{
				if ((this._MentalExpert != value))
				{
					this.OnMentalExpertChanging(value);
					this.SendPropertyChanging();
					this._MentalExpert = value;
					this.SendPropertyChanged("MentalExpert");
					this.OnMentalExpertChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NutritionExpert", DbType="NVarChar(150)")]
		public string NutritionExpert
		{
			get
			{
				return this._NutritionExpert;
			}
			set
			{
				if ((this._NutritionExpert != value))
				{
					this.OnNutritionExpertChanging(value);
					this.SendPropertyChanging();
					this._NutritionExpert = value;
					this.SendPropertyChanged("NutritionExpert");
					this.OnNutritionExpertChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_GivenServiceM", Storage="_GivenServiceMs", ThisKey="ID", OtherKey="PersonID")]
		public EntitySet<GivenServiceM> GivenServiceMs
		{
			get
			{
				return this._GivenServiceMs;
			}
			set
			{
				this._GivenServiceMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Payment", Storage="_Payments", ThisKey="ID", OtherKey="PersonID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PhysiotherapyOrderM", Storage="_PhysiotherapyOrderMs", ThisKey="ID", OtherKey="PersonID")]
		public EntitySet<PhysiotherapyOrderM> PhysiotherapyOrderMs
		{
			get
			{
				return this._PhysiotherapyOrderMs;
			}
			set
			{
				this._PhysiotherapyOrderMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Staff", Storage="_Staff", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Person = null;
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Person = this;
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Person", Storage="_Persons", ThisKey="ID", OtherKey="FamilyDoctor")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Person1", Storage="_Persons1", ThisKey="ID", OtherKey="FamilyNurse")]
		public EntitySet<Person> Persons1
		{
			get
			{
				return this._Persons1;
			}
			set
			{
				this._Persons1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Person", Storage="_Department", ThisKey="FDDepartment", OtherKey="ID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._FDDepartment = value.ID;
					}
					else
					{
						this._FDDepartment = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Person", Storage="_Person1", ThisKey="FamilyDoctor", OtherKey="ID", IsForeignKey=true)]
		public Person Person1
		{
			get
			{
				return this._Person1.Entity;
			}
			set
			{
				Person previousValue = this._Person1.Entity;
				if (((previousValue != value) 
							|| (this._Person1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person1.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._Person1.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._FamilyDoctor = value.ID;
					}
					else
					{
						this._FamilyDoctor = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Person1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Person1", Storage="_Person2", ThisKey="FamilyNurse", OtherKey="ID", IsForeignKey=true)]
		public Person Person2
		{
			get
			{
				return this._Person2.Entity;
			}
			set
			{
				Person previousValue = this._Person2.Entity;
				if (((previousValue != value) 
							|| (this._Person2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person2.Entity = null;
						previousValue.Persons1.Remove(this);
					}
					this._Person2.Entity = value;
					if ((value != null))
					{
						value.Persons1.Add(this);
						this._FamilyNurse = value.ID;
					}
					else
					{
						this._FamilyNurse = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Person2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GivenServiceMs(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_GivenServiceMs(GivenServiceM entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_PhysiotherapyOrderMs(PhysiotherapyOrderM entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PhysiotherapyOrderMs(PhysiotherapyOrderM entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Person1 = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Person1 = null;
		}
		
		private void attach_Persons1(Person entity)
		{
			this.SendPropertyChanging();
			entity.Person2 = this;
		}
		
		private void detach_Persons1(Person entity)
		{
			this.SendPropertyChanging();
			entity.Person2 = null;
		}
	}
}
#pragma warning restore 1591
