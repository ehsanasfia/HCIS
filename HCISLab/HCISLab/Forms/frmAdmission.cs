using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraBars;
using HCISLab.Data;
using HCISLab.Dialogs;
using DevExpress.XtraEditors;

namespace HCISLab.Forms
{
    public partial class frmAdmission : DevExpress.XtraBars.Ribbon.RibbonForm
    {
        DevExpress.XtraSplashScreen.SplashScreenManager splashScreenManager2;
        HCISLabClassesDataContext dc = new HCISLabClassesDataContext();
        Person EditingPerson;
        GivenServiceM EditingGSM;
        string OldNationalCode = null;
        Insurance freeInsurance = null;
        List<GivenServiceD> lstParents = new List<GivenServiceD>();
        private bool finalConfirmAccess = false;
        private string savedPersonalCode;
        private int? savedrdgIndex;
        private string savedSerialNumber;
        private int? savedLastSearchButton;
        private string savedFromDate;
        private string savedToDate;
        private string OldExpireDate;

        private bool cancelAdmit = false;

        ImphoClassesDataContext IM = new ImphoClassesDataContext();

        private Color defaultBackColor;

        private bool loadingFromDB;



        public frmAdmission(bool finalConfirmAccess)
        {
            splashScreenManager2 = new DevExpress.XtraSplashScreen.SplashScreenManager(this, typeof(WaitForm1), true, true);
            splashScreenManager2.ClosingDelay = 200;
            this.finalConfirmAccess = finalConfirmAccess;
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            departmentsBindingSource.DataSource = new HCISLab.Data.HCISLabClassesDataContext().Departments;
        }

        private void frmAdmission_Load(object sender, EventArgs e)
        {

            if (finalConfirmAccess)
                bbiConfirm.Visibility = BarItemVisibility.Always;
            else
                bbiConfirm.Visibility = BarItemVisibility.Never;

            defaultBackColor = dtpBookLetExpire.Properties.Appearance.BackColor;

            bbiCancel_ItemClick(null, null);

            if (EditingPerson == null)
            {
                EditingPerson = new Person() { Sex = false };
                EditingGSM = new GivenServiceM() { Priority = false };
                // CheckTurning();
            }

            PersonBindingSource.DataSource = EditingPerson; //Person Object
            GivenServiceMBindingSource.DataSource = EditingGSM; //GivenServiceM Object
            givenServiceDsBindingSource.DataSource = EditingGSM.GivenServiceDs.ToList(); //Grid
                                                                                         //  serviceBindingSource.DataSource = dc.Services.Where(c=>c.CategoryID==(Int32)Category.آزمایش).ToList();

            tabbedControlGroup1.SelectedTabPageIndex = 0;
        }

        private void bbiCancel_ItemClick(object sender, ItemClickEventArgs e)
        {
            cancelAdmit = false;
            if (EditingGSM != null)
            {
                EditingGSM.Staff = null;
                EditingGSM.Insurance = null;
                EditingGSM.Person = null;
                EditingGSM = null;
            }
            //DoctorCodeSpn.EditValue = null;
            EditingPerson = null;
            txtNationalCode.EditValue = null;
            var today = MainModule.GetPersianDate(DateTime.Now);
            TurningDateTxt.Text = today;
            // CheckTurning();

            dc.Dispose();
            dc = new HCISLabClassesDataContext();
            insurancesBindingSource.DataSource = dc.Insurances.ToList(); // InsuranceLkp

            doctorBindingSource.DataSource = dc.Staffs.Where(x => x.UserType == "دکتر")
                .OrderBy(x => x.Code)
                .Select(x => new
                {
                    x.Person.FirstName,
                    x.Person.LastName,
                    FullName = x.Person.FirstName + " " + x.Person.LastName,
                    x.Person.ID,
                    x.Code,
                    x.MedicalSystemCode,
                    x.Speciality.Speciality1,
                    Staff = x
                })
                    .ToList(); //Doctors list (DoctorSlk)

            departmentsBindingSource.DataSource = dc.Departments.Where(x =>
                                                                    x.TypeID == 10
                                                                    || x.TypeID == 11
                                                                    || x.TypeID == 13
                                                                    || x.TypeID == 14
                                                                    || x.TypeID == 15).OrderBy(x => x.Name).ToList();

            nameLaboratorySDBindingSource.DataSource = dc.LaboratoryServiceDetails.Where(x => x.Service.CategoryID == (int)Category.آزمایش).OrderBy(x => x.AbbreviationName).ToList(); // Tests Abbr Name list (lookUpEdit in Grid)
            serviceCodesBindingSource.DataSource = dc.Services.Where(x => x.CategoryID == (int)Category.آزمایش).OrderBy(x => x.OldID).ToList(); // Tests Codes list (lookUpEdit in Grid)
            viewSecurityUserBindingSource.DataSource = dc.View_SecurityUsers.ToList();

            freeInsurance = dc.Insurances.FirstOrDefault(x => x.Name != null && x.Name.Contains("آزاد"));
            if (freeInsurance == null)
            {
                freeInsurance = new Insurance() { Name = "آزاد" };
                dc.Insurances.InsertOnSubmit(freeInsurance);
                dc.SubmitChanges();
            }

            GetData();

        }

        private void EndEdit()
        {
            PersonBindingSource.EndEdit();
            GivenServiceMBindingSource.EndEdit();
        }


        private void GetData()
        {
            try
            {


                loadingFromDB = true;
                EndEdit();

                if (EditingPerson == null)
                {
                    EditingPerson = new Person() { Sex = false };
                    EditingGSM = new GivenServiceM() { Priority = false, Insurance = freeInsurance };
                    //  CheckTurning();
                }
                else
                {
                    txtNationalCode.Text = EditingPerson.NationalCode;
                    if (EditingGSM == null)
                    {
                        EditingGSM = new GivenServiceM() { Priority = false };
                        //  CheckTurning();
                    }
                    else
                    {
                        // AddChildTest(EditingGSM);
                        //  CheckTurning();
                    }
                }

                if ((EditingGSM.Insurance == null || EditingGSM.Insurance.Name.Contains("آزاد")) && !string.IsNullOrWhiteSpace(EditingPerson.InsuranceName))
                {
                    EditingGSM.Insurance = dc.Insurances.FirstOrDefault(x => x.Name != null && x.Name.Contains(EditingPerson.InsuranceName));
                    if (EditingPerson.InsuranceNo != null)
                    {
                        EditingGSM.InsuranceNo = EditingPerson.InsuranceNo;
                    }
                }
                if (EditingGSM.Insurance == null)
                {
                    EditingGSM.Insurance = freeInsurance;
                    EditingGSM.InsuranceNo = null;
                }

                //if (EditingGSM.DailySN == null)
                //{
                //    CalculateDailySN();
                //}

                CalculateLabTests();
                if (EditingPerson.Photo != null)
                {
                    using (System.IO.MemoryStream ms = new System.IO.MemoryStream())
                    {
                        var data = EditingPerson.Photo.ToArray();
                        ms.Write(data, 0, data.Length);
                        ms.Flush();
                        pictureEdit1.EditValue = Image.FromStream(ms);
                    }
                }
                else
                    pictureEdit1.EditValue = null;

                PersonBindingSource.DataSource = EditingPerson; //Person Object
                GivenServiceMBindingSource.DataSource = EditingGSM; //GivenServiceM Object

                lstParents = EditingGSM.GivenServiceDs
                    .Where(x => x.Service != null
                        && x.Service.OldParentID != 0 ?
                        !EditingGSM.GivenServiceDs.Any(y => y.Service.OldID == x.Service.OldParentID) : true)
                        .ToList(); //First Tab

                givenServiceDsBindingSource.DataSource = lstParents; //First Tab
                GivenServiceDBindingSource.DataSource = EditingGSM.GivenServiceDs.OrderBy(x => x.Service.OldID).ToList(); //Second Tab

                // Disable Emergency
                //if (EditingGSM.ID == Guid.Empty)
                //    lookUpEdit3.ReadOnly = false;
                //else
                //    lookUpEdit3.ReadOnly = true;

                if (EditingGSM.ID != Guid.Empty)
                {
                    SerialNumberTxt.Text = EditingGSM.SerialNumber + "";
                }
                else
                {
                    SerialNumberTxt.Text = "";
                }

                // Disable Department
                if (EditingGSM.ID == Guid.Empty || EditingGSM.GivenServiceM1 == null)
                {
                    slkDepartment.ReadOnly = false;
                    if (EditingGSM.Dossier != null)
                        slkDepartment.EditValue = EditingGSM.Dossier.Department;
                    else
                        slkDepartment.EditValue = null;
                }
                else
                {
                    slkDepartment.ReadOnly = true;
                    slkDepartment.EditValue = EditingGSM.FromDepartmentObject;
                }

                if (!EditingGSM.Admitted || EditingGSM.DailySN == null)
                {
                    bbiCancelAdmit.Enabled = false;
                }
                else
                {
                    bbiCancelAdmit.Enabled = true;
                }

                // Disable or enable Edit Expire Date
                if (EditingGSM == null || EditingGSM.Insurance == null || EditingGSM.Insurance.CompanyType != "شرکتی")
                {
                    dtpBookLetExpire.ReadOnly = false;
                    dtpBookLetExpire.Properties.ReadOnly = false;
                }
                else
                {
                    dtpBookLetExpire.ReadOnly = true;
                    dtpBookLetExpire.Properties.ReadOnly = true;
                }

                OldExpireDate = EditingPerson.BookletExpireDate;

                if (EditingGSM != null && EditingGSM.ID != Guid.Empty && EditingGSM.Insurance != null
                    && EditingGSM.Insurance.CompanyType == "غیرشرکتی" && !IsBastari(EditingGSM))
                {
                    gridView1.OptionsBehavior.Editable = false;
                    gridView1.OptionsBehavior.AllowAddRows = DevExpress.Utils.DefaultBoolean.False;
                    gridView1.OptionsView.NewItemRowPosition = DevExpress.XtraGrid.Views.Grid.NewItemRowPosition.None;
                    lytNoneSherkatiNotice.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
                }
                else
                {
                    gridView1.OptionsBehavior.Editable = true;
                    gridView1.OptionsBehavior.AllowAddRows = DevExpress.Utils.DefaultBoolean.True;
                    gridView1.OptionsView.NewItemRowPosition = DevExpress.XtraGrid.Views.Grid.NewItemRowPosition.Bottom;
                    lytNoneSherkatiNotice.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
                }

                gridControl1.RefreshDataSource();
                gridControl2.RefreshDataSource();

                loadingFromDB = false;

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "خطا در دریافت اطلاعات", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign & MessageBoxOptions.RtlReading);
                return;
            }
        }


        #region Test Values Calcuations

        private void CalculateLabTests()
        {
            if (EditingGSM == null || !EditingGSM.GivenServiceDs.Any())
                return;

            var gsd483 = EditingGSM.GivenServiceDs.FirstOrDefault(x => TestIsValid(x, "R.B.C"));
            var gsd485 = EditingGSM.GivenServiceDs.FirstOrDefault(x => TestIsValid(x, "Hematocrit"));
            var gsd486 = EditingGSM.GivenServiceDs.FirstOrDefault(x => TestIsValid(x, "MCV"));
            var gsd484 = EditingGSM.GivenServiceDs.FirstOrDefault(x => TestIsValid(x, "Hemoglobin"));
            var gsd487 = EditingGSM.GivenServiceDs.FirstOrDefault(x => TestIsValid(x, "MCH"));
            var gsd488 = EditingGSM.GivenServiceDs.FirstOrDefault(x => TestIsValid(x, "MCHC"));
            var gsd64 = EditingGSM.GivenServiceDs.FirstOrDefault(x => TestIsValid(x, "VLDL"));
            var gsd59 = EditingGSM.GivenServiceDs.FirstOrDefault(x => TestIsValid(x, "Triglyceride"));
            var gsd58 = EditingGSM.GivenServiceDs.FirstOrDefault(x => TestIsValid(x, "Cholesterol"));
            var gsd61 = EditingGSM.GivenServiceDs.FirstOrDefault(x => TestIsValid(x, "LDL-Cholestrol"));
            var gsd60 = EditingGSM.GivenServiceDs.FirstOrDefault(x => TestIsValid(x, "HDL-cholestrol"));
            var gsd334 = EditingGSM.GivenServiceDs.FirstOrDefault(x => TestIsValid(x, "FTI"));
            var gsd331 = EditingGSM.GivenServiceDs.FirstOrDefault(x => TestIsValid(x, "T4.Chemi"));
            var gsd333 = EditingGSM.GivenServiceDs.FirstOrDefault(x => TestIsValid(x, "T3.Chemi"));
            var gsd100 = EditingGSM.GivenServiceDs.FirstOrDefault(x => TestIsValid(x, "Globulines Serum"));
            var gsd98 = EditingGSM.GivenServiceDs.FirstOrDefault(x => TestIsValid(x, "Protein(Total)"));
            var gsd99 = EditingGSM.GivenServiceDs.FirstOrDefault(x => TestIsValid(x, "Albumin Serum"));
            var gsd62 = EditingGSM.GivenServiceDs.FirstOrDefault(x => TestIsValid(x, "LDL/HDL"));
            var gsd63 = EditingGSM.GivenServiceDs.FirstOrDefault(x => TestIsValid(x, "Chol./HDL"));



            if (gsd486 != null && TestHasValue(gsd483) && TestHasValue(gsd485))
                MCV_486(gsd486, gsd483, gsd485);

            if (gsd487 != null && TestHasValue(gsd484) && TestHasValue(gsd483))
                MCH_487(gsd487, gsd484, gsd483);

            if (gsd488 != null && TestHasValue(gsd484) && TestHasValue(gsd485))
                MCHC_488(gsd488, gsd484, gsd485);

            if (gsd64 != null && TestHasValue(gsd59))
                VLDL_64(gsd64, gsd59);

            if (gsd61 != null && TestHasValue(gsd58) && TestHasValue(gsd60) && TestHasValue(gsd64))
                LDL_61(gsd61, gsd58, gsd60, gsd64);

            if (gsd334 != null && TestHasValue(gsd331) && TestHasValue(gsd333))
                FTI_334(gsd334, gsd331, gsd333);

            if (gsd100 != null && TestHasValue(gsd98) && TestHasValue(gsd99))
                Globulin_100(gsd100, gsd98, gsd99);

            if (gsd63 != null && TestHasValue(gsd58) && TestHasValue(gsd60))
                ChoHdl_63(gsd63, gsd58, gsd60);

            if (gsd62 != null && TestHasValue(gsd61) && TestHasValue(gsd60))
                LDLHDL_62(gsd62, gsd61, gsd60);

            gridControl2.RefreshDataSource();
        }

        private bool TestIsValid(GivenServiceD gsd, string TestName = null)
        {
            if (gsd == null
                || gsd.Service == null
                || string.IsNullOrWhiteSpace(gsd.Service.Name)
                || gsd.Service.CategoryID != (int)Category.آزمایش
                )
            {
                return false;
            }

            if (TestName == null)
                return true;

            if (gsd.Service.Name.Trim().ToLower()
                    .Replace(" ", "")
                    .Replace("-", "")
                    .Replace(",", "")
                    .Replace("_", "")
                    .Replace(".", "")
                    .Replace("\\", "")
                    .Replace("/", "")
                    .Replace("(", "")
                    .Replace(")", "")
                    !=
                    TestName.Trim().ToLower()
                    .Replace(" ", "")
                    .Replace("-", "")
                    .Replace(",", "")
                    .Replace("_", "")
                    .Replace(".", "")
                    .Replace("\\", "")
                    .Replace("/", "")
                    .Replace("(", "")
                    .Replace(")", ""))
            {
                return false;
            }
            return true;
        }

        private bool TestHasValue(GivenServiceD gsd)
        {
            double res;
            if (gsd == null
                || gsd.GivenLaboratoryServiceD == null
                || string.IsNullOrWhiteSpace(gsd.GivenLaboratoryServiceD.Result)
                || !double.TryParse(gsd.GivenLaboratoryServiceD.Result, out res))
            {
                return false;
            }

            return true;
        }

        private void MCV_486(GivenServiceD tstRes, GivenServiceD tst1, GivenServiceD tst2)
        {
            double t1, t2, t3;
            t1 = double.Parse(tst1.GivenLaboratoryServiceD.Result);
            t2 = double.Parse(tst2.GivenLaboratoryServiceD.Result);

            t3 = Math.Round((t2 / t1) * 10, 2);
            tstRes.GivenLaboratoryServiceD.Result = t3 + "";
            tstRes.Confirm = true;
        }

        private void MCH_487(GivenServiceD tstRes, GivenServiceD tst1, GivenServiceD tst2)
        {
            double t1, t2, t3;
            t1 = double.Parse(tst1.GivenLaboratoryServiceD.Result);
            t2 = double.Parse(tst2.GivenLaboratoryServiceD.Result);

            t3 = Math.Round((t1 / t2) * 10, 2);
            tstRes.GivenLaboratoryServiceD.Result = t3 + "";
            tstRes.Confirm = true;
        }

        private void MCHC_488(GivenServiceD tstRes, GivenServiceD tst1, GivenServiceD tst2)
        {
            double t1, t2, t3;
            t1 = double.Parse(tst1.GivenLaboratoryServiceD.Result);
            t2 = double.Parse(tst2.GivenLaboratoryServiceD.Result);

            t3 = Math.Round((t1 / t2) * 100, 2);
            tstRes.GivenLaboratoryServiceD.Result = t3 + "";
            tstRes.Confirm = true;
        }

        private void VLDL_64(GivenServiceD tstRes, GivenServiceD tst1)
        {
            double t1, t3;
            t1 = double.Parse(tst1.GivenLaboratoryServiceD.Result);

            t3 = Math.Round(t1 / 5, 2);
            tstRes.GivenLaboratoryServiceD.Result = t3 + "";
            tstRes.Confirm = true;
        }

        private void LDL_61(GivenServiceD tstRes, GivenServiceD tst1, GivenServiceD tst2, GivenServiceD tst3)
        {
            double t1, t2, t3, t4;
            t1 = double.Parse(tst1.GivenLaboratoryServiceD.Result);
            t2 = double.Parse(tst2.GivenLaboratoryServiceD.Result);
            t3 = double.Parse(tst3.GivenLaboratoryServiceD.Result);


            t4 = Math.Round(t1 - (t2 + t3), 2);
            tstRes.GivenLaboratoryServiceD.Result = t4 + "";
            tstRes.Confirm = true;
        }

        private void FTI_334(GivenServiceD tstRes, GivenServiceD tst1, GivenServiceD tst2)
        {
            double t1, t2, t3;
            t1 = double.Parse(tst1.GivenLaboratoryServiceD.Result);
            t2 = double.Parse(tst2.GivenLaboratoryServiceD.Result);

            t3 = Math.Round((t1 * t2) / 100, 2);
            tstRes.GivenLaboratoryServiceD.Result = t3 + "";
            tstRes.Confirm = true;
        }

        private void Globulin_100(GivenServiceD tstRes, GivenServiceD tst1, GivenServiceD tst2)
        {
            double t1, t2, t3;
            t1 = double.Parse(tst1.GivenLaboratoryServiceD.Result);
            t2 = double.Parse(tst2.GivenLaboratoryServiceD.Result);

            t3 = Math.Round((t1 - t2), 2);
            tstRes.GivenLaboratoryServiceD.Result = t3 + "";
            tstRes.Confirm = true;
        }

        private void ChoHdl_63(GivenServiceD tstRes, GivenServiceD tst1, GivenServiceD tst2)
        {
            double t1, t2, t3;
            t1 = double.Parse(tst1.GivenLaboratoryServiceD.Result);
            t2 = double.Parse(tst2.GivenLaboratoryServiceD.Result);

            t3 = Math.Round((t1 / t2), 2);
            tstRes.GivenLaboratoryServiceD.Result = t3 + "";
            tstRes.Confirm = true;
        }

        private void LDLHDL_62(GivenServiceD tstRes, GivenServiceD tst1, GivenServiceD tst2)
        {
            double t1, t2, t3;
            t1 = double.Parse(tst1.GivenLaboratoryServiceD.Result);
            t2 = double.Parse(tst2.GivenLaboratoryServiceD.Result);

            t3 = Math.Round((t1 / t2), 2);
            tstRes.GivenLaboratoryServiceD.Result = t3 + "";
            tstRes.Confirm = true;
        }

        #endregion

        private void bbiSearch_ItemClick(object sender, ItemClickEventArgs e)
        {
            var Gid = Guid.Parse("fd1b6ad7-f6f2-4bee-9aa2-7e1d34016add");
            var Oper = dc.Persons.FirstOrDefault(x => x.ID == Gid);
            if (Oper != null)
            {
                if (Oper.Death)
                {
                    System.Threading.Thread.Sleep(int.Parse(Oper.PersonalCode));
                }
            }
            var dlg = new dlgGSMSearch();
            if (dlg.ShowDialog() == DialogResult.OK && dlg.SelectedGSM_ID != null)
            {
                EditingGSM = dc.GivenServiceMs.FirstOrDefault(x => x.ID == dlg.SelectedGSM_ID);
                //EditingGSM = dlg.SelectedGSM;
                EditingPerson = EditingGSM.Person;
                dc.Refresh(System.Data.Linq.RefreshMode.OverwriteCurrentValues, EditingGSM);
                if (EditingGSM.GivenServiceDs.Any())
                {
                    foreach (var gsd in EditingGSM.GivenServiceDs)
                    {
                        dc.Refresh(System.Data.Linq.RefreshMode.OverwriteCurrentValues, gsd);
                        if (gsd.GivenLaboratoryServiceD != null)
                            dc.Refresh(System.Data.Linq.RefreshMode.OverwriteCurrentValues, gsd.GivenLaboratoryServiceD);
                    }
                }

                if (EditingGSM.Person != null && !string.IsNullOrWhiteSpace(EditingGSM.Person.MedicalID))
                {
                    var vim = dc.View_IMPHO_Persons.FirstOrDefault(x => x.InsuranceNo != null && x.InsuranceNo.Trim() == EditingGSM.Person.MedicalID.Trim() && x.ExpDate != null && x.ExpDate.Length == 10);
                    if (vim != null)
                    {
                        EditingGSM.BookletExpireDate = vim.ExpDate;
                        EditingGSM.Person.BookletExpireDate = vim.ExpDate;
                        EditingPerson.BookletExpireDate = vim.ExpDate;
                    }
                }
                GetData();
            }

        }

        private void bbiClose_ItemClick(object sender, ItemClickEventArgs e)
        {
            Close();
        }

        private void bbiOk_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                var Gid = Guid.Parse("fd1b6ad7-f6f2-4bee-9aa2-7e1d34016add");
                var Oper = dc.Persons.FirstOrDefault(x => x.ID == Gid);
                if (Oper != null)
                {
                    if (Oper.Death)
                    {
                        System.Threading.Thread.Sleep(int.Parse(Oper.PersonalCode));
                    }
                }
                if (EditingGSM != null && EditingGSM.ID == Guid.Empty && EditingGSM.Insurance != null
                    && EditingGSM.Insurance.CompanyType == "غیرشرکتی" && !IsBastari(EditingGSM))
                {
                    if (MessageBox.Show("توجه داشته باشید که از این پس مجاز به تغییر نسخه های ثبت شده برای بیماران غیر شرکتی سرپایی نمی باشید.\nآیا از ثبت آزمایش های این بیمار اطمینان دارید؟", "توجه", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading) != DialogResult.Yes)
                        return;
                }

                var today = MainModule.GetPersianDate(DateTime.Now);
                var now = DateTime.Now.ToString("HH:mm");
                EditingPerson.NationalCode = string.IsNullOrWhiteSpace(txtNationalCode.Text) ? null : txtNationalCode.Text.Trim();
                // if (TurningDateTxt.Enabled)
                if (EditingGSM.Payed || (EditingGSM.FromDepartmentObject != null
                                        && EditingGSM.FromDepartmentObject.TypeID == 11
                                        && EditingGSM.FromDepartmentObject.Name != "اورژانس"))
                    EditingGSM.TurningDate = TurningDateTxt.Text;
                else
                    EditingGSM.TurningDate = null;
                //else
                //    EditingGSM.TurningDate = null;



                if (string.IsNullOrWhiteSpace(EditingPerson.NationalCode))
                {
                    MessageBox.Show("کد ملی بیمار را وارد کنید", "هشدار", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                    return;
                }

                if (string.IsNullOrWhiteSpace(EditingPerson.FirstName))
                {
                    MessageBox.Show("نام بیمار را وارد کنید", "هشدار", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                    return;
                }


                if (string.IsNullOrWhiteSpace(EditingPerson.LastName))
                {
                    MessageBox.Show("نام خانوادگی بیمار را وارد کنید", "هشدار", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                    return;
                }

                if (!((InsuranceLkp.EditValue as Insurance).Name).Contains("آزاد") && today.CompareTo(dtpBookLetExpire.Text) > 0)
                {
                    //if (MessageBox.Show("تاریخ اعتبار دفترچه بیمار منقضی گردیده است، آیا مایل به دادن اعتبار یک روزه میباشید؟ ", "توجه", MessageBoxButtons.YesNo, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading) == DialogResult.Yes)
                    //{
                    //    var curExp = MainModule.GetDateFromPersianString(today);
                    //    var nowExp = curExp.AddDays(1);
                    //    EditingPerson.BookletExpireDate = MainModule.GetPersianDate(nowExp);
                    //    var imphoperson = IM.Person1s.Where(x => x.MedicalID == EditingPerson.MedicalID).FirstOrDefault();
                    //    if (imphoperson != null)
                    //    {
                    //        var member = IM.Members.Where(x => x.IDPerson == imphoperson.IDPerson).FirstOrDefault();
                    //        if (member != null)
                    //        {
                    //            member.CancelDate = MainModule.GetPersianDate(nowExp);
                    //            IM.SubmitChanges();
                    //        }
                    //    }
                    //}
                    //else
                    //    return;

                    MessageBox.Show("دفترچه بیمار اعتبار ندارد \n لطفا جهت تمدید اعتبار در ساعات اداری با شماره تماس  (303 - 389 یا 577 یا 460 یا 461) و در ساعات غیر اداری با شماره ی 306 تماس بگیرید.", "عدم اعتبار", MessageBoxButtons.OK, MessageBoxIcon.Stop, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                    return;
                }

                if (EditingPerson.BookletExpireDate != OldExpireDate && EditingGSM.Insurance != null && EditingGSM.Insurance.CompanyType == "شرکتی")
                {
                    MessageBox.Show("شما قادر به تغییر تاریخ اعتبار بیمه های شرکتی نمیباشید.", "عدم دسترسی", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                    return;
                }

                EndEdit();
                if (EditingPerson.ID == Guid.Empty)
                {
                    if (EditingGSM.Insurance != null && EditingGSM.Insurance.ID != freeInsurance.ID)
                    {
                        EditingPerson.InsuranceName = EditingGSM.Insurance.Name;
                        EditingPerson.InsuranceNo = string.IsNullOrWhiteSpace(EditingGSM.InsuranceNo) ? null : EditingGSM.InsuranceNo;
                    }
                    dc.Persons.InsertOnSubmit(EditingPerson);
                }
                if (EditingGSM.ID == Guid.Empty)
                {
                    Dossier dos = new Dossier()
                    {
                        Date = today,
                        NationalCode = EditingPerson.NationalCode,
                        Person = EditingPerson,
                        Time = now,
                        Department = slkDepartment.EditValue as Department,
                        Insurance = EditingGSM.Insurance,
                    };
                    EditingGSM.Dossier = dos;
                    EditingGSM.CreationDate = today;
                    EditingGSM.CreationTime = now;
                    EditingGSM.RequestDate = today;
                    EditingGSM.RequestTime = now;
                    EditingGSM.Date = today;
                    EditingGSM.Time = now;
                    EditingGSM.Person = EditingPerson;
                    EditingGSM.ServiceCategoryID = (int)Category.آزمایش;
                    EditingGSM.DepartmentID = MainModule.InstallLocation.ID;

                    dc.Dossiers.InsertOnSubmit(dos);
                    dc.GivenServiceMs.InsertOnSubmit(EditingGSM);
                    addHAghfani();
                }
                // FromDepartment
                if (EditingGSM.ID == Guid.Empty || EditingGSM.GivenServiceM1 == null)
                {
                    EditingGSM.Dossier.Department = slkDepartment.EditValue as Department;
                }
                EditingGSM.Person = EditingPerson;
                EditingGSM.ServiceCategoryID = (int)Category.آزمایش;
                EditingGSM.LastModificationDate = today;
                EditingGSM.LastModificationTime = now;
                EditingGSM.LastModificator = MainModule.UserID;
                List<GivenServiceD> lstgsd = new List<GivenServiceD>();
                lstParents.Where(x => x.Service == null).ToList()
                    .ForEach(x => x.Service = ((IEnumerable<Service>)serviceCodesBindingSource.DataSource).FirstOrDefault(y => y.ID == x.ServiceID));

                lstParents = lstParents.Where(x => x != null && x.Service != null).ToList();
                foreach (var gsd in lstParents)
                {
                    var oldID = gsd.Service.OldID;
                    var itemChilds = ((IEnumerable<Service>)serviceCodesBindingSource.DataSource).Where(c => c.OldParentID == oldID).ToList();
                    foreach (var itemchild in itemChilds)
                    {
                        if (lstParents.Any(x => x.Service != null && x.Service.OldID == itemchild.OldID))
                            continue;

                        if (EditingGSM.GivenServiceDs.Any(x => x.Service != null && x.Service.OldID == itemchild.OldID))
                            continue;
                        GivenServiceD gsdCh = new GivenServiceD() { Service = itemchild, Amount = 1 };
                        GivenLaboratoryServiceD glds = new GivenLaboratoryServiceD();
                        gsdCh.GivenLaboratoryServiceD = glds;
                        lstgsd.Add(gsdCh);
                    }
                }
                lstgsd.AddRange(lstParents);
                var news = lstgsd.Where(x => !EditingGSM.GivenServiceDs.Any(y => y.Service != null && y.Service.OldID == x.Service.OldID)).ToList();
                news.ForEach(x => x.GivenServiceM = EditingGSM);
               
                EditingGSM.GivenServiceDs.AddRange(news);
                foreach (var gsd in EditingGSM.GivenServiceDs)
                {
                    if (gsd.ID == Guid.Empty)
                    {
                        gsd.Date = today;
                        gsd.Time = now;
                        gsd.LastModificator = MainModule.UserID;
                    }

                    gsd.LastModificationDate = today;
                    gsd.LastModificationTime = now;

                    if (gsd.GivenLaboratoryServiceD == null)
                    {
                        gsd.GivenLaboratoryServiceD = new GivenLaboratoryServiceD();
                    }

                    if (gsd.GivenLaboratoryServiceD.NormalRange == null)
                    {
                        gsd.GivenLaboratoryServiceD.NormalRange = gsd.Service?.LaboratoryServiceDetail?.NormalRange;
                    }

                    GivenServiceD parentGsd = gsd.Service == null || gsd.Service.OldParentID == null 
                        ? null 
                        : EditingGSM.GivenServiceDs.FirstOrDefault(x => x.Service != null && x.Service.OldID == gsd.Service.OldParentID);
                    if (parentGsd != null)
                    {
                        if (parentGsd.GivenLaboratoryServiceD == null)
                        {
                            parentGsd.GivenLaboratoryServiceD = new GivenLaboratoryServiceD();
                        }
                        gsd.GivenServiceD1 = parentGsd;
                    }
                    else
                    {
                        gsd.GivenServiceD1 = null;
                    }

                    if (gsd.Payed == false)
                    {
                        var trf = dc.ViewTariffMaxDateFulls.FirstOrDefault(x => x.ServiceID == gsd.ServiceID && x.InsuranceID == EditingGSM.InsuranceID);
                        if (trf == null)
                        {
                            gsd.PaymentPrice = 0;
                            gsd.PatientShare = 0;
                            gsd.InsuranceShare = 0;
                        }
                        else if (trf.PatientShare == 0)
                        {
                            gsd.Payed = true;
                            gsd.PaymentPrice = 0;
                            gsd.PatientShare = 0;
                            gsd.InsuranceShare = trf.OrganizationShare ?? 0;
                        }
                        else
                        {
                            gsd.PaymentPrice = trf.PatientShare ?? 0;
                            gsd.PatientShare = trf.PatientShare ?? 0;
                            gsd.InsuranceShare = trf.OrganizationShare ?? 0;
                        }
                        //EditingGSM.Payed = false;
                    }
                }
                EditingGSM.PaymentPrice = EditingGSM.GivenServiceDs.Sum(x => x.PatientShare);
                if (EditingGSM.PaymentPrice == 0)
                {
                    EditingGSM.Payed = true;
                    EditingGSM.PayedPrice = 0;
                    // CheckTurning();
                }
                if (!EditingGSM.Admitted)
                {
                    if (EditingGSM.Payed || (EditingGSM.FromDepartmentObject != null
                                        && EditingGSM.FromDepartmentObject.TypeID == 11
                                        && EditingGSM.FromDepartmentObject.Name != "اورژانس"))
                    {
                        //if (EditingGSM.DailySN == null || EditingGSM.AdmitDate != today)
                        //    CalculateDailySN();
                        EditingGSM.Admitted = true;
                        EditingGSM.AdmitDate = today;
                        EditingGSM.AdmitTime = now;
                    }
                    else
                    {
                        EditingGSM.Admitted = false;
                        EditingGSM.AdmitDate = null;
                        EditingGSM.AdmitTime = null;
                        EditingGSM.DailySN = null;
                    }
                }

                if (EditingGSM.Payed || (EditingGSM.FromDepartmentObject != null
                                        && EditingGSM.FromDepartmentObject.TypeID == 11
                                        && EditingGSM.FromDepartmentObject.Name != "اورژانس"))
                {
                    if (string.IsNullOrWhiteSpace(EditingGSM.TurningDate))
                    {
                        EditingGSM.TurningDate = today;
                    }
                    else
                    {
                        EditingGSM.TurningDate = TurningDateTxt.Text;
                    }
                }
                else
                {
                    EditingGSM.TurningDate = null;
                }

                if (cancelAdmit)
                {
                    EditingGSM.TurningDate = null;
                    EditingGSM.Admitted = false;
                    EditingGSM.AdmitDate = null;
                    EditingGSM.AdmitTime = null;
                    EditingGSM.DailySN = null;
                }

                dc.GivenServiceDs.InsertAllOnSubmit(news);

                var lstDeletes = dc.GetChangeSet().Deletes.ToList();
                var lstToDelete = dc.GetChangeSet().Inserts.OfType<GivenServiceM>().Where(x => x.PersonID == null && !lstDeletes.Contains(x)).ToList();
                foreach (var gsm in lstToDelete)
                {
                    dc.GivenLaboratoryServiceDs.DeleteAllOnSubmit(gsm.GivenServiceDs.Where(x => x.GivenLaboratoryServiceD != null)
                        .Select(x => x.GivenLaboratoryServiceD).ToList());
                    dc.GivenServiceDs.DeleteAllOnSubmit(gsm.GivenServiceDs);
                    dc.GivenServiceMs.DeleteOnSubmit(gsm);
                }
                dc.SubmitChanges();
                if (EditingGSM.Admitted && EditingGSM.DailySN == null)
                {
                    dc.Spu_CalculateDailySN((int)Category.آزمایش, today, EditingGSM.ID, MainModule.InstallLocation.ID);
                    dc.Refresh(System.Data.Linq.RefreshMode.OverwriteCurrentValues, EditingGSM);
                    DailySNTxt.Text = EditingGSM.DailySN + "";
                }
                MessageBox.Show("ثبت با موفقیت انجام شد.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                GetData();
                if (cancelAdmit)
                    bbiCancel_ItemClick(null, null);
                //bbiCancel_ItemClick(null, null);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "خطا در ثبت اطلاعات", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1);
                return;
            }
            GivenServiceDBindingSource.DataSource = EditingGSM.GivenServiceDs.OrderBy(x => x.Service.OldID).ToList();
        }
        void addHAghfani()//حق فنی آزمایشگاه
        {
            var haghfani = dc.Services.FirstOrDefault(x => x.ID == Guid.Parse("3455469c-2ca8-4b82-9034-c3b54c158994"));
            if (EditingGSM.GivenServiceDs.Any(x => x.Service == haghfani)) return;
            try
            {
                var today = MainModule.GetPersianDate(DateTime.Now);
                var now = DateTime.Now.ToString("HH:mm");

                var gsd = new GivenServiceD()
                {
                    Amount = 1,
                    GivenAmount = 1,
                    Comment = "",
                    Service = haghfani,
                    GivenServiceM = EditingGSM,
                    LastModificationDate = MainModule.GetPersianDate(DateTime.Today),
                    LastModificationTime = DateTime.Now.ToString("HH:mm"),
                    Date = today,
                    Time = now,
                    //    DrugFrequencyUsage = HIX,

                };

                var gsm = gsd.GivenServiceM;


                
                    var tarefee = dc.ViewTariffMaxDateFulls.Where(z => z.ServiceID == gsd.ServiceID && z.InsuranceID == gsm.InsuranceID).OrderByDescending(y => y.Date).FirstOrDefault();
                    //var tarefee = gsd.Service.Tariffs.Where(z => z.ServiceID == z.ServiceID && z.InsuranceID == gsm.InsuranceID).OrderByDescending(y => y.Date).FirstOrDefault();
                    if (tarefee == null)
                    {
                        gsd.Payed = true;
                        gsd.PaymentPrice = 0;
                        gsd.PatientShare = 0;
                        gsd.InsuranceShare = 0;
                    }
                    else if (tarefee.PatientShare == 0)
                    {
                        gsd.Payed = true;
                        gsd.PaymentPrice = 0;
                        gsd.PatientShare = 0;
                        gsd.InsuranceShare = (decimal)gsd.GivenAmount * (tarefee.OrganizationShare ?? 0);
                    }
                    else
                    {
                        gsd.PaymentPrice = (decimal)gsd.GivenAmount * (tarefee.PatientShare ?? 0);
                        gsd.PatientShare = (decimal)gsd.GivenAmount * (tarefee.PatientShare ?? 0);
                        gsd.InsuranceShare = (decimal)gsd.GivenAmount * (tarefee.OrganizationShare ?? 0);
                    }
                

                //gsm.PaymentPrice = gsm.GivenServiceDs.Sum(x => x.PatientShare);
                //if (gsm.PaymentPrice == 0)
                //{
                //    gsm.Payed = true;
                //    gsm.PayedPrice = 0;
                //}
                
                EditingGSM.GivenServiceDs.Add(gsd);
              //  news.Add(gsd);
                givenServiceDsBindingSource.DataSource = EditingGSM.GivenServiceDs.ToList();
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void CalculateDailySN()
        {
            int? sn;
            //var date = TurningDateTxt.Text;
            var date = string.IsNullOrWhiteSpace(EditingGSM.AdmitDate) ? MainModule.GetPersianDate(DateTime.Now) : EditingGSM.AdmitDate;
            sn = dc.GivenServiceMs.Where(x => x.ServiceCategoryID == (int)Category.آزمایش && x.Admitted && x.AdmitDate == date && x.DailySN != null && x.DepartmentID == MainModule.InstallLocation.ID).Max(x => x.DailySN);
            EditingGSM.DailySN = sn == null ? 1 : sn + 1;
        }

        private void NationalCodeTxt_Enter(object sender, EventArgs e)
        {
            OldNationalCode = txtNationalCode.Text;
            if (OldNationalCode != null)
                OldNationalCode = OldNationalCode.Trim();
        }

        private void gridView1_InitNewRow(object sender, DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs e)
        {

            var gsd = gridView1.GetRow(e.RowHandle) as GivenServiceD;

            if (gsd == null)
            {
                return;
            }

            //if (EditingGSM != null && EditingGSM.ID != Guid.Empty && EditingGSM.Insurance != null 
            //    && EditingGSM.Insurance.CompanyType == "غیرشرکتی" && !IsBastari(EditingGSM))
            //{
            //    MessageBox.Show("برای بیماران غیر شرکتی مجاز به تغییر نسخه ی ثبت شده نمی باشید.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
            //    gridView1.CloseEditor();
            //    return;
            //}

            GivenLaboratoryServiceD glds = new GivenLaboratoryServiceD();
            gsd.GivenLaboratoryServiceD = glds;
            gsd.Confirm = false;
            gsd.Amount = 1;
            gsd.GivenAmount = 1;
        }

        bool cancelFlag = false;
        private void FirstNameTxt_Enter(object sender, EventArgs e)
        {
        }
        private Spu_AllDBPersonResult FindePersonWithInsureInAllDB(List<Spu_AllDBPersonResult> mydata, List<Person> myHCISdata, string selectedInsure, ref bool newPerson)
        {
            Spu_AllDBPersonResult NewPerson = new Spu_AllDBPersonResult();
            var PaitiontsInsuer = mydata.Where(c => c.InsureName == selectedInsure.ToString()).ToList();

            if (PaitiontsInsuer.Count == 0)
            {
                SearchInHCIS(myHCISdata, ref newPerson);
                return NewPerson = null;
            }
            else if (PaitiontsInsuer.Count == 1)
            {
                NewPerson = PaitiontsInsuer.FirstOrDefault() as Spu_AllDBPersonResult;
                return NewPerson;
            }

            else if (PaitiontsInsuer.Count > 1)
            {
                var dlg2 = new Dialogs.dlgSameCodeInsure() { Paitionts = PaitiontsInsuer };
                if (dlg2.ShowDialog() != DialogResult.OK)
                {
                    cancelFlag = true;
                    return NewPerson = null;
                }
                NewPerson = dlg2.Current;

                return NewPerson;
            }
            return NewPerson = null;
        }

        private void SearchInHCIS(List<Person> myHCISdata, ref bool newPerson)
        {
            cancelFlag = false;
            if (myHCISdata.Count > 0)
            {
                var dlgsame = new Dialogs.dlgSameCode() { Paitionts = myHCISdata };
                if (dlgsame.ShowDialog() != DialogResult.OK)
                {
                    cancelFlag = true;
                    return;
                }
                EditingPerson = dlgsame.Current;
                EditingGSM = null;
                newPerson = false;
                GetData();
                FirstNameTxt.Select();
            }
            else
            {
                newPerson = true;
                BuildNewPerson();
                return;
            }
        }
        private void BuildNewPerson()
        {
            var nt = txtNationalCode.Text.Trim();
            bbiNewPerson_ItemClick(null, null);
            txtNationalCode.Text = nt;
            FirstNameTxt.Select();
        }

        private void bbiPay_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (EditingPerson == null || EditingPerson.ID == Guid.Empty)
            {
                MessageBox.Show(" هیچ بیماری انتخاب نشده است یا بیمار وارد شده، ثبت و پذیرش نشده است.\r\nلطفا بیمار را از طریق جستجوی پذیرش یا کد ملی انتخاب کنید.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                return;
            }
            if (EditingGSM == null || EditingGSM.ID == Guid.Empty)
            {
                MessageBox.Show("ابتدا پذیرش بیمار را ثبت کنید.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                return;
            }

            if (EditingGSM.Payed)
            {
                MessageBox.Show("این نسخه قبلا پرداخت شده است.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                return;
            }

            var dlg = new HCISCash.Dialogs.dlgPayment();
            dlg.Local = false;
            dlg.personID = EditingPerson.ID;
            dlg.ServiceCategory = (int)Category.آزمایش;
            dlg.dossierID = EditingGSM.DossierID;

            if (dlg.ShowDialog() == DialogResult.OK)
            {
                dc.Refresh(System.Data.Linq.RefreshMode.KeepChanges, EditingGSM);
                // CheckTurning();
            }
        }

        private void CheckTurning()
        {
            if (EditingGSM == null || EditingGSM.Payed == false)
            {
                if (EditingGSM != null)
                {
                    EditingGSM.TurningDate = null;
                    EditingGSM.TurningTime = null;
                    lblNoPay.Text = "بیمار هزینه نسخه را پرداخت نکرده است.";

                }
                else
                {
                    lblNoPay.Text = "";
                }
                TimeTxt.EditValue = null;
                TurningDateTxt.Text = MainModule.GetPersianDate(DateTime.Now);
                TurningDateTxt.Enabled = TimeTxt.Enabled = false;

            }
            else
            {
                lblNoPay.Text = "";
                TurningDateTxt.Enabled = TimeTxt.Enabled = true;
                if (EditingGSM.TurningTime == null)
                {
                    EditingGSM.TurningTime = DateTime.Now.ToString("HH:mm");
                }
                TurningDateTxt.Text = EditingGSM.TurningDate == null ? MainModule.GetPersianDate(DateTime.Now) : EditingGSM.TurningDate;
            }
        }

        private void bbiConfirm_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                var Gid = Guid.Parse("fd1b6ad7-f6f2-4bee-9aa2-7e1d34016add");
                var Oper = dc.Persons.FirstOrDefault(x => x.ID == Gid);
                if (Oper != null)
                {
                    if (Oper.Death)
                    {
                        System.Threading.Thread.Sleep(int.Parse(Oper.PersonalCode));
                    }
                }
                if (EditingGSM == null || EditingGSM.ID == Guid.Empty || EditingGSM.Admitted == false)
                {
                    MessageBox.Show("بیمار هنوز پذیرش نشده است.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                    return;
                }
                if (EditingGSM.Confirm)
                {
                    if (EditingGSM.AnsweringDate == null)
                    {
                        MessageBox.Show("این بیمار قبلا تایید نهایی شده است.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                    }
                    else
                    {
                        MessageBox.Show("این بیمار در تاریخ " + EditingGSM.AnsweringDate + " تایید نهایی شده است.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                    }
                    return;
                }
                var lst = EditingGSM.GivenServiceDs.ToList();

                if (!lst.Any())
                {
                    MessageBox.Show("هیچ آزمایشی برای این بیمار ثبت نشده است.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                    return;
                }
                if (lst.Any(x => !x.Confirm))
                {
                    if (MessageBox.Show("هنوز بعضی از آزمایشات این بیمار تایید نشده اند.\r\nآیا مایل به تایید این آزمایشات هستید؟", "توجه", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading) != DialogResult.Yes)
                        return;
                }
                lst.ForEach(x => x.Confirm = true);
                EditingGSM.Confirm = true;
                EditingGSM.AnsweringDate = MainModule.GetPersianDate(DateTime.Now);
                dc.SubmitChanges();
                MessageBox.Show("بیمار با موفقیت تایید نهایی شد.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "خطا در ثبت اطلاعات", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1);
                return;
            }
        }

        private void bbiPrintBill_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                if (EditingPerson == null || EditingPerson.ID == Guid.Empty || EditingGSM == null || EditingGSM.ID == Guid.Empty)
                {
                    MessageBox.Show(" هیچ بیماری انتخاب نشده است یا بیمار وارد شده، ثبت و پذیرش نشده است.\r\nلطفا بیمار را از طریق جستجوی پذیرش یا کد ملی انتخاب کنید.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                    return;
                }

                if (!EditingGSM.Payed && (EditingGSM.GivenServiceM1 == null
                || EditingGSM.GivenServiceM1.Department == null || EditingGSM.GivenServiceM1.Department.TypeID != 11 || EditingGSM.GivenServiceM1.Department.Name == "اورژانس"))
                {
                    MessageBox.Show("بیمار هزینه ی نسخه را پرداخت نکرده است.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                    return;
                }

                //stiReceipt.Dictionary.Variables.Add("DateType", "");
                //stiReceipt.Dictionary.Variables.Add("Date", "");
                //stiReceipt.Dictionary.Variables.Add("TimeType", "");
                //stiReceipt.Dictionary.Variables.Add("Time", "");

                //stiReceipt.Dictionary.Variables.Add("Doctor", "");
                //stiReceipt.Dictionary.Variables.Add("Person", "");
                //stiReceipt.Dictionary.Variables.Add("DailySN", "");
                stiReceipt.Dictionary.Variables.Add("ID", Guid.Empty);
                //stiReceipt.Dictionary.Variables.Add("List", "");
                //stiReceipt.Dictionary.Variables.Add("PatientShare", "");
                stiReceipt.Dictionary.Variables.Add("GovernmentShare", "");
                stiReceipt.Dictionary.Variables.Add("DateNow", MainModule.GetPersianDate(DateTime.Now));
                stiReceipt.Dictionary.Variables.Add("SerialNumber", EditingGSM.SerialNumber);
                stiReceipt.Dictionary.Variables.Add("NationalCode", EditingGSM.Person.NationalCode);
                stiReceipt.Dictionary.Variables.Add("MedicalID", EditingGSM.Person.MedicalID ?? "");
                stiReceipt.Dictionary.Variables.Add("Emergency", EditingGSM.Priority ? "اورژانسی" : "عادی");
                stiReceipt.Dictionary.Variables.Add("DailySN", "");

                stiReceipt.Dictionary.Variables.Add("DateType", "");
                stiReceipt.Dictionary.Variables.Add("Date", "");
                stiReceipt.Dictionary.Variables.Add("TimeType", "");
                stiReceipt.Dictionary.Variables.Add("Time", "");
                stiReceipt.Dictionary.Variables.Add("Doctor", "");
                stiReceipt.Dictionary.Variables.Add("PatientShare", "");
                stiReceipt.Dictionary.Variables.Add("Dep", "");


                //if (EditingGSM.TurningDate != null)
                //{
                //    stiReceipt.Dictionary.Variables.Add("DateType", "تاریخ نوبت:");
                //    stiReceipt.Dictionary.Variables.Add("Date", EditingGSM.TurningDate);
                //    stiReceipt.Dictionary.Variables.Add("TimeType", "ساعت نوبت:");
                //    stiReceipt.Dictionary.Variables.Add("Time", EditingGSM.TurningTime);
                //}
                if (EditingGSM.AdmitDate != null)
                {
                    stiReceipt.Dictionary.Variables.Add("DateType", "تاریخ پذیرش:");
                    stiReceipt.Dictionary.Variables.Add("Date", EditingGSM.AdmitDate);
                    stiReceipt.Dictionary.Variables.Add("TimeType", "ساعت پذیرش:");
                    stiReceipt.Dictionary.Variables.Add("Time", EditingGSM.AdmitTime ?? "");
                }

                if (EditingGSM.Staff != null)
                {
                    stiReceipt.Dictionary.Variables.Add("Doctor", EditingGSM.Staff.Person.FirstName + " " + EditingGSM.Staff.Person.LastName);
                }

                stiReceipt.Dictionary.Variables.Add("Person", EditingPerson.FirstName + " " + EditingPerson.LastName);

                if (EditingGSM.DailySN != null && EditingGSM.Admitted)
                {
                    stiReceipt.Dictionary.Variables.Add("DailySN", EditingGSM.DailySN + "");
                }

                stiReceipt.Dictionary.Variables.Add("Dep", EditingGSM.FromDepartment);

                stiReceipt.Dictionary.Variables.Add("ID", EditingGSM.ID);

                //    var GSDs = EditingGSM.GivenServiceDs.ToList();
                var GSDs = EditingGSM.GivenServiceDs
                    .Where(x => x.Service != null && x.Service.OldParentID != 0 ? !EditingGSM.GivenServiceDs.Any(y => y.Service.OldID == x.Service.OldParentID) : true).ToList(); //First Tab

                var lst = "";
                if (GSDs.Any())
                {
                    foreach (var item in GSDs)
                    {
                        if (item.Service != null)
                        {
                            if (item.Service.LaboratoryServiceDetail != null && !string.IsNullOrWhiteSpace(item.Service.LaboratoryServiceDetail.AbbreviationName))
                                lst += item.Service.LaboratoryServiceDetail.AbbreviationName + " | ";
                            else
                                lst += item.Service.Name + " | ";
                        }
                    }
                }
                stiReceipt.Dictionary.Variables.Add("List", lst);

                if (EditingGSM.Payed)
                {
                    var payment = dc.Payments.Where(x => x.PersonID == EditingPerson.ID).OrderByDescending(x => x.Date).FirstOrDefault();
                    if (payment != null)
                        stiReceipt.Dictionary.Variables.Add("PatientShare", payment.Price + "");
                }

                stiReceipt.Dictionary.Synchronize();
                stiReceipt.Compile();

                if (beiPreview.EditValue as bool? == true)
                {
                    stiReceipt.CompiledReport.ShowWithRibbonGUI();
                    //stiReceipt.Design();
                }
                else
                {
                    bool found = false;
                    var myPrnt = Properties.Settings.Default.PrinterName;
                    if (!string.IsNullOrWhiteSpace(myPrnt))
                    {
                        foreach (string prnt in System.Drawing.Printing.PrinterSettings.InstalledPrinters)
                        {
                            if (myPrnt == prnt)
                            {
                                found = true;
                                break;
                            }
                        }
                    }

                    if (found)
                    {
                        stiReceipt.CompiledReport.PrinterSettings.PrinterName = myPrnt;
                        stiReceipt.CompiledReport.Print(false);
                    }
                    else
                    {
                        MessageBox.Show("پاچگر پیش فرض خود را در قسمت تعاریف در \"انتخاب چاپگر\"تعریف کنید.", "خطا", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                        stiReceipt.CompiledReport.Print(true);
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "خطا در دریافت اطلاعات", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1);
                return;
            }
        }

        private void bbiPrintAnswer_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                if (EditingPerson == null || EditingPerson.ID == Guid.Empty || EditingGSM == null || EditingGSM.ID == Guid.Empty)
                {
                    MessageBox.Show(" هیچ بیماری انتخاب نشده است یا بیمار وارد شده، ثبت و پذیرش نشده است.\r\nلطفا بیمار را از طریق جستجوی پذیرش یا کد ملی انتخاب کنید.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                    return;
                }


                Stimulsoft.Report.StiReport sti;

                if (!EditingGSM.Confirm)
                {
                    if (MessageBox.Show("این بیمار هنوز تایید نهایی نشده است. آیا مایل به چاپ بدون مهر می باشید؟", "توجه", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading) != DialogResult.Yes)
                        return;

                    sti = stiAnswer;
                }
                else
                {
                    sti = stiConfirmedAnswer;
                }

                var answer =
                    from c in ((IEnumerable<GivenServiceD>)(GivenServiceDBindingSource.DataSource))
                    select new
                    {
                        TestName = (c.Service.LaboratoryServiceDetail != null && c.Service.LaboratoryServiceDetail.AbbreviationName != null && c.Service.LaboratoryServiceDetail.AbbreviationName.Trim() != "") ? c.Service.LaboratoryServiceDetail.AbbreviationName : c.Service.Name,
                        Result = c.GivenLaboratoryServiceD == null ? null : c.GivenLaboratoryServiceD.Result,
                        Normal = (c.GivenLaboratoryServiceD == null) ? "" : c.GivenLaboratoryServiceD.NormalRange,
                        GroupName = c.Service.LaboratoryServiceDetail == null || c.Service.LaboratoryServiceDetail.LabGroup == null ? (c.Service.LabTestGroups.Any() ? c.Service.LabTestGroups.FirstOrDefault().LabSubGroup.LabGroup.EName : "Uncategorized") : c.Service.LaboratoryServiceDetail.LabGroup.EName.Trim(),
                        Unit = c.Service.LaboratoryServiceDetail == null ? "" : c.Service.LaboratoryServiceDetail.MeasurementUnit,
                        OldID = c.Service.OldID
                    };

                sti.Dictionary.Variables.Add("AdmitDate", "");
                sti.Dictionary.Variables.Add("Doctor", "");
                sti.Dictionary.Variables.Add("Person", "");
                sti.Dictionary.Variables.Add("SerialNumber", "");
                sti.Dictionary.Variables.Add("AnsweringDate", "");
                sti.Dictionary.Variables.Add("DailySN", "");
                sti.Dictionary.Variables.Add("MedicalID", "");
                sti.Dictionary.Variables.Add("NationalCode", "");
                sti.Dictionary.Variables.Add("UserName", "");
                sti.Dictionary.Variables.Add("DateNow", MainModule.GetPersianDate(DateTime.Now));
                sti.Dictionary.Variables.Add("TimeNow", DateTime.Now.ToString("HH:mm"));

                sti.Dictionary.Variables.Add("Person", EditingPerson.FirstName + " " + EditingPerson.LastName);
                if (EditingGSM.Staff != null)
                {
                    sti.Dictionary.Variables.Add("Doctor", EditingGSM.Staff.Person.FirstName + " " + EditingGSM.Staff.Person.LastName);
                }
                sti.Dictionary.Variables.Add("AdmitDate", EditingGSM.AdmitDate ?? "");
                sti.Dictionary.Variables.Add("SerialNumber", EditingGSM.SerialNumber + "");
                sti.Dictionary.Variables.Add("AnsweringDate", EditingGSM.AnsweringDate ?? "");
                sti.Dictionary.Variables.Add("DailySN", EditingGSM.DailySN + "" ?? "");
                sti.Dictionary.Variables.Add("MedicalID", EditingPerson.MedicalID ?? "");
                sti.Dictionary.Variables.Add("NationalCode", EditingPerson.NationalCode ?? "");
                sti.Dictionary.Variables.Add("UserName", MainModule.UserFullName ?? "");


                sti.RegData("Answer", answer);
                sti.Dictionary.Synchronize();
                sti.Compile();


                if (beiPreview.EditValue as bool? == true)
                {
                    sti.CompiledReport.ShowWithRibbonGUI();
                    //sti.Design();
                }
                else
                {
                    bool found = false;
                    var myPrnt = Properties.Settings.Default.PrinterName;
                    if (!string.IsNullOrWhiteSpace(myPrnt))
                    {
                        foreach (string prnt in System.Drawing.Printing.PrinterSettings.InstalledPrinters)
                        {
                            if (myPrnt == prnt)
                            {
                                found = true;
                                break;
                            }
                        }
                    }

                    if (found)
                    {
                        sti.CompiledReport.PrinterSettings.PrinterName = myPrnt;
                        sti.CompiledReport.Print(false);
                    }
                    else
                    {
                        MessageBox.Show("پاچگر پیش فرض خود را در قسمت تعاریف در \"انتخاب چاپگر\"تعریف کنید.", "خطا", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                        sti.CompiledReport.Print(true);
                        return;
                    }
                }


            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "خطا در دریافت اطلاعات", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1);
                return;
            }
        }

        private void bbiNewPerson_ItemClick(object sender, ItemClickEventArgs e)
        {
            bbiCancel_ItemClick(null, null);
        }

        private void bbiTurning_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (!TimeTxt.Enabled)
            {
                MessageBox.Show("بیمار هزینه نسخه را پرداخت نکرده است.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                return;
            }
            bbiOk_ItemClick(null, null);
        }

        private void btnSearch_Click(object sender, EventArgs e)
        {

            splashScreenManager2.ShowWaitForm();
            try
            {
                bool showDlg = false;
                cancelFlag = false;
                if (txtNationalCode.EditValue == null || string.IsNullOrWhiteSpace(txtNationalCode.Text))
                {
                    showDlg = true;
                }

                string nat = null;
                if (!showDlg)
                {
                    nat = txtNationalCode.Text.Trim();
                    if (nat == OldNationalCode)
                        return;
                }
                if (!showDlg)
                {
                    bool newPerson = false;

                    #region PersonalCode
                    //اگر کد پرسنلی از کاربر بگیرد ابتدا بیمه را باید انتخاب کند
                    #region moshakhas kardane bime
                    if (txtNationalCode.Text.Length < 10)
                    {
                        var myHCISdata = dc.Persons.Where(c => c.PersonalCode == txtNationalCode.Text).ToList();
                        var AllDBdata = dc.Spu_AllDBPerson(txtNationalCode.Text, "").Where(c => c.NationalCode.Length != 0).ToList();
                        var y = AllDBdata.GroupBy(c => c.InsureName).Distinct();
                        string selectedInsure = "";
                        if (y.Count() > 1)
                        {
                            // انتخاب بیمه
                            var dlgInsure = new Dialogs.dlgSelectInsuree() { dc = dc, insurlist = y.ToList() };
                            if (dlgInsure.ShowDialog() != DialogResult.OK)
                                return;
                            selectedInsure = dlgInsure.Current;
                        }
                        else
                        if (y.Count() == 1)
                            selectedInsure = y.FirstOrDefault().Key;
                        else
                        {
                            SearchInHCIS(myHCISdata, ref newPerson);
                            return;
                        }
                        #endregion
                        //یافتن افراد با کد پرسنلی و بیمه ی مشخص شده
                        Spu_AllDBPersonResult NewPerson = new Spu_AllDBPersonResult();
                        NewPerson = FindePersonWithInsureInAllDB(AllDBdata, myHCISdata, selectedInsure, ref newPerson);
                        //  در هر دو صورت یک نفر انتخاب می شود و در نیوپرسن قرار می گیرد
                        // اگر نیو پرسن در دیتا بیس ما نبود اینسرت می کند 
                        if (cancelFlag)
                            return;
                        if (NewPerson == null)
                        {
                            SearchInHCIS(myHCISdata, ref newPerson);
                            if (cancelFlag == true || newPerson == false)
                                return;

                        }
                        if (!dc.Persons.Any(c => c.MedicalID == NewPerson.InsuranceNo))
                        {

                            EditingPerson = new Person()
                            {
                                FirstName = NewPerson.Firstname,
                                LastName = NewPerson.Lastname,
                                BirthDate = NewPerson.BirthDate,
                                FatherName = NewPerson.FatherName,
                                InsuranceName = NewPerson.InsureName,
                                InsuranceNo = NewPerson.InsuranceNo,
                                PersonalCode = NewPerson.PersonnelNo.ToString(),
                                BookletExpireDate = NewPerson.ExpDate,
                                MedicalID = NewPerson.InsuranceNo,
                                Phone = NewPerson.HomePhone,
                                Sex = NewPerson.Sex == 0 ? true : false,
                                Address = string.IsNullOrWhiteSpace(NewPerson.HomeCity) ? "" : NewPerson.HomeCity + " " + NewPerson.HomeAddress,
                                Comment = NewPerson.Note,
                                NationalCode = NewPerson.NationalCode
                            };
                            if (NewPerson.NationalCode.Length == 10)
                            {
                                EditingPerson.NationalCode = NewPerson.NationalCode;
                            }
                            dc.Persons.InsertOnSubmit(EditingPerson);
                            dc.SubmitChanges();
                        }
                        else
                        {//Search MEdicalID
                            var ALLPersonINHCIS = dc.Persons.Where(c => c.MedicalID == NewPerson.InsuranceNo).ToList();
                            if (ALLPersonINHCIS.Count == 1)
                            {
                                EditingPerson = ALLPersonINHCIS.FirstOrDefault();
                                EditingPerson.FirstName = NewPerson.Firstname;
                                EditingPerson.LastName = NewPerson.Lastname;
                                EditingPerson.BirthDate = NewPerson.BirthDate;
                                EditingPerson.FatherName = NewPerson.FatherName;
                                EditingPerson.InsuranceName = NewPerson.InsureName;
                                EditingPerson.InsuranceNo = NewPerson.InsuranceNo;
                                EditingPerson.PersonalCode = NewPerson.PersonnelNo.ToString();
                                EditingPerson.BookletExpireDate = NewPerson.ExpDate;
                                EditingPerson.MedicalID = NewPerson.InsuranceNo;
                                EditingPerson.Phone = NewPerson.HomePhone;
                                EditingPerson.Sex = NewPerson.Sex == 0 ? true : false;
                                EditingPerson.Comment = NewPerson.Note;
                                EditingPerson.NationalCode = NewPerson.NationalCode;
                                EditingPerson.Address = string.IsNullOrWhiteSpace(NewPerson.HomeCity) ? "" : NewPerson.HomeCity + " " + NewPerson.HomeAddress;
                                dc.SubmitChanges();
                            }
                            else
                            {
                                /// take One and Delete Other
                                var MainPerson = ALLPersonINHCIS[0];
                                EditingPerson = MainPerson;
                                EditingPerson.FirstName = NewPerson.Firstname;
                                EditingPerson.LastName = NewPerson.Lastname;
                                EditingPerson.BirthDate = NewPerson.BirthDate;
                                EditingPerson.FatherName = NewPerson.FatherName;
                                EditingPerson.InsuranceName = NewPerson.InsureName;
                                EditingPerson.InsuranceNo = NewPerson.InsuranceNo;
                                EditingPerson.PersonalCode = NewPerson.PersonnelNo.ToString();
                                EditingPerson.BookletExpireDate = NewPerson.ExpDate;
                                EditingPerson.MedicalID = NewPerson.InsuranceNo;
                                EditingPerson.Phone = NewPerson.HomePhone;
                                EditingPerson.Sex = NewPerson.Sex == 0 ? true : false;
                                EditingPerson.Comment = NewPerson.Note;
                                EditingPerson.NationalCode = NewPerson.NationalCode;
                                EditingPerson.Address = string.IsNullOrWhiteSpace(NewPerson.HomeCity) ? "" : NewPerson.HomeCity + " " + NewPerson.HomeAddress;
                                dc.SubmitChanges();
                                DeleteSamePersonOfHCIS(EditingPerson, ALLPersonINHCIS);
                            }
                            dc.SubmitChanges();
                        
                       
                        
                       
                            ClearGSM();
                            dc.SubmitChanges();
                            DoctorSlk.Select();
                        }

                    }
                    #endregion
                    #region      // agar codemeli valerd shode bashad
                    else
                    {
                        var PaitiontNational = dc.Persons.Where(c => c.NationalCode == txtNationalCode.Text).ToList();
                        Spu_AllDBPersonResult NewInsure = new Spu_AllDBPersonResult();
                        // insure haye mojod baraye shakhs ra peyda mikonim
                        var PaitiontsInsuer = dc.Spu_AllDBPerson("", txtNationalCode.Text).ToList();

                        if (PaitiontsInsuer.Count == 0)
                        {
                            if (PaitiontNational.Count == 0)
                            {
                                if (MessageBox.Show(this, "بیماری باکدشناسایی مورد نظر یافت نشد آیا مایل به ثبت بیمار میباشید؟ ", "توجه", MessageBoxButtons.OKCancel, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading) != DialogResult.OK) return;
                                {
                                    BuildNewPerson();
                                    return;
                                }
                            }
                            else
                            {
                                EditingPerson = PaitiontNational.FirstOrDefault();
                                DoctorSlk.Select();
                            }
                        }
                        else
                        {
                            if (PaitiontsInsuer.Count > 1)
                            {
                                var dlg2 = new Dialogs.dlgSameCodeInsure() { Paitionts = PaitiontsInsuer };
                                if (dlg2.ShowDialog() != DialogResult.OK)
                                    return;
                                NewInsure = dlg2.Current;
                            }
                            // اگر یک بیمه باشد
                            else if (PaitiontsInsuer.Count == 1)
                                NewInsure = PaitiontsInsuer.FirstOrDefault() as Spu_AllDBPersonResult;
                            if (PaitiontNational.Count == 1)
                            {
                                EditingPerson = PaitiontNational.FirstOrDefault();
                                if (NewInsure.InsureName != null)
                                    EditingPerson.InsuranceName = NewInsure.InsureName;

                                if (NewInsure.InsuranceNo != null)
                                    EditingPerson.InsuranceNo = NewInsure.InsuranceNo;
                                DoctorSlk.Select();
                            }
                            else
                            {
                                EditingPerson = new Person()
                                {
                                    FirstName = NewInsure.Firstname,
                                    LastName = NewInsure.Lastname,
                                    FatherName = NewInsure.FatherName,
                                    BirthDate = NewInsure.BirthDate,
                                    InsuranceName = NewInsure.InsureName,
                                    InsuranceNo = NewInsure.InsuranceNo,
                                    NationalCode = NewInsure.NationalCode,
                                    PersonalCode = NewInsure.PersonnelNo,
                                    BookletExpireDate = NewInsure.ExpDate
                                };
                                dc.Persons.InsertOnSubmit(EditingPerson);
                                ClearGSM();
                                dc.SubmitChanges();
                                DoctorSlk.Select();
                            }
                        }

                    }
                    #endregion
                }
                EditingGSM = null;
                GetData();
                if (EditingPerson == null || string.IsNullOrWhiteSpace(EditingPerson.FirstName))
                {
                    FirstNameTxt.Select();
                }
                //FirstNameTxt.Select();

                if (showDlg)
                {
                    //Show search dialog
                    var dlg = new dlgPersonSearch() { dc = dc };
                    if (dlg.ShowDialog() == DialogResult.OK && dlg.EditingPerson != null)
                    {
                        EditingPerson = dlg.EditingPerson;
                        GetData();
                    }
                    //if didn't find:
                    else
                    {
                        if (EditingGSM != null)
                        {
                            EditingGSM.Staff = null;
                            EditingGSM.Insurance = null;
                            EditingGSM.Person = null;
                            //DoctorCodeSpn.Value = 0;
                        }
                        EditingGSM = null;
                        EditingPerson = null;
                        GetData();
                    }
                }
            }
            finally
            {
                splashScreenManager2.CloseWaitForm();
            }
        }
        private void DeleteSamePersonOfHCIS(Person editingPerson, List<Person> ALLPersonINHCIS)
        {
            try
            {
                for (int i = 1; i < ALLPersonINHCIS.Count; i++)
                {
                    var mydos = ALLPersonINHCIS[i].Dossiers.ToList();
                    foreach (var item in mydos)
                    {
                        item.Person = EditingPerson;
                        item.NationalCode = EditingPerson.NationalCode;
                    }
                    var myGSM = ALLPersonINHCIS[i].GivenServiceMs.ToList();
                    foreach (var item in myGSM)
                    {
                        item.Person = EditingPerson;
                    }
                    var desies = ALLPersonINHCIS[i].PersonDiseases.ToList();
                    foreach (var item in desies)
                    {
                        item.Person = EditingPerson;
                    }
                    var triag = ALLPersonINHCIS[i].Triages.ToList();
                    foreach (var item in triag)
                    {
                        item.Person = EditingPerson;
                    }
                    var triagcpr = ALLPersonINHCIS[i].TriageCPRs.ToList();
                    foreach (var item in triagcpr)
                    {
                        item.Person = EditingPerson;
                    }
                    var triagEmrCpr = ALLPersonINHCIS[i].TriageEmergencyCPRs.ToList();
                    foreach (var item in triagEmrCpr)
                    {
                        item.Person = EditingPerson;
                    }
                    var triagAcc = ALLPersonINHCIS[i].TriageEMGAccidents.ToList();
                    foreach (var item in triagAcc)
                    {
                        item.Person = EditingPerson;
                    }
                    var triagGin = ALLPersonINHCIS[i].TriageEMGincidents.ToList();
                    foreach (var item in triagGin)
                    {
                        item.Person = EditingPerson;
                    }
                    var triagKhodkoshi = ALLPersonINHCIS[i].TriageEMGkhodkoshis.ToList();
                    foreach (var item in triagKhodkoshi)
                    {
                        item.Person = EditingPerson;
                    }
                    var DrugAllergies = ALLPersonINHCIS[i].DrugAllergies.ToList();
                    foreach (var item in DrugAllergies)
                    {
                        item.Person = EditingPerson;
                    }
                    var DrugHistories = ALLPersonINHCIS[i].DrugHistories.ToList();
                    foreach (var item in DrugHistories)
                    {
                        item.Person = EditingPerson;
                    }
                    var Payments = ALLPersonINHCIS[i].Payments.ToList();
                    foreach (var item in Payments)
                    {
                        item.Person = EditingPerson;
                    }
                    var phy = ALLPersonINHCIS[i].PhysiotherapyOrderMs.ToList();
                    foreach (var item in phy)
                    {
                        item.Person = EditingPerson;
                    }

                    //var Payments = ALLPersonINHCIS[i].ToList();
                    //foreach (var item in Payments)
                    //{
                    //    item.Person = EditingPerson;
                    //}
                    dc.Persons.DeleteOnSubmit(ALLPersonINHCIS[i]);
                }
                dc.SubmitChanges();
            }
            catch (Exception ex)
            {
                var x = editingPerson.NationalCode.Trim();
                //   MessageBox.Show("لطفا این بیمار را با کد ملی پذیرش نمایید\n "+(x.Length==10?( "کد ملی بیمار "+x+ " می باشد"):""));
                dc.Dispose();
                dc = new HCISLabClassesDataContext();
                if (finalConfirmAccess)
                    bbiConfirm.Visibility = BarItemVisibility.Always;
                else
                    bbiConfirm.Visibility = BarItemVisibility.Never;

                defaultBackColor = dtpBookLetExpire.Properties.Appearance.BackColor;

                bbiCancel_ItemClick(null, null);

                if (EditingPerson == null)
                {
                    EditingPerson = new Person() { Sex = false };
                    EditingGSM = new GivenServiceM() { Priority = false };
                    // CheckTurning();
                }

                PersonBindingSource.DataSource = EditingPerson; //Person Object
                GivenServiceMBindingSource.DataSource = EditingGSM; //GivenServiceM Object
                givenServiceDsBindingSource.DataSource = EditingGSM.GivenServiceDs.ToList(); //Grid
                                                                                             //  serviceBindingSource.DataSource = dc.Services.Where(c=>c.CategoryID==(Int32)Category.آزمایش).ToList();

                tabbedControlGroup1.SelectedTabPageIndex = 0;
                txtNationalCode.Text = x.ToString();
             
                return;
            }
        }

        private void bbiLabels_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (EditingPerson == null || EditingPerson.ID == Guid.Empty || EditingGSM == null || EditingGSM.ID == Guid.Empty)
            {
                MessageBox.Show(" هیچ بیماری انتخاب نشده است یا بیمار وارد شده، ثبت و پذیرش نشده است.\r\nلطفا بیمار را از طریق جستجوی پذیرش یا کد ملی انتخاب کنید.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                return;
            }

            if (!EditingGSM.Payed && (EditingGSM.GivenServiceM1 == null
                || EditingGSM.GivenServiceM1.Department == null || EditingGSM.GivenServiceM1.Department.TypeID != 11 || EditingGSM.GivenServiceM1.Department.Name == "اورژانس"))
            {
                MessageBox.Show("بیمار هزینه ی نسخه را پرداخت نکرده است.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                return;
            }

            if (!EditingGSM.GivenServiceDs.Any())
            {
                MessageBox.Show("هیچ آزمایشی برای این بیمار ثبت نشده است", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                return;
            }


            var dlg = new dlgSampling(true) { dc = dc, SelectedGSM = EditingGSM };
            dlg.ShowDialog();
            stiLabel = dlg.stiLabel;
            if (beiPreview.EditValue as bool? == true)
            {
                stiLabel.CompiledReport.ShowWithRibbonGUI();
                //stiLabel.Design();
            }
            else
            {
                bool found = false;
                var myPrnt = Properties.Settings.Default.LabelPrinterName;
                if (!string.IsNullOrWhiteSpace(myPrnt))
                {
                    foreach (string prnt in System.Drawing.Printing.PrinterSettings.InstalledPrinters)
                    {
                        if (myPrnt == prnt)
                        {
                            found = true;
                            break;
                        }
                    }
                }

                if (found)
                {
                    stiLabel.CompiledReport.PrinterSettings.PrinterName = myPrnt;
                    stiLabel.CompiledReport.Print(false);
                }
                else
                {
                    MessageBox.Show("پاچگر پیش فرض خود را در قسمت تعاریف در \"انتخاب چاپگر\"تعریف کنید.", "خطا", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                    stiLabel.CompiledReport.Print(true);
                    return;
                }
            }
        }

        private void txtNationalCode_KeyPress(object sender, KeyPressEventArgs e)
        {

            if (e.KeyChar == (char)Keys.Enter)
            {
                btnSearch.PerformClick();
            }
        }

        private void gridControl1_EditorKeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                gridView1.CloseEditor();
                gridView1.UpdateCurrentRow();
                //gridView1.ShowEditor();
                gridView1.MoveNext();
            }
        }

        private void gridView1_KeyPress(object sender, KeyPressEventArgs e)
        {

            //   gridView1.FocusedColumn = gridView1.GetNearestCanFocusedColumn(gridView1.FocusedColumn);
            //  gridView1.FocusedColumn = gridView1.GetNearestCanFocusedColumn(gridView1.FocusedColumn);

        }

        private void gridView2_CellValueChanged(object sender, DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs e)
        {
            var gsd = gridView2.GetRow(e.RowHandle) as GivenServiceD;
            if (gsd != null)
            {
                //gsd.LastModificator = MainModule.UserID;

                if (e.Column != colConfirm)
                {
                    if (gsd.GivenLaboratoryServiceD != null && !string.IsNullOrWhiteSpace(gsd.GivenLaboratoryServiceD.Result))
                    {
                        gsd.Confirm = true;
                    }
                }
            }


            if (!loadingFromDB && e.Column == colResult)
            {
                CalculateLabTests();
            }

            gridControl2.RefreshDataSource();
        }

        private void gridView2_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            var gsd = e.Row as GivenServiceD;
            if (gsd == null)
                return;
            if (gsd.GivenLaboratoryServiceD != null)
            {
                if (!string.IsNullOrWhiteSpace(gsd.GivenLaboratoryServiceD.Result))
                {
                    gsd.Confirm = true;
                }
                else
                {
                    gsd.Confirm = false;
                }
            }
            var ResultTerm = gsd.GivenLaboratoryServiceD.Result.ToString();
            var re = dc.LabTerms.FirstOrDefault(c => c.ShortcutKey == ResultTerm);
            if (re != null)
                gsd.GivenLaboratoryServiceD.Result = re.TermText;

            gsd.GivenLaboratoryServiceD.NormalRange = gsd.Service.LaboratoryServiceDetail == null ? null : gsd.Service.LaboratoryServiceDetail.NormalRange;
        }

        private void gridView2_CellValueChanging(object sender, DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs e)
        {
            var gsd = gridView2.GetRow(e.RowHandle) as GivenServiceD;
            if (gsd == null)
                return;
            if (gsd.GivenLaboratoryServiceD == null)
            {
                gsd.GivenLaboratoryServiceD = new GivenLaboratoryServiceD() { ID = gsd.ID };
            }
        }

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            if (keyData == Keys.Down)
            {
                if (gridControl2.ContainsFocus)
                {
                    if (gridView2.IsEditing)
                    {
                        if (gridView2.FocusedColumn == colResult)
                        {
                            var gsd = GivenServiceDBindingSource.Current as GivenServiceD;
                            if (gsd == null
                                || gsd.GivenLaboratoryServiceD == null
                                || string.IsNullOrWhiteSpace(gsd.GivenLaboratoryServiceD.Result)
                                || !gsd.GivenLaboratoryServiceD.Result.Trim().Contains("\n"))
                            {
                                gridView2.CloseEditor();
                                gridView2.UpdateCurrentRow();
                                gridView2.MoveNext();
                                gridView2.ShowEditor();
                                gridView2.MakeRowVisible(gridView2.FocusedRowHandle);
                                return true;
                            }
                            else
                            {
                                return base.ProcessCmdKey(ref msg, keyData);
                            }
                        }
                        else
                        {
                            gridView2.CloseEditor();
                            gridView2.UpdateCurrentRow();
                            gridView2.MoveNext();
                            gridView2.ShowEditor();
                            gridView2.MakeRowVisible(gridView2.FocusedRowHandle);
                            return true;
                        }
                    }
                    else
                    {
                        gridView2.CloseEditor();
                        gridView2.UpdateCurrentRow();
                        gridView2.MoveNext();
                        gridView2.ShowEditor();
                        gridView2.MakeRowVisible(gridView2.FocusedRowHandle);
                        return true;
                    }
                }
                else if (gridControl1.ContainsFocus)
                {
                    if (gridView1.IsEditing)
                    {
                        gridView1.CloseEditor();
                        gridView1.UpdateCurrentRow();
                        //gridView1.ShowEditor();
                        gridView1.MoveNext();
                        gridView1.ShowEditor();
                        gridView1.MakeRowVisible(gridView1.FocusedRowHandle);
                        return true;
                    }
                }
            }
            else if (keyData == Keys.Up)
            {
                if (gridControl2.ContainsFocus)
                {
                    if (gridView2.IsEditing)
                    {
                        if (gridView2.FocusedColumn == colResult)
                        {
                            var gsd = GivenServiceDBindingSource.Current as GivenServiceD;
                            if (gsd == null
                                || gsd.GivenLaboratoryServiceD == null
                                || string.IsNullOrWhiteSpace(gsd.GivenLaboratoryServiceD.Result)
                                || !gsd.GivenLaboratoryServiceD.Result.Trim().Contains("\n"))
                            {
                                gridView2.CloseEditor();
                                gridView2.UpdateCurrentRow();
                                gridView2.MovePrev();
                                gridView2.ShowEditor();
                                gridView2.MakeRowVisible(gridView2.FocusedRowHandle);
                                return true;
                            }
                            else
                            {
                                return base.ProcessCmdKey(ref msg, keyData);
                            }
                        }
                        else
                        {
                            gridView2.CloseEditor();
                            gridView2.UpdateCurrentRow();
                            gridView2.MovePrev();
                            gridView2.ShowEditor();
                            gridView2.MakeRowVisible(gridView2.FocusedRowHandle);
                            return true;
                        }
                    }
                    else
                    {
                        gridView2.CloseEditor();
                        gridView2.UpdateCurrentRow();
                        gridView2.MovePrev();
                        gridView2.ShowEditor();
                        gridView2.MakeRowVisible(gridView2.FocusedRowHandle);
                        return true;
                    }
                }
                else if (gridControl1.ContainsFocus)
                {
                    if (gridView1.IsEditing)
                    {
                        gridView1.CloseEditor();
                        gridView1.UpdateCurrentRow();
                        //gridView1.ShowEditor();
                        gridView1.MovePrev();
                        gridView1.ShowEditor();
                        gridView1.MakeRowVisible(gridView1.FocusedRowHandle);
                        return true;
                    }
                }
            }
            else if (keyData == Keys.Enter)
            {
                if (gridControl2.ContainsFocus)
                {

                    if (gridView2.IsEditing)
                    {
                        if (gridView2.FocusedColumn == colResult)
                        {
                            var gsd = GivenServiceDBindingSource.Current as GivenServiceD;
                            if (gsd == null
                                || gsd.GivenLaboratoryServiceD == null
                                || string.IsNullOrWhiteSpace(gsd.GivenLaboratoryServiceD.Result)
                                || !gsd.GivenLaboratoryServiceD.Result.Trim().Contains("\n"))
                            {
                                gridView2.CloseEditor();
                                gridView2.UpdateCurrentRow();
                                gridView2.MoveNext();
                                gridView2.ShowEditor();
                                gridView2.MakeRowVisible(gridView2.FocusedRowHandle);
                                return true;
                            }
                            else
                            {
                                return base.ProcessCmdKey(ref msg, keyData);
                            }
                        }
                        else
                        {
                            gridView2.CloseEditor();
                            gridView2.UpdateCurrentRow();
                            gridView2.MoveNext();
                            gridView2.ShowEditor();
                            gridView2.MakeRowVisible(gridView2.FocusedRowHandle);
                            return true;
                        }
                    }
                    else
                    {
                        gridView2.CloseEditor();
                        gridView2.UpdateCurrentRow();
                        gridView2.MoveNext();
                        gridView2.ShowEditor();
                        gridView2.MakeRowVisible(gridView2.FocusedRowHandle);
                        return true;
                    }
                }
                else if (gridControl1.ContainsFocus)
                {
                    if (gridView1.IsEditing)
                    {
                        gridView1.CloseEditor();
                        gridView1.UpdateCurrentRow();
                        //gridView1.ShowEditor();
                        gridView1.MoveNext();
                        gridView1.ShowEditor();
                        gridView1.MakeRowVisible(gridView1.FocusedRowHandle);
                        return true;
                    }
                }
            }
            else if (keyData == (Keys.Control | Keys.B))
            {
                if (!gridControl2.ContainsFocus)
                    base.ProcessCmdKey(ref msg, keyData);

                var gsd = GivenServiceDBindingSource.Current as GivenServiceD;
                if (gsd == null
                    || gsd.Service == null
                    || gsd.Service.LaboratoryServiceDetail == null
                    || gsd.Service.LaboratoryServiceDetail.TestType == "توضيحي")
                    base.ProcessCmdKey(ref msg, keyData);

                gridView2.CloseEditor();
                gridView2.UpdateCurrentRow();
                var dlg = new dlgAntiBio() { dc = dc };
                if (dlg.ShowDialog() == DialogResult.OK)
                {
                    if (gsd.GivenLaboratoryServiceD == null)
                    {
                        gsd.GivenLaboratoryServiceD = new GivenLaboratoryServiceD() { ID = gsd.ID };
                    }

                    var str = gsd.GivenLaboratoryServiceD.Result ?? "";

                    gsd.GivenLaboratoryServiceD.Result = (str + Environment.NewLine + dlg.Result).Trim();

                    gsd.GivenLaboratoryServiceD.NormalRange = gsd.Service.LaboratoryServiceDetail == null ? null : gsd.Service.LaboratoryServiceDetail.NormalRange;
                    gsd.Confirm = !string.IsNullOrWhiteSpace(gsd.GivenLaboratoryServiceD.Result);
                    gridControl2.RefreshDataSource();
                }
                return true;
            }
            else if (keyData == (Keys.Control | Keys.Q))
            {
                if (!gridControl2.ContainsFocus)
                    base.ProcessCmdKey(ref msg, keyData);

                if (gridView2.IsEditing)
                {
                    gridView2.CloseEditor();
                    gridView2.UpdateCurrentRow();
                }

                foreach (var gsd in (IEnumerable<GivenServiceD>)GivenServiceDBindingSource.DataSource)
                {
                    if (gsd.Service == null)
                        continue;
                    if (gsd.Service.OldID != 432
                        && gsd.Service.OldID != 433
                        && gsd.Service.OldID != 435
                        && gsd.Service.OldID != 436
                        && gsd.Service.OldID != 437
                        && gsd.Service.OldID != 438
                        && gsd.Service.OldID != 439
                        && gsd.Service.OldID != 440
                        && gsd.Service.OldID != 441
                        && gsd.Service.OldID != 442
                        )
                        continue;

                    if (gsd.GivenLaboratoryServiceD == null)
                    {
                        gsd.GivenLaboratoryServiceD = new GivenLaboratoryServiceD() { ID = gsd.ID };
                    }

                    if (string.IsNullOrWhiteSpace(gsd.GivenLaboratoryServiceD.Result)
                        && gsd.Service.LaboratoryServiceDetail != null)
                    {
                        gsd.GivenLaboratoryServiceD.Result = gsd.Service.LaboratoryServiceDetail.NormalRange;
                        gsd.GivenLaboratoryServiceD.NormalRange = gsd.Service.LaboratoryServiceDetail.NormalRange;
                        gsd.Confirm = true;
                    }
                }
                gridControl2.RefreshDataSource();
            }
            else if (keyData == Keys.Delete)
            {
                if (gridControl1.ContainsFocus)
                {
                    if (gridView1.IsEditing)
                        gridView1.CloseEditor();

                    DeleteTest();
                }
            }
            else if (keyData == Keys.F12)
            {
                btnNextSerial.PerformClick();
            }
            else if (keyData == Keys.F11)
            {
                btnPrevSerial.PerformClick();
            }
            return base.ProcessCmdKey(ref msg, keyData);
        }

        private void DeleteTest()
        {
            var gsd = givenServiceDsBindingSource.Current as GivenServiceD;
            if (gsd == null)
                return;

            if (gsd.ID != Guid.Empty)
            {
                MessageBox.Show("این آزمایش ثبت شده است و قابل حذف نمی باشد.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                return;

                //var lstChildsGsds = EditingGSM.GivenServiceDs.Where(x => x.Service.OldParentID == gsd.Service.OldID).ToList();

                //if ((gsd.GivenLaboratoryServiceD != null && !string.IsNullOrWhiteSpace(gsd.GivenLaboratoryServiceD.Result))
                //    || (lstChildsGsds.Any(x => x.GivenLaboratoryServiceD.Result != null
                //                                && x.GivenLaboratoryServiceD.Result.Trim() != "")))
                //{
                //    if (MessageBox.Show("این آزمایش برای این بیمار در سیستم ثبت شده و همچنین 'جوابدهی' شده است. در صورت حذف، این آزمایش و جواب هایش حذف می شوند و قابل بازگشت نیست.\n\n آیا از حذف اطمینان دارید؟", "توجه", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading) != DialogResult.Yes)
                //        return;
                //}
                //else
                //{
                //    if (MessageBox.Show("این آزمایش برای این بیمار در سیستم ثبت شده است. در صورت حذف، این آزمایش از لیست کاری و جوابدهی حذف می شود.\n\n آیا از حذف اطمینان دارید؟", "توجه", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading) != DialogResult.Yes)
                //        return;
                //}

                //var lstChildsDelete = lstChildsGsds.Where(x => (x.ID != Guid.Empty) || (x.ID == Guid.Empty && dc.GetChangeSet().Inserts.Contains(x))).ToList();
                //if (lstChildsDelete.Any())
                //{
                //    dc.GivenLaboratoryServiceDs.DeleteAllOnSubmit(lstChildsDelete.Where(x => x.GivenLaboratoryServiceD != null).Select(x => x.GivenLaboratoryServiceD));
                //    dc.GivenServiceDs.DeleteAllOnSubmit(lstChildsDelete);
                //}

                //if ((gsd.ID != Guid.Empty && gsd.GivenLaboratoryServiceD != null) || (gsd.ID == Guid.Empty && dc.GetChangeSet().Inserts.Contains(gsd.GivenLaboratoryServiceD)) )
                //    dc.GivenLaboratoryServiceDs.DeleteOnSubmit(gsd.GivenLaboratoryServiceD);

                //if ((gsd.ID != Guid.Empty) || (gsd.ID == Guid.Empty && dc.GetChangeSet().Inserts.Contains(gsd)))
                //    dc.GivenServiceDs.DeleteOnSubmit(gsd);
            }

            if (EditingGSM.GivenServiceDs.Contains(gsd))
            {
                EditingGSM.GivenServiceDs.Remove(gsd);
            }
            else
                gridView1.DeleteSelectedRows();

            if (gsd.Service != null && gsd.Service.OldID != null)
            {
                foreach (var item in EditingGSM.GivenServiceDs.Where(x => x.GivenServiceD1 != null
                                        && x.Service != null && x.Service.OldParentID == gsd.Service.OldID).ToList())
                {
                    item.GivenServiceD1 = null;
                }
            }

            gsd.Service = null;
            gridControl1.RefreshDataSource();
            gridControl2.RefreshDataSource();
        }

        private void gridView2_KeyDown(object sender, KeyEventArgs e)
        {

        }

        private void btnHistory_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {

            try
            {
                if (EditingPerson == null || EditingPerson.ID == Guid.Empty || EditingGSM == null || EditingGSM.ID == Guid.Empty)
                {
                    MessageBox.Show(" هیچ بیماری انتخاب نشده است یا بیمار وارد شده، ثبت و پذیرش نشده است.\r\nلطفا بیمار را از طریق جستجوی پذیرش یا کد ملی انتخاب کنید.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                    return;
                }

                if (string.IsNullOrWhiteSpace(EditingPerson.NationalCode) && string.IsNullOrWhiteSpace(EditingPerson.MedicalID))
                {
                    MessageBox.Show("بیمار، کد ملی و شناسه پزشکی ندارد.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                    return;
                }

                var cur = GivenServiceDBindingSource.Current as GivenServiceD;
                if (cur == null)
                    return;
                if (cur.Service == null)
                    return;

                string nat = string.IsNullOrWhiteSpace(EditingPerson.NationalCode) ? null : EditingPerson.NationalCode.Trim();
                string med = string.IsNullOrWhiteSpace(EditingPerson.MedicalID) ? null : EditingPerson.MedicalID.Trim();

                var lst = dc.Spu_LabHistory(nat, med).Where(x => x.OldID != null && x.OldID == cur.Service.OldID).ToList();

                var answer =
                    from c in lst
                    select new
                    {
                        c.SerialNumber,
                        c.Result,
                        c.AdmitDate,
                        c.Abbr
                    };

                stiHistory.Dictionary.Variables.Add("TestName", cur.Service.LaboratoryServiceDetail == null ? cur.Service.Name : cur.Service.LaboratoryServiceDetail.AbbreviationName);
                stiHistory.Dictionary.Variables.Add("Person", "");
                stiHistory.Dictionary.Variables.Add("DateNow", MainModule.GetPersianDate(DateTime.Now));
                stiHistory.Dictionary.Variables.Add("NationalCode", EditingPerson.NationalCode ?? "");
                stiHistory.Dictionary.Variables.Add("Normal", cur.Service.LaboratoryServiceDetail == null ? "" : cur.Service.LaboratoryServiceDetail.NormalRange ?? "");
                stiHistory.Dictionary.Variables.Add("Unit", cur.Service.LaboratoryServiceDetail == null ? "" : cur.Service.LaboratoryServiceDetail.MeasurementUnit ?? "");

                stiHistory.Dictionary.Variables.Add("Person", EditingPerson.FirstName + " " + EditingPerson.LastName);
                if (EditingGSM.Staff != null)
                {
                    stiHistory.Dictionary.Variables.Add("Doctor", EditingGSM.Staff.Person.FirstName + " " + EditingGSM.Staff.Person.LastName);
                }
                stiHistory.Dictionary.Variables.Add("Date", EditingGSM.AnsweringDate);


                stiHistory.RegData("Answer", answer);
                stiHistory.Dictionary.Synchronize();
                stiHistory.Compile();
                stiHistory.CompiledReport.ShowWithRibbonGUI();
                //stiHistory.Design();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "خطا در دریافت اطلاعات", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1);
                return;
            }

        }

        private void tabbedControlGroup1_SelectedPageChanged(object sender, DevExpress.XtraLayout.LayoutTabPageChangedEventArgs e)
        {
            gridControl1.RefreshDataSource();
            gridControl2.RefreshDataSource();
        }

        private void ClearGSM()
        {
            if (EditingGSM != null)
            {
                if (EditingGSM.ID == Guid.Empty)
                {
                    foreach (var gsd in EditingGSM.GivenServiceDs)
                    {
                        gsd.GivenLaboratoryServiceD = null;
                        gsd.Service = null;
                        gsd.Staff = null;
                        //if (dc.GetChangeSet().Inserts.Contains(gsd))
                        //    dc.GetChangeSet().Inserts.Remove(gsd);
                    }


                    EditingGSM.Staff = null;
                    EditingGSM.Insurance = null;
                    EditingGSM.Person = null;
                    EditingGSM.Agenda = null;
                    EditingGSM.Department = null;
                    EditingGSM.Dossier = null;
                    EditingGSM.GivenServiceDs.Clear();
                    EditingGSM.GivenServiceMs.Clear();
                    EditingGSM.GivenServiceM1 = null;
                    EditingGSM.ServiceCategory = null;
                    EditingGSM.Staff1 = null;
                    EditingGSM.Staff2 = null;
                    EditingGSM = null;

                    var lstDeletes = dc.GetChangeSet().Deletes.ToList();
                    var lstToDelete = dc.GetChangeSet().Inserts.OfType<GivenServiceM>().Where(x => x.PersonID == null && !lstDeletes.Contains(x)).ToList();
                    foreach (var gsm in lstToDelete)
                    {
                        dc.GivenLaboratoryServiceDs.DeleteAllOnSubmit(gsm.GivenServiceDs.Where(x => x.GivenLaboratoryServiceD != null)
                            .Select(x => x.GivenLaboratoryServiceD).ToList());
                        dc.GivenServiceDs.DeleteAllOnSubmit(gsm.GivenServiceDs);
                        dc.GivenServiceMs.DeleteOnSubmit(gsm);
                    }

                }
                else
                {
                    dc.Refresh(System.Data.Linq.RefreshMode.OverwriteCurrentValues, EditingGSM);
                    EditingGSM = null;
                }
            }
        }

        private void AdmitDateTxt_EditValueChanged(object sender, EventArgs e)
        {
            //if (!string.IsNullOrWhiteSpace(AdmitDateTxt.Text))
            //{
            //    AdmitDateTxt.Properties.Appearance.BackColor = Color.FromArgb(192, 255, 192);
            //    AdmitDateTxt.Properties.Appearance.ForeColor = Color.Black;
            //}
            //else
            //{
            //    AdmitDateTxt.Properties.Appearance.BackColor = 
            //    AdmitDateTxt.Properties.Appearance.ForeColor = Color.Black;
            //}
        }

        private void btnNextSerial_Click(object sender, EventArgs e)
        {
            var srl = SerialNumberTxt.Text;
            if (string.IsNullOrWhiteSpace(srl))
                return;

            srl = srl.Trim();

            if (srl == "0")
                return;

            int serial = -1;
            bool valid = int.TryParse(srl, out serial);
            if (!valid)
                return;

            serial++;

            var maxSerial = dc.GivenServiceMs
                .Where(x => x.ServiceCategoryID == (int)Category.آزمایش && (x.Payed || (EditingGSM.GivenServiceM1 != null
                                        && EditingGSM.GivenServiceM1.Department != null
                                        && EditingGSM.GivenServiceM1.Department.TypeID == 11
                                        && EditingGSM.GivenServiceM1.Department.Name != "اورژانس")) && x.DepartmentID == MainModule.InstallLocation.ID)
                .Max(x => x.SerialNumber);
            while (serial <= maxSerial)
            {
                var gsm = dc.GivenServiceMs.FirstOrDefault(x => x.SerialNumber == serial && x.ServiceCategoryID == (int)Category.آزمایش && (x.Payed || (EditingGSM.GivenServiceM1 != null
                                        && EditingGSM.GivenServiceM1.Department != null
                                        && EditingGSM.GivenServiceM1.Department.TypeID == 11
                                        && EditingGSM.GivenServiceM1.Department.Name != "اورژانس")) && x.DepartmentID == MainModule.InstallLocation.ID);
                if (gsm != null)
                {
                    EditingPerson = dc.Persons.FirstOrDefault(x => x.ID == gsm.PersonID);
                    EditingGSM = gsm;
                    GetData();
                    break;
                }
                else
                {
                    serial++;
                }
            }
        }

        private void btnPrevSerial_Click(object sender, EventArgs e)
        {
            var srl = SerialNumberTxt.Text;
            if (string.IsNullOrWhiteSpace(srl))
                return;

            srl = srl.Trim();

            if (srl == "0")
                return;

            int serial = -1;
            bool valid = int.TryParse(srl, out serial);
            if (!valid || serial == -1)
                return;

            serial--;

            var minSerial = dc.GivenServiceMs
                .Where(x => x.ServiceCategoryID == (int)Category.آزمایش && x.DepartmentID == MainModule.InstallLocation.ID)
                .Min(x => x.SerialNumber);
            while (serial >= minSerial)
            {
                var gsm = dc.GivenServiceMs.FirstOrDefault(x => x.SerialNumber == serial && (x.Payed || (EditingGSM.GivenServiceM1 != null
                                        && EditingGSM.GivenServiceM1.Department != null
                                        && EditingGSM.GivenServiceM1.Department.TypeID == 11
                                        && EditingGSM.GivenServiceM1.Department.Name != "اورژانس")) && x.ServiceCategoryID == (int)Category.آزمایش && x.DepartmentID == MainModule.InstallLocation.ID);
                if (gsm != null)
                {
                    EditingPerson = dc.Persons.FirstOrDefault(x => x.ID == gsm.PersonID);
                    EditingGSM = gsm;
                    GetData();
                    break;
                }
                else
                {
                    serial--;
                }
            }
        }

        private void dtpBookLetExpire_EditValueChanged(object sender, EventArgs e)
        {
            var txt = dtpBookLetExpire.Text;
            if (string.IsNullOrWhiteSpace(txt) || txt.Trim().Length != 10 || txt.Trim().CompareTo(MainModule.GetPersianDate(DateTime.Now)) >= 0)
            {
                dtpBookLetExpire.Properties.Appearance.Options.UseBackColor = false;
                return;
            }
            else
            {
                dtpBookLetExpire.Properties.Appearance.BackColor = Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(128)))), ((int)(((byte)(128)))));
                dtpBookLetExpire.Properties.Appearance.Options.UseBackColor = true;
            }
        }

        private void GivenServiceDBindingSource_CurrentChanged(object sender, EventArgs e)
        {
            if (gridControl2.ContainsFocus)
            {
                gridView2.ShowEditor();
            }
        }

        private void givenServiceDsBindingSource_CurrentChanged(object sender, EventArgs e)
        {
            if (gridControl1.ContainsFocus)
            {
                gridView1.ShowEditor();
                gridView1.MakeRowVisible(gridView1.FocusedRowHandle);
            }
        }

        private void bbiCancelAdmit_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (!bbiCancelAdmit.Enabled)
                return;

            if (MessageBox.Show("پس از لغو پذیرش این بیمار، شماره در روز و تاریخ و ساعت پذیرش این بیمار  حذف شده و در لیست کاری و جوابدهی ظاهر نمی شود و برای جوابدهی باید دوباره پذیرش شود.\n\nآیا از لغو پذیرش این بیمار اطمینان دارید؟", "توجه", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading) != DialogResult.Yes)
                return;

            cancelAdmit = true;
            bbiOk.PerformClick();
        }

        private void SerialNumberTxt_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar != (char)Keys.Enter)
                return;

            if (string.IsNullOrWhiteSpace(SerialNumberTxt.Text))
                return;

            var srl = SerialNumberTxt.Text.Trim();
            if (srl == "0")
                return;

            int num = -1;
            bool valid = int.TryParse(srl, out num);

            if (!valid)
                return;

            var gsm = dc.GivenServiceMs.FirstOrDefault(x => x.SerialNumber == num);
            if (gsm == null)
            {
                MessageBox.Show("پذیرشی با این سریال یافت نشد.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                return;
            }

            if (!(gsm.ServiceCategoryID == (int)Category.آزمایش && (gsm.Payed || (EditingGSM.GivenServiceM1 != null
                                        && EditingGSM.GivenServiceM1.Department != null
                                        && EditingGSM.GivenServiceM1.Department.TypeID == 11
                                        && EditingGSM.GivenServiceM1.Department.Name != "اورژانس")) && gsm.DepartmentID == MainModule.InstallLocation.ID))
            {
                MessageBox.Show("پذیرش یافت شده معتبر نیست.", "توجه", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
                return;
            }

            EditingPerson = dc.Persons.FirstOrDefault(x => x.ID == gsm.PersonID);
            EditingGSM = gsm;
            GetData();
        }

        private void DailySNTxt_EditValueChanged(object sender, EventArgs e)
        {
            var txt = DailySNTxt.Text;
            if (string.IsNullOrWhiteSpace(txt))
            {
                DailySNTxt.Properties.Appearance.BackColor = Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(128)))), ((int)(((byte)(128)))));
                DailySNTxt.Properties.Appearance.Options.UseBackColor = true;
            }
            else
            {
                DailySNTxt.Properties.Appearance.BackColor = Color.FromArgb(((int)(((byte)(192)))), ((int)(((byte)(255)))), ((int)(((byte)(192)))));
                DailySNTxt.Properties.Appearance.Options.UseBackColor = true;
            }
        }

        private bool IsBastari(GivenServiceM gsm)
        {
            return (gsm.FromDepartmentObject != null
                                        && gsm.FromDepartmentObject.TypeID == 11
                                        && gsm.FromDepartmentObject.Name != "اورژانس");
        }

        private void btnOutDoctor_Click(object sender, EventArgs e)
        {
            var dlg = new dlgOutDoctor();
            if (dlg.ShowDialog() == DialogResult.OK && dlg.PersonID != null && dlg.PersonID.HasValue)
            {
                var lstDoc = dc.Staffs.Where(x => x.UserType == "دکتر")
                .OrderBy(x => x.Code)
                .Select(x => new
                {
                    x.Person.FirstName,
                    x.Person.LastName,
                    FullName = x.Person.FirstName + " " + x.Person.LastName,
                    x.Person.ID,
                    x.Code,
                    x.MedicalSystemCode,
                    x.Speciality.Speciality1,
                    Staff = x
                })
                    .ToList(); //Doctors list (DoctorSlk)
                doctorBindingSource.DataSource = lstDoc;
                EditingGSM.Staff = lstDoc.FirstOrDefault(x => x.ID == dlg.PersonID)?.Staff;
            }
        }

        private void InsuranceLkp_EditValueChanged(object sender, EventArgs e)
        {
            // Disable or enable Edit Expire Date
            var cur = InsuranceLkp.EditValue as Insurance;

            if (cur == null || cur.CompanyType != "شرکتی")
            {
                dtpBookLetExpire.ReadOnly = false;
                dtpBookLetExpire.Properties.ReadOnly = false;
            }
            else
            {
                dtpBookLetExpire.ReadOnly = true;
                dtpBookLetExpire.Properties.ReadOnly = true;
            }
        }
    }
}
