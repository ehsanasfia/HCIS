#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OMOApp.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Hospital")]
	public partial class hospitalDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertlabPrescriptionD(labPrescriptionD instance);
    partial void UpdatelabPrescriptionD(labPrescriptionD instance);
    partial void DeletelabPrescriptionD(labPrescriptionD instance);
    #endregion
		
		public hospitalDataContext() : 
				base(global::OMOApp.Properties.Settings.Default.HospitalConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public hospitalDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public hospitalDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public hospitalDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public hospitalDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<vw_labHospitalMaping> vw_labHospitalMapings
		{
			get
			{
				return this.GetTable<vw_labHospitalMaping>();
			}
		}
		
		public System.Data.Linq.Table<labPrescriptionD> labPrescriptionDs
		{
			get
			{
				return this.GetTable<labPrescriptionD>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vw_labHospitalMaping")]
	public partial class vw_labHospitalMaping
	{
		
		private int _SerialNumber;
		
		private string _ReqDate;
		
		private string _MedicalID;
		
		private int _RelationOrderNo;
		
		private string _NationalCode;
		
		public vw_labHospitalMaping()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="Int NOT NULL")]
		public int SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this._SerialNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReqDate", DbType="Char(10)")]
		public string ReqDate
		{
			get
			{
				return this._ReqDate;
			}
			set
			{
				if ((this._ReqDate != value))
				{
					this._ReqDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalID", DbType="NChar(13)")]
		public string MedicalID
		{
			get
			{
				return this._MedicalID;
			}
			set
			{
				if ((this._MedicalID != value))
				{
					this._MedicalID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationOrderNo", DbType="Int NOT NULL")]
		public int RelationOrderNo
		{
			get
			{
				return this._RelationOrderNo;
			}
			set
			{
				if ((this._RelationOrderNo != value))
				{
					this._RelationOrderNo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalCode", DbType="NChar(12)")]
		public string NationalCode
		{
			get
			{
				return this._NationalCode;
			}
			set
			{
				if ((this._NationalCode != value))
				{
					this._NationalCode = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.labPrescriptionD")]
	public partial class labPrescriptionD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SerialNumber;
		
		private short _Test_ID;
		
		private string _Value;
		
		private string _Normal;
		
		private System.Nullable<bool> _Confirm;
		
		private System.Nullable<byte> _DepID;
		
		private System.Nullable<bool> _Print;
		
		private string _LastAccessOperation;
		
		private bool _Delete;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSerialNumberChanging(int value);
    partial void OnSerialNumberChanged();
    partial void OnTest_IDChanging(short value);
    partial void OnTest_IDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnNormalChanging(string value);
    partial void OnNormalChanged();
    partial void OnConfirmChanging(System.Nullable<bool> value);
    partial void OnConfirmChanged();
    partial void OnDepIDChanging(System.Nullable<byte> value);
    partial void OnDepIDChanged();
    partial void OnPrintChanging(System.Nullable<bool> value);
    partial void OnPrintChanged();
    partial void OnLastAccessOperationChanging(string value);
    partial void OnLastAccessOperationChanged();
    partial void OnDeleteChanging(bool value);
    partial void OnDeleteChanged();
    #endregion
		
		public labPrescriptionD()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="Int NOT NULL")]
		public int SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test_ID", DbType="SmallInt NOT NULL")]
		public short Test_ID
		{
			get
			{
				return this._Test_ID;
			}
			set
			{
				if ((this._Test_ID != value))
				{
					this.OnTest_IDChanging(value);
					this.SendPropertyChanging();
					this._Test_ID = value;
					this.SendPropertyChanged("Test_ID");
					this.OnTest_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(300)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Normal", DbType="NVarChar(300)")]
		public string Normal
		{
			get
			{
				return this._Normal;
			}
			set
			{
				if ((this._Normal != value))
				{
					this.OnNormalChanging(value);
					this.SendPropertyChanging();
					this._Normal = value;
					this.SendPropertyChanged("Normal");
					this.OnNormalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Confirm]", Storage="_Confirm", DbType="Bit")]
		public System.Nullable<bool> Confirm
		{
			get
			{
				return this._Confirm;
			}
			set
			{
				if ((this._Confirm != value))
				{
					this.OnConfirmChanging(value);
					this.SendPropertyChanging();
					this._Confirm = value;
					this.SendPropertyChanged("Confirm");
					this.OnConfirmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepID", DbType="TinyInt")]
		public System.Nullable<byte> DepID
		{
			get
			{
				return this._DepID;
			}
			set
			{
				if ((this._DepID != value))
				{
					this.OnDepIDChanging(value);
					this.SendPropertyChanging();
					this._DepID = value;
					this.SendPropertyChanged("DepID");
					this.OnDepIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Print]", Storage="_Print", DbType="Bit")]
		public System.Nullable<bool> Print
		{
			get
			{
				return this._Print;
			}
			set
			{
				if ((this._Print != value))
				{
					this.OnPrintChanging(value);
					this.SendPropertyChanging();
					this._Print = value;
					this.SendPropertyChanged("Print");
					this.OnPrintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastAccessOperation", DbType="NVarChar(50)")]
		public string LastAccessOperation
		{
			get
			{
				return this._LastAccessOperation;
			}
			set
			{
				if ((this._LastAccessOperation != value))
				{
					this.OnLastAccessOperationChanging(value);
					this.SendPropertyChanging();
					this._LastAccessOperation = value;
					this.SendPropertyChanged("LastAccessOperation");
					this.OnLastAccessOperationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Delete]", Storage="_Delete", DbType="Bit NOT NULL")]
		public bool Delete
		{
			get
			{
				return this._Delete;
			}
			set
			{
				if ((this._Delete != value))
				{
					this.OnDeleteChanging(value);
					this.SendPropertyChanging();
					this._Delete = value;
					this.SendPropertyChanged("Delete");
					this.OnDeleteChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
